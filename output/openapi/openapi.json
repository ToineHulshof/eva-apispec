{
  "openapi": "3.0.1",
  "info": {
    "title": "EVA",
    "description": "OpenApi description of EVA",
    "contact": {
      "name": "Ruben Oost",
      "url": "https://newblack.io/",
      "email": "ruben.oost@newblack.io"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": ""
    }
  ],
  "paths": {
    "/api/core/SendContactForm": {
      "summary": "SendContactForm",
      "description": "Service for sending a contact form to the email set in settings called `ContactForm:MailTo`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Webshop.SendContactForm",
        "description": "Service for sending a contact form to the email set in settings called `ContactForm:MailTo`",
        "operationId": "SendContactForm",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Webshop.SendContactForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SendContactForm",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateApiKey": {
      "summary": "CreateApiKey",
      "description": "Creates an Api key - when no permanent key is requested, it will have a default lifetime based on the `ApiKeyExpirationInDays` setting.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.CreateApiKey",
        "description": "Creates an Api key - when no permanent key is requested, it will have a default lifetime based on the `ApiKeyExpirationInDays` setting.",
        "operationId": "CreateApiKey",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.CreateApiKey"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateApiKey",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.CreateApiKeyResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListApiKeys": {
      "summary": "ListApiKeys",
      "description": "List API keys, optionally filtered.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.ListApiKeys",
        "description": "List API keys, optionally filtered.",
        "operationId": "ListApiKeys",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.ListApiKeys"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListApiKeys",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.ListApiKeysResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteApiKey": {
      "summary": "DeleteApiKey",
      "description": "Deletes an Api key",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.DeleteApiKey",
        "description": "Deletes an Api key",
        "operationId": "DeleteApiKey",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.DeleteApiKey"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteApiKey",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ChangeUserPassword": {
      "summary": "ChangeUserPassword",
      "description": "Change the password of a user.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.ChangeUserPassword",
        "description": "Change the password of a user.",
        "operationId": "ChangeUserPassword",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.ChangeUserPassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ChangeUserPassword",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.ChangeUserPasswordResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CheckEmailAddressAvailability": {
      "summary": "CheckEmailAddressAvailability",
      "description": "Checks if the given EmailAddress is available to create an account for.\n\nWhen creating Employee accounts, the `AsEmployee` property should be set to true.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.CheckEmailAddressAvailability",
        "description": "Checks if the given EmailAddress is available to create an account for.\n\nWhen creating Employee accounts, the `AsEmployee` property should be set to true.",
        "operationId": "CheckEmailAddressAvailability",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.CheckEmailAddressAvailability"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CheckEmailAddressAvailability",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.CheckUsernameAvailabilityResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CheckNicknameAvailability": {
      "summary": "CheckNicknameAvailability",
      "description": "Checks if the given Nickname is available to create an account for.\n\nWhen creating Employee accounts, the `AsEmployee` property should be set to true.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.CheckNicknameAvailability",
        "description": "Checks if the given Nickname is available to create an account for.\n\nWhen creating Employee accounts, the `AsEmployee` property should be set to true.",
        "operationId": "CheckNicknameAvailability",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.CheckNicknameAvailability"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CheckNicknameAvailability",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.CheckUsernameAvailabilityResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateApiUser": {
      "summary": "CreateApiUser",
      "description": "Creates a API user",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.CreateApiUser",
        "description": "Creates a API user",
        "operationId": "CreateApiUser",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.CreateApiUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateApiUser",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.CreateApiUserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateCustomer": {
      "summary": "CreateCustomer",
      "description": "Creates a customer.\n\nThis is allowed when you are an employee, or by anonymous if the CustomerCanRegister (default true) is enabled.\n\nBe sure to handle errors for registering, which could be (amongst others);\n\n  * InvalidEmailAddress\n  * EmailAddressInUse\n  * NicknameInUse\n  * FiscalIDInUse",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.CreateCustomer",
        "description": "Creates a customer.\n\nThis is allowed when you are an employee, or by anonymous if the CustomerCanRegister (default true) is enabled.\n\nBe sure to handle errors for registering, which could be (amongst others);\n\n  * InvalidEmailAddress\n  * EmailAddressInUse\n  * NicknameInUse\n  * FiscalIDInUse",
        "operationId": "CreateCustomer",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.CreateCustomer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateCustomer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.CreateCustomerResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteUser": {
      "summary": "DeleteUser",
      "description": "Delete a User by it's ID.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.DeleteUser",
        "description": "Delete a User by it's ID.",
        "operationId": "DeleteUser",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.DeleteUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteUser",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GenerateTemporaryPasswordForUser": {
      "summary": "GenerateTemporaryPasswordForUser",
      "description": "Creates a temporary, numeric password for specified user, overwriting his/her current password, intended for employees to be able to help resetting a user password.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.GenerateTemporaryPasswordForUser",
        "description": "Creates a temporary, numeric password for specified user, overwriting his/her current password, intended for employees to be able to help resetting a user password.",
        "operationId": "GenerateTemporaryPasswordForUser",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.GenerateTemporaryPasswordForUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GenerateTemporaryPasswordForUser",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.GenerateTemporaryPasswordForUserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetCurrentUserIdentificationInfo": {
      "summary": "GetCurrentUserIdentificationInfo",
      "description": "Return identification info for the current employee.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.GetCurrentUserIdentificationInfo",
        "description": "Return identification info for the current employee.",
        "operationId": "GetCurrentUserIdentificationInfo",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.GetCurrentUserIdentificationInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetCurrentUserIdentificationInfo",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.GetCurrentUserIdentificationInfoResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetCurrentUser": {
      "summary": "GetCurrentUser",
      "description": "Return the current user for the given Authorization header",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.GetCurrentUser",
        "description": "Return the current user for the given Authorization header",
        "operationId": "GetCurrentUser",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.GetCurrentUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetCurrentUser",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.GetCurrentUserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetEmailAddressDomainSuggestions": {
      "summary": "GetEmailAddressDomainSuggestions",
      "description": "This service returns a list of the most likely email address domains (so 'gmail.com', 'hotmail.com', etc) based on\nyour current context.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.GetEmailAddressDomainSuggestions",
        "description": "This service returns a list of the most likely email address domains (so 'gmail.com', 'hotmail.com', etc) based on\nyour current context.",
        "operationId": "GetEmailAddressDomainSuggestions",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.GetEmailAddressDomainSuggestions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetEmailAddressDomainSuggestions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.GetEmailAddressDomainSuggestionsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetLoginOrganizationUnitsForUser": {
      "summary": "GetLoginOrganizationUnitsForUser",
      "description": "Returns all organization units where this user can login",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.GetLoginOrganizationUnitsForUser",
        "description": "Returns all organization units where this user can login",
        "operationId": "GetLoginOrganizationUnitsForUser",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.GetLoginOrganizationUnitsForUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetLoginOrganizationUnitsForUser",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.GetLoginOrganizationUnitsForUserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetTokenInfo": {
      "summary": "GetTokenInfo",
      "description": "Retrieve information about a temporary access token from specified `Authorization` parameter.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.GetTokenInfo",
        "description": "Retrieve information about a temporary access token from specified `Authorization` parameter.",
        "operationId": "GetTokenInfo",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.GetTokenInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetTokenInfo",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.GetTokenInfoResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetUserAssociations": {
      "summary": "GetUserAssociations",
      "description": "Return the current user associations for the given user",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.GetUserAssociations",
        "description": "Return the current user associations for the given user",
        "operationId": "GetUserAssociations",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.GetUserAssociations"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetUserAssociations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.GetUserAssociationsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetUserIdentificationByID": {
      "summary": "GetUserIdentificationByID",
      "description": "The GetUserIdentificationByID service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.GetUserIdentificationByID",
        "description": "The GetUserIdentificationByID service",
        "operationId": "GetUserIdentificationByID",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.GetUserIdentificationByID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetUserIdentificationByID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.GetUserIdentificationByIDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetUser": {
      "summary": "GetUser",
      "description": "Get a user by ID",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.GetUser",
        "description": "Get a user by ID",
        "operationId": "GetUser",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.GetUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetUser",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.GetUserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListAvailableTimeZones": {
      "summary": "ListAvailableTimeZones",
      "description": "The ListAvailableTimeZones service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.ListAvailableTimeZones",
        "description": "The ListAvailableTimeZones service",
        "operationId": "ListAvailableTimeZones",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.ListAvailableTimeZones"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListAvailableTimeZones",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.ListAvailableTimeZonesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListUserApiKeys": {
      "summary": "ListUserApiKeys",
      "description": "The ListUserApiKeys service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.ListUserApiKeys",
        "description": "The ListUserApiKeys service",
        "operationId": "ListUserApiKeys",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.ListUserApiKeys"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListUserApiKeys",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.ListUserApiKeysResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListUserIdentifications": {
      "summary": "ListUserIdentifications",
      "description": "The ListUserIdentifications service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.ListUserIdentifications",
        "description": "The ListUserIdentifications service",
        "operationId": "ListUserIdentifications",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.ListUserIdentifications"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListUserIdentifications",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.ListUserIdentificationsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateUserPhoneNumber": {
      "summary": "CreateUserPhoneNumber",
      "description": "Creates a UserPhoneNumber for the current user, or the UserID specified if you're allowed to do so.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.CreateUserPhoneNumber",
        "description": "Creates a UserPhoneNumber for the current user, or the UserID specified if you're allowed to do so.",
        "operationId": "CreateUserPhoneNumber",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.CreateUserPhoneNumber"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateUserPhoneNumber",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.CreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateUserPhoneNumber": {
      "summary": "UpdateUserPhoneNumber",
      "description": "Updates a UserPhoneNumber based on its ID. This service allows you to change the PhoneNumber (required), Type, Description.\n    If you want to change what number is the primary number, use the `MakeUserPhoneNumberPrimary` service.\n\nThis service only allows the number's own user or an employee to update it.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.UpdateUserPhoneNumber",
        "description": "Updates a UserPhoneNumber based on its ID. This service allows you to change the PhoneNumber (required), Type, Description.\n    If you want to change what number is the primary number, use the `MakeUserPhoneNumberPrimary` service.\n\nThis service only allows the number's own user or an employee to update it.",
        "operationId": "UpdateUserPhoneNumber",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.UpdateUserPhoneNumber"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateUserPhoneNumber",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetUserPhoneNumbers": {
      "summary": "GetUserPhoneNumbers",
      "description": "Get the requested user's phone numbers. If UserID is left null, this service will return the phone numbers for your current user.\nOnly employee users are allowed to access the phone numbers of other users.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.GetUserPhoneNumbers",
        "description": "Get the requested user's phone numbers. If UserID is left null, this service will return the phone numbers for your current user.\nOnly employee users are allowed to access the phone numbers of other users.",
        "operationId": "GetUserPhoneNumbers",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.GetUserPhoneNumbers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetUserPhoneNumbers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.GetUserPhoneNumbersResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteUserPhoneNumber": {
      "summary": "DeleteUserPhoneNumber",
      "description": "Delete a user's phone number based on the provided ID. If you're trying to delete a user's primary phone number and that user has\nmore than two phone numbers currently, this service will return a `CannotDeletePrimaryPhoneNumber` error,\nbecause it cannot determine what number should now become the user's primary phone number. If the user has two numbers, the other number\nwill become the primary.\n\nThis service only allows the number's own user or an employee to delete it.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.DeleteUserPhoneNumber",
        "description": "Delete a user's phone number based on the provided ID. If you're trying to delete a user's primary phone number and that user has\nmore than two phone numbers currently, this service will return a `CannotDeletePrimaryPhoneNumber` error,\nbecause it cannot determine what number should now become the user's primary phone number. If the user has two numbers, the other number\nwill become the primary.\n\nThis service only allows the number's own user or an employee to delete it.",
        "operationId": "DeleteUserPhoneNumber",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.DeleteUserPhoneNumber"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteUserPhoneNumber",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/MakeUserPhoneNumberPrimary": {
      "summary": "MakeUserPhoneNumberPrimary",
      "description": "This service marks the provided phone number as the user's primary phone number,\nwhich will be used for communication with the user.\n\nThis service only allows the number's own user or an employee to mark it as the primary number.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.MakeUserPhoneNumberPrimary",
        "description": "This service marks the provided phone number as the user's primary phone number,\nwhich will be used for communication with the user.\n\nThis service only allows the number's own user or an employee to mark it as the primary number.",
        "operationId": "MakeUserPhoneNumberPrimary",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.MakeUserPhoneNumberPrimary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to MakeUserPhoneNumberPrimary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/PushUser": {
      "summary": "PushUser",
      "description": "Used to create or update a user from 3rd party system.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.PushUser",
        "description": "Used to create or update a user from 3rd party system.",
        "operationId": "PushUser",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.PushUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to PushUser",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.PushUserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ReactivateUser": {
      "summary": "ReactivateUser",
      "description": "Reactivates an User that was deactivated due to no login",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.ReactivateUser",
        "description": "Reactivates an User that was deactivated due to no login",
        "operationId": "ReactivateUser",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.ReactivateUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ReactivateUser",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/RequestPasswordResetToken": {
      "summary": "RequestPasswordResetToken",
      "description": "The RequestPasswordResetToken service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.RequestPasswordResetToken",
        "description": "The RequestPasswordResetToken service",
        "operationId": "RequestPasswordResetToken",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.RequestPasswordResetToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to RequestPasswordResetToken",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ResetUserPassword": {
      "summary": "ResetUserPassword",
      "description": "The ResetUserPassword service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.ResetUserPassword",
        "description": "The ResetUserPassword service",
        "operationId": "ResetUserPassword",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.ResetUserPassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ResetUserPassword",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.ResetUserPasswordResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SearchUsers": {
      "summary": "SearchUsers",
      "description": "Execute a search through the users\n\nFiltering is possible on all kinds of properties. By default the search results will be restricted to users in the current country.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.SearchUsers",
        "description": "Execute a search through the users\n\nFiltering is possible on all kinds of properties. By default the search results will be restricted to users in the current country.",
        "operationId": "SearchUsers",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.SearchUsers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SearchUsers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.SearchUsersResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetCustomUserData": {
      "summary": "SetCustomUserData",
      "description": "Update user custom data",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.SetCustomUserData",
        "description": "Update user custom data",
        "operationId": "SetCustomUserData",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.SetCustomUserData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetCustomUserData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateUserAccountType": {
      "summary": "UpdateUserAccountType",
      "description": "This service is used to change the AccountType of a Customer.\n\nWhen changing the AccountType from Standard to Incognito or Basic, all credentials and roles are removed.\n\nWhen changing the AccountType from Incognito or Basic to Standard:\n- Uniqueness checks are done for the EmailAddress and Nickname\n- Default customer roles are generated\n- When no password is provided, one is generated and returned in the response\n- If configured, the user will receive an `welcome to EVA` email. If no valid password is provided, the email will also contain a generated password.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.UpdateUserAccountType",
        "description": "This service is used to change the AccountType of a Customer.\n\nWhen changing the AccountType from Standard to Incognito or Basic, all credentials and roles are removed.\n\nWhen changing the AccountType from Incognito or Basic to Standard:\n- Uniqueness checks are done for the EmailAddress and Nickname\n- Default customer roles are generated\n- When no password is provided, one is generated and returned in the response\n- If configured, the user will receive an `welcome to EVA` email. If no valid password is provided, the email will also contain a generated password.",
        "operationId": "UpdateUserAccountType",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.UpdateUserAccountType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateUserAccountType",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.UpdateUserAccountTypeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateUser": {
      "summary": "UpdateUser",
      "description": "Update properties on an existing User. Will throw an exception if one of the properties are invalid.\n\nProperties not specified in the request will be ignored.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.UpdateUser",
        "description": "Update properties on an existing User. Will throw an exception if one of the properties are invalid.\n\nProperties not specified in the request will be ignored.",
        "operationId": "UpdateUser",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.UpdateUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateUser",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateUserAssociation": {
      "summary": "CreateUserAssociation",
      "description": "The CreateUserAssociation service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.CreateUserAssociation",
        "description": "The CreateUserAssociation service",
        "operationId": "CreateUserAssociation",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.CreateUserAssociation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateUserAssociation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.CreateUserAssociationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateUserAssociation": {
      "summary": "UpdateUserAssociation",
      "description": "The UpdateUserAssociation service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.UpdateUserAssociation",
        "description": "The UpdateUserAssociation service",
        "operationId": "UpdateUserAssociation",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.UpdateUserAssociation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateUserAssociation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteUserAssociation": {
      "summary": "DeleteUserAssociation",
      "description": "The DeleteUserAssociation service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.DeleteUserAssociation",
        "description": "The DeleteUserAssociation service",
        "operationId": "DeleteUserAssociation",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.DeleteUserAssociation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteUserAssociation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateUserAssociationType": {
      "summary": "CreateUserAssociationType",
      "description": "The CreateUserAssociationType service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.CreateUserAssociationType",
        "description": "The CreateUserAssociationType service",
        "operationId": "CreateUserAssociationType",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.CreateUserAssociationType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateUserAssociationType",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.CreateUserAssociationTypeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateUserAssociationType": {
      "summary": "UpdateUserAssociationType",
      "description": "The UpdateUserAssociationType service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.UpdateUserAssociationType",
        "description": "The UpdateUserAssociationType service",
        "operationId": "UpdateUserAssociationType",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.UpdateUserAssociationType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateUserAssociationType",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteUserAssociationType": {
      "summary": "DeleteUserAssociationType",
      "description": "The DeleteUserAssociationType service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.DeleteUserAssociationType",
        "description": "The DeleteUserAssociationType service",
        "operationId": "DeleteUserAssociationType",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.DeleteUserAssociationType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteUserAssociationType",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetUserAssociationTypeByID": {
      "summary": "GetUserAssociationTypeByID",
      "description": "The GetUserAssociationTypeByID service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.GetUserAssociationTypeByID",
        "description": "The GetUserAssociationTypeByID service",
        "operationId": "GetUserAssociationTypeByID",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.GetUserAssociationTypeByID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetUserAssociationTypeByID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.GetUserAssociationTypeByIDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetUserAssociationTypes": {
      "summary": "GetUserAssociationTypes",
      "description": "The GetUserAssociationTypes service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.GetUserAssociationTypes",
        "description": "The GetUserAssociationTypes service",
        "operationId": "GetUserAssociationTypes",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.GetUserAssociationTypes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetUserAssociationTypes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.GetUserAssociationTypesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetUserConsignment": {
      "summary": "GetUserConsignment",
      "description": "Get the user Consignment property.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.GetUserConsignment",
        "description": "Get the user Consignment property.",
        "operationId": "GetUserConsignment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.GetUserConsignment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetUserConsignment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.GetUserConsignmentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetUserConsignment": {
      "summary": "SetUserConsignment",
      "description": "Set the user Consignment property.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.SetUserConsignment",
        "description": "Set the user Consignment property.",
        "operationId": "SetUserConsignment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.SetUserConsignment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetUserConsignment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetUserDebtorData": {
      "summary": "GetUserDebtorData",
      "description": "The GetUserDebtorData service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.GetUserDebtorData",
        "description": "The GetUserDebtorData service",
        "operationId": "GetUserDebtorData",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.GetUserDebtorData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetUserDebtorData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.GetUserDebtorDataResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateUserDebtorData": {
      "summary": "UpdateUserDebtorData",
      "description": "The UpdateUserDebtorData service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.UpdateUserDebtorData",
        "description": "The UpdateUserDebtorData service",
        "operationId": "UpdateUserDebtorData",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.UpdateUserDebtorData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateUserDebtorData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetUserGroupByID": {
      "summary": "GetUserGroupByID",
      "description": "The GetUserGroupByID service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.GetUserGroupByID",
        "description": "The GetUserGroupByID service",
        "operationId": "GetUserGroupByID",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.GetUserGroupByID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetUserGroupByID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.GetUserGroupByIDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateUserGroup": {
      "summary": "CreateUserGroup",
      "description": "The CreateUserGroup service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.CreateUserGroup",
        "description": "The CreateUserGroup service",
        "operationId": "CreateUserGroup",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.CreateUserGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateUserGroup",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.CreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateUserGroup": {
      "summary": "UpdateUserGroup",
      "description": "The UpdateUserGroup service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.UpdateUserGroup",
        "description": "The UpdateUserGroup service",
        "operationId": "UpdateUserGroup",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.UpdateUserGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateUserGroup",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteUserGroup": {
      "summary": "DeleteUserGroup",
      "description": "The DeleteUserGroup service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.DeleteUserGroup",
        "description": "The DeleteUserGroup service",
        "operationId": "DeleteUserGroup",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.DeleteUserGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteUserGroup",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListUserGroups": {
      "summary": "ListUserGroups",
      "description": "The ListUserGroups service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.ListUserGroups",
        "description": "The ListUserGroups service",
        "operationId": "ListUserGroups",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.ListUserGroups"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListUserGroups",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.ListUserGroupsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/AddUserToGroup": {
      "summary": "AddUserToGroup",
      "description": "The AddUserToGroup service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.AddUserToGroup",
        "description": "The AddUserToGroup service",
        "operationId": "AddUserToGroup",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.AddUserToGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to AddUserToGroup",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/RemoveUserFromGroup": {
      "summary": "RemoveUserFromGroup",
      "description": "The RemoveUserFromGroup service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.RemoveUserFromGroup",
        "description": "The RemoveUserFromGroup service",
        "operationId": "RemoveUserFromGroup",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.RemoveUserFromGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to RemoveUserFromGroup",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListUsersForUserGroup": {
      "summary": "ListUsersForUserGroup",
      "description": "The ListUsersForUserGroup service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.ListUsersForUserGroup",
        "description": "The ListUsersForUserGroup service",
        "operationId": "ListUsersForUserGroup",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.ListUsersForUserGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListUsersForUserGroup",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.ListUsersForUserGroupResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ValidateUser": {
      "summary": "ValidateUser",
      "description": "The ValidateUser service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.ValidateUser",
        "description": "The ValidateUser service",
        "operationId": "ValidateUser",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.ValidateUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ValidateUser",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.ValidateUserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ConfirmSubscription": {
      "summary": "ConfirmSubscription",
      "description": "Confirm a Subscription with a Token\n\nThe service returns the status of the subscription",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.Subscriptions.ConfirmSubscription",
        "description": "Confirm a Subscription with a Token\n\nThe service returns the status of the subscription",
        "operationId": "ConfirmSubscription",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.Subscriptions.ConfirmSubscription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ConfirmSubscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.Subscriptions.ConfirmSubscriptionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetAvailableSubscriptions": {
      "summary": "GetAvailableSubscriptions",
      "description": "Get all available subscriptions",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.Subscriptions.GetAvailableSubscriptions",
        "description": "Get all available subscriptions",
        "operationId": "GetAvailableSubscriptions",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.Subscriptions.GetAvailableSubscriptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetAvailableSubscriptions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.Subscriptions.GetAvailableSubscriptionsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetUserSubscriptions": {
      "summary": "GetUserSubscriptions",
      "description": "Get all User subscriptions, this takes into account the OU this request is done on and will only show subscriptions available in that OU.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.Subscriptions.GetUserSubscriptions",
        "description": "Get all User subscriptions, this takes into account the OU this request is done on and will only show subscriptions available in that OU.",
        "operationId": "GetUserSubscriptions",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.Subscriptions.GetUserSubscriptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetUserSubscriptions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.Subscriptions.GetUserSubscriptionsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetAllSubscriptionsByUserID": {
      "summary": "GetAllSubscriptionsByUserID",
      "description": "Get all User subscriptions for all OUs.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.Subscriptions.GetAllSubscriptionsByUserID",
        "description": "Get all User subscriptions for all OUs.",
        "operationId": "GetAllSubscriptionsByUserID",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.Subscriptions.GetAllSubscriptionsByUserID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetAllSubscriptionsByUserID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.Subscriptions.GetUserSubscriptionsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SubscribeUser": {
      "summary": "SubscribeUser",
      "description": "Subscribe an User to a Subscription\n\nThe service returns the status of the subscription",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.Subscriptions.SubscribeUser",
        "description": "Subscribe an User to a Subscription\n\nThe service returns the status of the subscription",
        "operationId": "SubscribeUser",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.Subscriptions.SubscribeUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SubscribeUser",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.Subscriptions.SubscribeUserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UnsubscribeUser": {
      "summary": "UnsubscribeUser",
      "description": "Unsubscribes an User from a Subscription\n\nThe service returns the status of the subscription",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.Subscriptions.UnsubscribeUser",
        "description": "Unsubscribes an User from a Subscription\n\nThe service returns the status of the subscription",
        "operationId": "UnsubscribeUser",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.Subscriptions.UnsubscribeUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UnsubscribeUser",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.Subscriptions.UnsubscribeUserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetUserBySocialSecurityNumber": {
      "summary": "GetUserBySocialSecurityNumber",
      "description": "Find an User by their SocialSecurityNumber. This service only returns an UserID.\n\nWhen more info is needed, additional data can be fetched with the `GetUser` service.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.SocialSecurityNumber.GetUserBySocialSecurityNumber",
        "description": "Find an User by their SocialSecurityNumber. This service only returns an UserID.\n\nWhen more info is needed, additional data can be fetched with the `GetUser` service.",
        "operationId": "GetUserBySocialSecurityNumber",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.SocialSecurityNumber.GetUserBySocialSecurityNumber"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetUserBySocialSecurityNumber",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.SocialSecurityNumber.GetUserBySocialSecurityNumberResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetUserInfoBySocialSecurityNumber": {
      "summary": "GetUserInfoBySocialSecurityNumber",
      "description": "Fetch user information from an external API based on the social security number. This can be used to enrich the user in the frontend.\n\n    Depending on the SSN provider, this may require Customer or Employee rights.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.SocialSecurityNumber.GetUserInfoBySocialSecurityNumber",
        "description": "Fetch user information from an external API based on the social security number. This can be used to enrich the user in the frontend.\n\n    Depending on the SSN provider, this may require Customer or Employee rights.",
        "operationId": "GetUserInfoBySocialSecurityNumber",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.SocialSecurityNumber.GetUserInfoBySocialSecurityNumber"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetUserInfoBySocialSecurityNumber",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.SocialSecurityNumber.GetUserInfoBySocialSecurityNumberResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateCompanyForUser": {
      "summary": "CreateCompanyForUser",
      "description": "Create and attach a new company to an User\n\nOnly Name is required.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.Companies.CreateCompanyForUser",
        "description": "Create and attach a new company to an User\n\nOnly Name is required.",
        "operationId": "CreateCompanyForUser",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.Companies.CreateCompanyForUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateCompanyForUser",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DetachCompanyFromUser": {
      "summary": "DetachCompanyFromUser",
      "description": "The DetachCompanyFromUser service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.Companies.DetachCompanyFromUser",
        "description": "The DetachCompanyFromUser service",
        "operationId": "DetachCompanyFromUser",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.Companies.DetachCompanyFromUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DetachCompanyFromUser",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetCompanyForUser": {
      "summary": "GetCompanyForUser",
      "description": "Return the Company attached to the given User",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.Companies.GetCompanyForUser",
        "description": "Return the Company attached to the given User",
        "operationId": "GetCompanyForUser",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.Companies.GetCompanyForUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetCompanyForUser",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.Companies.GetCompanyForUserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateCompanyForUser": {
      "summary": "UpdateCompanyForUser",
      "description": "Updates the current Company on specified `UserID`, or the current user when omitted.\n\n:no_entry: Requires employee rights when using a `UserID` different than the current user.\n:warning: Will overwrite *all* company fields, those fields omitted in your request will be removed!",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.Companies.UpdateCompanyForUser",
        "description": "Updates the current Company on specified `UserID`, or the current user when omitted.\n\n:no_entry: Requires employee rights when using a `UserID` different than the current user.\n:warning: Will overwrite *all* company fields, those fields omitted in your request will be removed!",
        "operationId": "UpdateCompanyForUser",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.Companies.UpdateCompanyForUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateCompanyForUser",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListUserBorrowedProducts": {
      "summary": "ListUserBorrowedProducts",
      "description": "List borrowed products based on the given filter",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.BorrowedProducts.ListUserBorrowedProducts",
        "description": "List borrowed products based on the given filter",
        "operationId": "ListUserBorrowedProducts",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.BorrowedProducts.ListUserBorrowedProducts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListUserBorrowedProducts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.BorrowedProducts.ListUserBorrowedProductsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/RegisterUserBorrowedProducts": {
      "summary": "RegisterUserBorrowedProducts",
      "description": "Register user borrowed products",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.BorrowedProducts.RegisterUserBorrowedProducts",
        "description": "Register user borrowed products",
        "operationId": "RegisterUserBorrowedProducts",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.BorrowedProducts.RegisterUserBorrowedProducts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to RegisterUserBorrowedProducts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ReturnUserBorrowedProducts": {
      "summary": "ReturnUserBorrowedProducts",
      "description": "Return user borrowed products. When IsDamaged is set to true, the stock will be moved to Damaged. Otherwise, the stock will be moved to Sellable.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.BorrowedProducts.ReturnUserBorrowedProducts",
        "description": "Return user borrowed products. When IsDamaged is set to true, the stock will be moved to Damaged. Otherwise, the stock will be moved to Sellable.",
        "operationId": "ReturnUserBorrowedProducts",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.BorrowedProducts.ReturnUserBorrowedProducts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ReturnUserBorrowedProducts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/AddUserBorrowedProductToOrder": {
      "summary": "AddUserBorrowedProductToOrder",
      "description": "Add user borrowed products to order. When no quantity is given, all borrowed products with the given product ID are added to the order.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.BorrowedProducts.AddUserBorrowedProductToOrder",
        "description": "Add user borrowed products to order. When no quantity is given, all borrowed products with the given product ID are added to the order.",
        "operationId": "AddUserBorrowedProductToOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.BorrowedProducts.AddUserBorrowedProductToOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to AddUserBorrowedProductToOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Users.BorrowedProducts.AddUserBorrowedProductToOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/PreviewUserInteractionCommunication": {
      "summary": "PreviewUserInteractionCommunication",
      "description": "Render a UserInteraction of Type Communication in something that can be displayed.\n\nThis can be used to view the send emails in a webview/iframe.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.UserInteractions.PreviewUserInteractionCommunication",
        "description": "Render a UserInteraction of Type Communication in something that can be displayed.\n\nThis can be used to view the send emails in a webview/iframe.",
        "operationId": "PreviewUserInteractionCommunication",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.UserInteractions.PreviewUserInteractionCommunication"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to PreviewUserInteractionCommunication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.UserInteractions.PreviewUserInteractionCommunicationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ResendUserInteractionCommunication": {
      "summary": "ResendUserInteractionCommunication",
      "description": "Resend a UserInteraction of Type Communication\n\nWhen no EmailAddress is supplied, the original recipient will be used.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.UserInteractions.ResendUserInteractionCommunication",
        "description": "Resend a UserInteraction of Type Communication\n\nWhen no EmailAddress is supplied, the original recipient will be used.",
        "operationId": "ResendUserInteractionCommunication",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.UserInteractions.ResendUserInteractionCommunication"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ResendUserInteractionCommunication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetUserInteractionByID": {
      "summary": "GetUserInteractionByID",
      "description": "Get a UserInteration by its ID. A UserInteraction logs an interaction between an employee and a customer, for example the fact the customer was called.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.UserInteractions.GetUserInteractionByID",
        "description": "Get a UserInteration by its ID. A UserInteraction logs an interaction between an employee and a customer, for example the fact the customer was called.",
        "operationId": "GetUserInteractionByID",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.UserInteractions.GetUserInteractionByID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetUserInteractionByID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.UserInteractions.GetUserInteractionByIDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateUserInteraction": {
      "summary": "CreateUserInteraction",
      "description": "Creates a UserInteraction. A UserInteraction logs an interaction between an employee and a customer, for example the fact the customer was called.\n\nUserID is optional but only if OrderID is also provided and the given Order is attached to a customer. If so then the UserInteraction is attached to the Order.Customer.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.UserInteractions.CreateUserInteraction",
        "description": "Creates a UserInteraction. A UserInteraction logs an interaction between an employee and a customer, for example the fact the customer was called.\n\nUserID is optional but only if OrderID is also provided and the given Order is attached to a customer. If so then the UserInteraction is attached to the Order.Customer.",
        "operationId": "CreateUserInteraction",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.UserInteractions.CreateUserInteraction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateUserInteraction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.UserInteractions.CreateUserInteractionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateUserInteraction": {
      "summary": "UpdateUserInteraction",
      "description": "Updates a UserInteraction. A UserInteraction logs an interaction between an employee and a customer, for example the fact the customer was called.\n\nUserID is optional but only if OrderID is also provided and the given Order is attached to a customer. If so then the UserInteraction is attached to the Order.Customer.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.UserInteractions.UpdateUserInteraction",
        "description": "Updates a UserInteraction. A UserInteraction logs an interaction between an employee and a customer, for example the fact the customer was called.\n\nUserID is optional but only if OrderID is also provided and the given Order is attached to a customer. If so then the UserInteraction is attached to the Order.Customer.",
        "operationId": "UpdateUserInteraction",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.UserInteractions.UpdateUserInteraction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateUserInteraction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteUserInteraction": {
      "summary": "DeleteUserInteraction",
      "description": "Deletes a UserInteraction.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.UserInteractions.DeleteUserInteraction",
        "description": "Deletes a UserInteraction.",
        "operationId": "DeleteUserInteraction",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.UserInteractions.DeleteUserInteraction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteUserInteraction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListUserInteractions": {
      "summary": "ListUserInteractions",
      "description": "The ListUserInteractions service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.UserInteractions.ListUserInteractions",
        "description": "The ListUserInteractions service",
        "operationId": "ListUserInteractions",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.UserInteractions.ListUserInteractions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListUserInteractions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.UserInteractions.ListUserInteractionsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/PushUserInteractionContent": {
      "summary": "PushUserInteractionContent",
      "description": "The PushUserInteractionContent service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.UserInteractions.PushUserInteractionContent",
        "description": "The PushUserInteractionContent service",
        "operationId": "PushUserInteractionContent",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.UserInteractions.PushUserInteractionContent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to PushUserInteractionContent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListTransputJobs": {
      "summary": "ListTransputJobs",
      "description": "Service for listing transput jobs",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.TransputJobs.ListTransputJobs",
        "description": "Service for listing transput jobs",
        "operationId": "ListTransputJobs",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.TransputJobs.ListTransputJobs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListTransputJobs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.TransputJobs.ListTransputJobsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ReplaceEntityTranslation": {
      "summary": "ReplaceEntityTranslation",
      "description": "Creates an EntityTranslation if one does not exist yet, otherwise it replaces the current one.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Translations.ReplaceEntityTranslation",
        "description": "Creates an EntityTranslation if one does not exist yet, otherwise it replaces the current one.",
        "operationId": "ReplaceEntityTranslation",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Translations.ReplaceEntityTranslation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ReplaceEntityTranslation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListEntityTranslations": {
      "summary": "ListEntityTranslations",
      "description": "Service for retrieving a list of `EntityTranslation`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Translations.ListEntityTranslations",
        "description": "Service for retrieving a list of `EntityTranslation`",
        "operationId": "ListEntityTranslations",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Translations.ListEntityTranslations"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListEntityTranslations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Translations.ListEntityTranslationsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteEntityTranslation": {
      "summary": "DeleteEntityTranslation",
      "description": "Service for deleting an existing `EntityTranslation`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Translations.DeleteEntityTranslation",
        "description": "Service for deleting an existing `EntityTranslation`",
        "operationId": "DeleteEntityTranslation",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Translations.DeleteEntityTranslation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteEntityTranslation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetEntityTranslation": {
      "summary": "GetEntityTranslation",
      "description": "Service for retrieving an existing `EntityTranslation`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Translations.GetEntityTranslation",
        "description": "Service for retrieving an existing `EntityTranslation`",
        "operationId": "GetEntityTranslation",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Translations.GetEntityTranslation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetEntityTranslation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Translations.GetEntityTranslationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ReplaceStringTranslation": {
      "summary": "ReplaceStringTranslation",
      "description": "Creates an StringTranslation if one does not exist yet, otherwise it replaces the current one.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Translations.ReplaceStringTranslation",
        "description": "Creates an StringTranslation if one does not exist yet, otherwise it replaces the current one.",
        "operationId": "ReplaceStringTranslation",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Translations.ReplaceStringTranslation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ReplaceStringTranslation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListStringTranslations": {
      "summary": "ListStringTranslations",
      "description": "Service for retrieving a list of `StringTranslation`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Translations.ListStringTranslations",
        "description": "Service for retrieving a list of `StringTranslation`",
        "operationId": "ListStringTranslations",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Translations.ListStringTranslations"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListStringTranslations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Translations.ListStringTranslationsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteStringTranslation": {
      "summary": "DeleteStringTranslation",
      "description": "Service for deleting an existing `StringTranslation`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Translations.DeleteStringTranslation",
        "description": "Service for deleting an existing `StringTranslation`",
        "operationId": "DeleteStringTranslation",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Translations.DeleteStringTranslation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteStringTranslation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetStringTranslation": {
      "summary": "GetStringTranslation",
      "description": "Service for retrieving a `StringTranslation`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Translations.GetStringTranslation",
        "description": "Service for retrieving a `StringTranslation`",
        "operationId": "GetStringTranslation",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Translations.GetStringTranslation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetStringTranslation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Translations.GetStringTranslationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListSuspendedOrders": {
      "summary": "ListSuspendedOrders",
      "description": "To continue with a suspended order, use the `AttachOrderToSession` service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.SuspendedOrders.ListSuspendedOrders",
        "description": "To continue with a suspended order, use the `AttachOrderToSession` service",
        "operationId": "ListSuspendedOrders",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.SuspendedOrders.ListSuspendedOrders"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListSuspendedOrders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.SuspendedOrders.ListSuspendedOrdersResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SuspendOrder": {
      "summary": "SuspendOrder",
      "description": "When you would like to temporarily suspend an Order, you can use `SuspendOrder` to do so. To identify your suspended Order it is possible to supply a `Description`.\nIt is also possible to print a receipt of the suspended order to make it easier to continue later on. When printing a receipt, the `StationID` is mandatory.\n\nTo retreive the suspended orders, see the `ListSuspendedOrders` service.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.SuspendedOrders.SuspendOrder",
        "description": "When you would like to temporarily suspend an Order, you can use `SuspendOrder` to do so. To identify your suspended Order it is possible to supply a `Description`.\nIt is also possible to print a receipt of the suspended order to make it easier to continue later on. When printing a receipt, the `StationID` is mandatory.\n\nTo retreive the suspended orders, see the `ListSuspendedOrders` service.",
        "operationId": "SuspendOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.SuspendedOrders.SuspendOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SuspendOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ResumeSuspendedOrder": {
      "summary": "ResumeSuspendedOrder",
      "description": "When you would like to resume a suspended Order, you can use `ResumeSuspendedOrder` to do so. This will remove the suspended state from the order.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.SuspendedOrders.ResumeSuspendedOrder",
        "description": "When you would like to resume a suspended Order, you can use `ResumeSuspendedOrder` to do so. This will remove the suspended state from the order.",
        "operationId": "ResumeSuspendedOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.SuspendedOrders.ResumeSuspendedOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ResumeSuspendedOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetSuppliersForOrganizationUnit": {
      "summary": "GetSuppliersForOrganizationUnit",
      "description": "Service for retrieving a list of `OrganizationUnitSupplier` by `OrganizationUnit`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Suppliers.GetSuppliersForOrganizationUnit",
        "description": "Service for retrieving a list of `OrganizationUnitSupplier` by `OrganizationUnit`",
        "operationId": "GetSuppliersForOrganizationUnit",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Suppliers.GetSuppliersForOrganizationUnit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetSuppliersForOrganizationUnit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Suppliers.GetSuppliersForOrganizationUnitResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateOrganizationUnitSupplier": {
      "summary": "CreateOrganizationUnitSupplier",
      "description": "Service for creating a `OrganizationUnitSupplier`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Suppliers.CreateOrganizationUnitSupplier",
        "description": "Service for creating a `OrganizationUnitSupplier`",
        "operationId": "CreateOrganizationUnitSupplier",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Suppliers.CreateOrganizationUnitSupplier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateOrganizationUnitSupplier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Suppliers.CreateOrganizationUnitSupplierResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateOrganizationUnitSupplier": {
      "summary": "UpdateOrganizationUnitSupplier",
      "description": "Service for updating a existing `OrganizationUnitSupplier`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Suppliers.UpdateOrganizationUnitSupplier",
        "description": "Service for updating a existing `OrganizationUnitSupplier`",
        "operationId": "UpdateOrganizationUnitSupplier",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Suppliers.UpdateOrganizationUnitSupplier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateOrganizationUnitSupplier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteOrganizationUnitSupplier": {
      "summary": "DeleteOrganizationUnitSupplier",
      "description": "The DeleteOrganizationUnitSupplier service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Suppliers.DeleteOrganizationUnitSupplier",
        "description": "The DeleteOrganizationUnitSupplier service",
        "operationId": "DeleteOrganizationUnitSupplier",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Suppliers.DeleteOrganizationUnitSupplier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteOrganizationUnitSupplier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListOrganizationUnitSuppliers": {
      "summary": "ListOrganizationUnitSuppliers",
      "description": "Service for retrieving a list of `OrganizationUnitSupplier`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Suppliers.ListOrganizationUnitSuppliers",
        "description": "Service for retrieving a list of `OrganizationUnitSupplier`",
        "operationId": "ListOrganizationUnitSuppliers",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Suppliers.ListOrganizationUnitSuppliers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListOrganizationUnitSuppliers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Suppliers.ListOrganizationUnitSuppliersResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/AdjustStock": {
      "summary": "AdjustStock",
      "description": "Book a set of Adjustments to modify stock.\n\nAn Adjustment should either have a `ProductID` or `ProductBackendID` to identify the product, an `OrganizationUnitID` to identify the stock keeping\norganization, a `StockLabelID` (see `GetEnumValues` with type `StockLabel`), a `StockMutationReasonID` (see `GetEnumValues` with type `StockMutationReasons`)\nand (of course) a `Quantity` to actually book.\n\nSupply a `BackendSystemID` on the request and `BackendID`'s on the Adjustments to make the request idempotent (optional). When one adjustment in your\nrequest fails, all of them will fail. Duplicate keys will not be processed again and yield a warning (but thus will not block!).\n\nOptionally supports a `Remark` for each Adjustment.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.AdjustStock",
        "description": "Book a set of Adjustments to modify stock.\n\nAn Adjustment should either have a `ProductID` or `ProductBackendID` to identify the product, an `OrganizationUnitID` to identify the stock keeping\norganization, a `StockLabelID` (see `GetEnumValues` with type `StockLabel`), a `StockMutationReasonID` (see `GetEnumValues` with type `StockMutationReasons`)\nand (of course) a `Quantity` to actually book.\n\nSupply a `BackendSystemID` on the request and `BackendID`'s on the Adjustments to make the request idempotent (optional). When one adjustment in your\nrequest fails, all of them will fail. Duplicate keys will not be processed again and yield a warning (but thus will not block!).\n\nOptionally supports a `Remark` for each Adjustment.",
        "operationId": "AdjustStock",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.AdjustStock"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to AdjustStock",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CommitOrderLines": {
      "summary": "CommitOrderLines",
      "description": "This service allows you to manually commit the stock for the given OrderLineIDs.\nThe response contains whether or not the commitment was successful, per OrderLine.\n\nCommitment can be unsucessful for two reasons:\n\n- No commitment is necessary. This is because it's an OrderLine that can't be committed, for example one without a stock product, or because the order type doesn't allow commitments.\n- Insufficient stock. This service only allows creating a commitment when there's sufficient available stock. Use the MoveCommitments or UncommitOrderLines services to create available stock.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.CommitOrderLines",
        "description": "This service allows you to manually commit the stock for the given OrderLineIDs.\nThe response contains whether or not the commitment was successful, per OrderLine.\n\nCommitment can be unsucessful for two reasons:\n\n- No commitment is necessary. This is because it's an OrderLine that can't be committed, for example one without a stock product, or because the order type doesn't allow commitments.\n- Insufficient stock. This service only allows creating a commitment when there's sufficient available stock. Use the MoveCommitments or UncommitOrderLines services to create available stock.",
        "operationId": "CommitOrderLines",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.CommitOrderLines"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CommitOrderLines",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Stock.CommitOrderLinesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/MoveCommitments": {
      "summary": "MoveCommitments",
      "description": "This service allows you to move stock commitments from one OrderLine (`SourceOrderLineID`) to another OrderLine (`DestinationOrderLineID`).\n\n- If the Source and Destination do not share the same ProductID, a `CannotMoveCommitment` error is returned.\n- If the Source does not have a commitment, a `CannotMoveCommitment` error is returned.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.MoveCommitments",
        "description": "This service allows you to move stock commitments from one OrderLine (`SourceOrderLineID`) to another OrderLine (`DestinationOrderLineID`).\n\n- If the Source and Destination do not share the same ProductID, a `CannotMoveCommitment` error is returned.\n- If the Source does not have a commitment, a `CannotMoveCommitment` error is returned.",
        "operationId": "MoveCommitments",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.MoveCommitments"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to MoveCommitments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UncommitOrderLines": {
      "summary": "UncommitOrderLines",
      "description": "This service allows you to undo a commitment on the given OrderLineIDs, making the committed stock available to other orders again.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.UncommitOrderLines",
        "description": "This service allows you to undo a commitment on the given OrderLineIDs, making the committed stock available to other orders again.",
        "operationId": "UncommitOrderLines",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.UncommitOrderLines"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UncommitOrderLines",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateStockMutations": {
      "summary": "CreateStockMutations",
      "description": "Creates a stock mutation for the given organization unit and product. Note that this service supports creating delta's as well as modifying in absolute quantities based on the `Delta` property.'",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.CreateStockMutations",
        "description": "Creates a stock mutation for the given organization unit and product. Note that this service supports creating delta's as well as modifying in absolute quantities based on the `Delta` property.'",
        "operationId": "CreateStockMutations",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.CreateStockMutations"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateStockMutations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetProductAvailability": {
      "summary": "GetProductAvailability",
      "description": "This service returns information about product availability.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.GetProductAvailability",
        "description": "This service returns information about product availability.",
        "operationId": "GetProductAvailability",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.GetProductAvailability"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetProductAvailability",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Stock.GetProductAvailabilityResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetProductRunRates": {
      "summary": "GetProductRunRates",
      "description": "Calculates the run-rates for the provided products for the provided warehouse OrganizationUnit, based on a date (`Since`).\n\nThe run-rates are returned per SoldFromOrganizationUnit.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.GetProductRunRates",
        "description": "Calculates the run-rates for the provided products for the provided warehouse OrganizationUnit, based on a date (`Since`).\n\nThe run-rates are returned per SoldFromOrganizationUnit.",
        "operationId": "GetProductRunRates",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.GetProductRunRates"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetProductRunRates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Stock.GetProductRunRatesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetQuantityOnHandForProducts": {
      "summary": "GetQuantityOnHandForProducts",
      "description": "Calculate and return the current `QuantityOnHand` for supplied `ProductID`s on given organization unit.\n\nReturns a dictionary with `ProductID` as key, and the `QuantityOnHand` as value.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.GetQuantityOnHandForProducts",
        "description": "Calculate and return the current `QuantityOnHand` for supplied `ProductID`s on given organization unit.\n\nReturns a dictionary with `ProductID` as key, and the `QuantityOnHand` as value.",
        "operationId": "GetQuantityOnHandForProducts",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.GetQuantityOnHandForProducts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetQuantityOnHandForProducts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Stock.GetQuantityOnHandForProductsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetStockAvailabilityEstimateForOrder": {
      "summary": "GetStockAvailabilityEstimateForOrder",
      "description": "Calculates the stock availability for the provided OrderLines that are part of the provided Order.\n\nThe return value of this service is a list that contains, per OrderLine, whether or not it can be fulfilled (`CanBeFulfilled`) on the `RequestedDate`.\n\nWhen an OrderLine doesn't already have a RequestedDate, a RequestedDate of tomorrow is used.\n\nAdditionally, a list of AlternativeDates is returned per OrderLine with dates on which it is expected that the OrderLine can be fulfilled.\n\nWhen OrderLineIDs is left empty, this service will return an estimate for all unshipped lines of the order.\n\nDoesn't work for orders with more than 25 lines.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.GetStockAvailabilityEstimateForOrder",
        "description": "Calculates the stock availability for the provided OrderLines that are part of the provided Order.\n\nThe return value of this service is a list that contains, per OrderLine, whether or not it can be fulfilled (`CanBeFulfilled`) on the `RequestedDate`.\n\nWhen an OrderLine doesn't already have a RequestedDate, a RequestedDate of tomorrow is used.\n\nAdditionally, a list of AlternativeDates is returned per OrderLine with dates on which it is expected that the OrderLine can be fulfilled.\n\nWhen OrderLineIDs is left empty, this service will return an estimate for all unshipped lines of the order.\n\nDoesn't work for orders with more than 25 lines.",
        "operationId": "GetStockAvailabilityEstimateForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.GetStockAvailabilityEstimateForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetStockAvailabilityEstimateForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Stock.GetStockAvailabilityEstimateForOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetStockAvailabilityEstimateForProducts": {
      "summary": "GetStockAvailabilityEstimateForProducts",
      "description": "Given a set of products this service returns a detailed estimate for each product when it's expected to be available.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.GetStockAvailabilityEstimateForProducts",
        "description": "Given a set of products this service returns a detailed estimate for each product when it's expected to be available.",
        "operationId": "GetStockAvailabilityEstimateForProducts",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.GetStockAvailabilityEstimateForProducts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetStockAvailabilityEstimateForProducts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Stock.GetStockAvailabilityEstimateForProductsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetStockAvailabilityTimeline": {
      "summary": "GetStockAvailabilityTimeline",
      "description": "Returns the expected availability timeline for the provided `ProductIDs`, from the perspective of the provided `OrganizationUnitID` (optional, defaults to the user's current OrganizationUnitID).\n\nThe timeline is ordered chronologically and includes all events that are relevant to the availability of the requested products, including events that happen on the suppliers of the requested OrganizationUnit (such as PurchaseOrder receipts).\n\nAdditionally, a `FromDate` (inclusive) and `ToDate` (exclusive) can be used to filter the response by date and a `Type` can be provided to only return timeline items of a certain type.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.GetStockAvailabilityTimeline",
        "description": "Returns the expected availability timeline for the provided `ProductIDs`, from the perspective of the provided `OrganizationUnitID` (optional, defaults to the user's current OrganizationUnitID).\n\nThe timeline is ordered chronologically and includes all events that are relevant to the availability of the requested products, including events that happen on the suppliers of the requested OrganizationUnit (such as PurchaseOrder receipts).\n\nAdditionally, a `FromDate` (inclusive) and `ToDate` (exclusive) can be used to filter the response by date and a `Type` can be provided to only return timeline items of a certain type.",
        "operationId": "GetStockAvailabilityTimeline",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.GetStockAvailabilityTimeline"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetStockAvailabilityTimeline",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Stock.GetStockAvailabilityTimelineResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetStockByStockLabelForProducts": {
      "summary": "GetStockByStockLabelForProducts",
      "description": "Requests the stock per stock label, per product for the given organization unit. If there is no stock at all for a product the product is not\nreturned in the response.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.GetStockByStockLabelForProducts",
        "description": "Requests the stock per stock label, per product for the given organization unit. If there is no stock at all for a product the product is not\nreturned in the response.",
        "operationId": "GetStockByStockLabelForProducts",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.GetStockByStockLabelForProducts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetStockByStockLabelForProducts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Stock.GetStockByStockLabelForProductsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetStockDetailsForProduct": {
      "summary": "GetStockDetailsForProduct",
      "description": "The GetStockDetailsForProduct service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.GetStockDetailsForProduct",
        "description": "The GetStockDetailsForProduct service",
        "operationId": "GetStockDetailsForProduct",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.GetStockDetailsForProduct"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetStockDetailsForProduct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Stock.GetStockDetailsForProductResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetStockLabels": {
      "summary": "GetStockLabels",
      "description": "The GetStockLabels service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.GetStockLabels",
        "description": "The GetStockLabels service",
        "operationId": "GetStockLabels",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.GetStockLabels"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetStockLabels",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Stock.GetStockLabelsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListCommittedOrderLines": {
      "summary": "ListCommittedOrderLines",
      "description": "This service lists the OrderLines for the given ProductID that currently have committed Stock and that have not been exported yet.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.ListCommittedOrderLines",
        "description": "This service lists the OrderLines for the given ProductID that currently have committed Stock and that have not been exported yet.",
        "operationId": "ListCommittedOrderLines",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.ListCommittedOrderLines"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListCommittedOrderLines",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Stock.ListCommittedOrderLinesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListStockMutations": {
      "summary": "ListStockMutations",
      "description": "The page size `Limit` has a maximum value of `1.000` for this service.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.ListStockMutations",
        "description": "The page size `Limit` has a maximum value of `1.000` for this service.",
        "operationId": "ListStockMutations",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.ListStockMutations"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListStockMutations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Stock.ListStockMutationsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListStock": {
      "summary": "ListStock",
      "description": "Returns a paginated list of all stock, optionally filtered.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.ListStock",
        "description": "Returns a paginated list of all stock, optionally filtered.",
        "operationId": "ListStock",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.ListStock"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListStock",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Stock.ListStockResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/MoveStock": {
      "summary": "MoveStock",
      "description": "Books a set of Movements.\n\nA Movement should either have a `ProductID` or `ProductBackendID` to identify the product, an `OrganizationUnitID` to identify the stock keeping\norganization, a `SourceStockLabelID` and `DestinationStockLabelID` (see `GetEnumValues` with type `StockLabel`) and (of course) a `Quantity`\nto actually book.\n\nSupply a `BackendSystemID` on the request and `BackendID`'s on the Movements to make the request idempotent.\n\nOptionally supports a `StockMutationReasonID` and `Remark` for each Movement.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.MoveStock",
        "description": "Books a set of Movements.\n\nA Movement should either have a `ProductID` or `ProductBackendID` to identify the product, an `OrganizationUnitID` to identify the stock keeping\norganization, a `SourceStockLabelID` and `DestinationStockLabelID` (see `GetEnumValues` with type `StockLabel`) and (of course) a `Quantity`\nto actually book.\n\nSupply a `BackendSystemID` on the request and `BackendID`'s on the Movements to make the request idempotent.\n\nOptionally supports a `StockMutationReasonID` and `Remark` for each Movement.",
        "operationId": "MoveStock",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.MoveStock"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to MoveStock",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ProcessStockMutationFile": {
      "summary": "ProcessStockMutationFile",
      "description": "Processes a (delta)stock mutation file.\n\nExpected format of the file is JSON with the following markup:\n\n```\n[\n  {\n    \"ProductID\": [Optional, int],\n    \"ProductBackendID\": [Optional, string],\n    \"QuantityOnHand\": [Required, int, value >= 0]\n  },\n  ...\n]\n```\n\nMutation will only be processed for valid ProductIDs or ProductBackendIDs. In case ProductID and ProductBackendID are provided,\nProductBackendID will be selected as the search parameter.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.ProcessStockMutationFile",
        "description": "Processes a (delta)stock mutation file.\n\nExpected format of the file is JSON with the following markup:\n\n```\n[\n  {\n    \"ProductID\": [Optional, int],\n    \"ProductBackendID\": [Optional, string],\n    \"QuantityOnHand\": [Required, int, value >= 0]\n  },\n  ...\n]\n```\n\nMutation will only be processed for valid ProductIDs or ProductBackendIDs. In case ProductID and ProductBackendID are provided,\nProductBackendID will be selected as the search parameter.",
        "operationId": "ProcessStockMutationFile",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.ProcessStockMutationFile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ProcessStockMutationFile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DownloadStockExcelFileTemplate": {
      "summary": "DownloadStockExcelFileTemplate",
      "description": "Download a template format for the stock file to upload.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.DownloadStockExcelFileTemplate",
        "description": "Download a template format for the stock file to upload.",
        "operationId": "DownloadStockExcelFileTemplate",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.DownloadStockExcelFileTemplate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DownloadStockExcelFileTemplate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.ResourceResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UploadAndProcessStockExcelFile": {
      "summary": "UploadAndProcessStockExcelFile",
      "description": "Upload stock Excel (delta)file. The service processes the data async. This service is intended for small files (up to 5MB). Please view the documentation for processing larger files.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.UploadAndProcessStockExcelFile",
        "description": "Upload stock Excel (delta)file. The service processes the data async. This service is intended for small files (up to 5MB). Please view the documentation for processing larger files.",
        "operationId": "UploadAndProcessStockExcelFile",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.UploadAndProcessStockExcelFile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UploadAndProcessStockExcelFile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UploadAndProcessStockJSONFile": {
      "summary": "UploadAndProcessStockJSONFile",
      "description": "Upload stock JSON (delta)file. The service processes the data async.This service is intended for small files (up to 5MB). Please view the documentation for processing larger files.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.UploadAndProcessStockJSONFile",
        "description": "Upload stock JSON (delta)file. The service processes the data async.This service is intended for small files (up to 5MB). Please view the documentation for processing larger files.",
        "operationId": "UploadAndProcessStockJSONFile",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.UploadAndProcessStockJSONFile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UploadAndProcessStockJSONFile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetStockNotification": {
      "summary": "GetStockNotification",
      "description": "Retrieve a StockNotification for a product and organization, for an EmailAddress - will return its ID, or null when it does not exist.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.GetStockNotification",
        "description": "Retrieve a StockNotification for a product and organization, for an EmailAddress - will return its ID, or null when it does not exist.",
        "operationId": "GetStockNotification",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.GetStockNotification"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetStockNotification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Stock.StockNotificationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetStockNotificationForCurrentUser": {
      "summary": "GetStockNotificationForCurrentUser",
      "description": "Retrieve a StockNotification for a product and organization, for the current user - will return its ID, or null when it does not exist.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.GetStockNotificationForCurrentUser",
        "description": "Retrieve a StockNotification for a product and organization, for the current user - will return its ID, or null when it does not exist.",
        "operationId": "GetStockNotificationForCurrentUser",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.GetStockNotificationForCurrentUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetStockNotificationForCurrentUser",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Stock.StockNotificationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateStockNotification": {
      "summary": "CreateStockNotification",
      "description": "Creates a StockNotification for a product and organization, for specified EmailAddress - will return its ID.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.CreateStockNotification",
        "description": "Creates a StockNotification for a product and organization, for specified EmailAddress - will return its ID.",
        "operationId": "CreateStockNotification",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.CreateStockNotification"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateStockNotification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Stock.StockNotificationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateStockNotificationForCurrentUser": {
      "summary": "CreateStockNotificationForCurrentUser",
      "description": "Creates a StockNotification for a product and organization (or current when null), for the current user - will return its ID.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.CreateStockNotificationForCurrentUser",
        "description": "Creates a StockNotification for a product and organization (or current when null), for the current user - will return its ID.",
        "operationId": "CreateStockNotificationForCurrentUser",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.CreateStockNotificationForCurrentUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateStockNotificationForCurrentUser",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Stock.StockNotificationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteStockNotification": {
      "summary": "DeleteStockNotification",
      "description": "Deletes a StockNotification by ID. When it was created with an EmailAddress, repeat that in this request by means of authentication.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.DeleteStockNotification",
        "description": "Deletes a StockNotification by ID. When it was created with an EmailAddress, repeat that in this request by means of authentication.",
        "operationId": "DeleteStockNotification",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.DeleteStockNotification"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteStockNotification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateStock": {
      "summary": "UpdateStock",
      "description": "Updates the Sellable stock of the given products for specified `OrganizationUnitID`, or when omitted, your current organization unit.\n\nSpecify the new, absolute quantities as values in the `Products` list. Products that are not mentioned will not be modified.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Stock.UpdateStock",
        "description": "Updates the Sellable stock of the given products for specified `OrganizationUnitID`, or when omitted, your current organization unit.\n\nSpecify the new, absolute quantities as values in the `Products` list. Products that are not mentioned will not be modified.",
        "operationId": "UpdateStock",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Stock.UpdateStock"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateStock",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CancelShipments": {
      "summary": "CancelShipments",
      "description": "Cancels shipments without receipt of goods, also removing stock in transit.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Shipments.CancelShipments",
        "description": "Cancels shipments without receipt of goods, also removing stock in transit.",
        "operationId": "CancelShipments",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Shipments.CancelShipments"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CancelShipments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Shipments.CancelShipmentsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateShipment": {
      "summary": "CreateShipment",
      "description": "Create a new shipment\n\nIt is required to specify an Order. This can be done with `OrderID` or by sending `OrderBackendID` and `OrderBackendSystemID`.\n\nTo create a pending Shipment, set `IsPending` to true. A pending shipment has to be shipped with the ShipShipment service.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Shipments.CreateShipment",
        "description": "Create a new shipment\n\nIt is required to specify an Order. This can be done with `OrderID` or by sending `OrderBackendID` and `OrderBackendSystemID`.\n\nTo create a pending Shipment, set `IsPending` to true. A pending shipment has to be shipped with the ShipShipment service.",
        "operationId": "CreateShipment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Shipments.CreateShipment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateShipment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Shipments.CreateShipmentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteShipment": {
      "summary": "DeleteShipment",
      "description": "Delete an existing shipment that has status Pending.\n\nWorks only for SalesOrders at this moment.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Shipments.DeleteShipment",
        "description": "Delete an existing shipment that has status Pending.\n\nWorks only for SalesOrders at this moment.",
        "operationId": "DeleteShipment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Shipments.DeleteShipment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteShipment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeliverShipment": {
      "summary": "DeliverShipment",
      "description": "Delivers an undelivered SalesOrder shipment. This will give both the shipment and the orderline the status that they have been delivered.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Shipments.DeliverShipment",
        "description": "Delivers an undelivered SalesOrder shipment. This will give both the shipment and the orderline the status that they have been delivered.",
        "operationId": "DeliverShipment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Shipments.DeliverShipment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeliverShipment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetPurchaseOrderShipment": {
      "summary": "GetPurchaseOrderShipment",
      "description": "The GetPurchaseOrderShipment service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Shipments.GetPurchaseOrderShipment",
        "description": "The GetPurchaseOrderShipment service",
        "operationId": "GetPurchaseOrderShipment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Shipments.GetPurchaseOrderShipment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetPurchaseOrderShipment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Shipments.GetPurchaseOrderShipmentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetShipment": {
      "summary": "GetShipment",
      "description": "Get a Shipment by its ID, returning information about where it came from, where it's shipped to, its shipping or delivery status and payment status\nof the order(s) contained in the shipment.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Shipments.GetShipment",
        "description": "Get a Shipment by its ID, returning information about where it came from, where it's shipped to, its shipping or delivery status and payment status\nof the order(s) contained in the shipment.",
        "operationId": "GetShipment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Shipments.GetShipment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetShipment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Shipments.GetShipmentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListPurchaseOrderShipments": {
      "summary": "ListPurchaseOrderShipments",
      "description": "The ListPurchaseOrderShipments service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Shipments.ListPurchaseOrderShipments",
        "description": "The ListPurchaseOrderShipments service",
        "operationId": "ListPurchaseOrderShipments",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Shipments.ListPurchaseOrderShipments"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListPurchaseOrderShipments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Shipments.ListPurchaseOrderShipmentsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListShipmentLedgerForShipment": {
      "summary": "ListShipmentLedgerForShipment",
      "description": "Retrieves a paged list of Shipment Ledgers for specified ShipmentID.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Shipments.ListShipmentLedgerForShipment",
        "description": "Retrieves a paged list of Shipment Ledgers for specified ShipmentID.",
        "operationId": "ListShipmentLedgerForShipment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Shipments.ListShipmentLedgerForShipment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListShipmentLedgerForShipment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Shipments.ListShipmentLedgerForShipmentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListShipmentLines": {
      "summary": "ListShipmentLines",
      "description": "List shipmentlines of a shipment, this service replaces the GetShipmentLines and the ListPurchaseOrderShipmentLines services.\n\nThe page size `Limit` has a maximum value of `10.000` for this service.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Shipments.ListShipmentLines",
        "description": "List shipmentlines of a shipment, this service replaces the GetShipmentLines and the ListPurchaseOrderShipmentLines services.\n\nThe page size `Limit` has a maximum value of `10.000` for this service.",
        "operationId": "ListShipmentLines",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Shipments.ListShipmentLines"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListShipmentLines",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Shipments.ListShipmentLinesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListShipmentPackages": {
      "summary": "ListShipmentPackages",
      "description": "Lists shipment packages for a specified shipment",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Shipments.ListShipmentPackages",
        "description": "Lists shipment packages for a specified shipment",
        "operationId": "ListShipmentPackages",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Shipments.ListShipmentPackages"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListShipmentPackages",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Shipments.ListShipmentPackagesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ModifyQuantityShipped": {
      "summary": "ModifyQuantityShipped",
      "description": "Modify the QuantityShipped on one or more ShipmentLines of a Shipment.\n\nWhen the new QuantityShipped is 0 it will be cancelled.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Shipments.ModifyQuantityShipped",
        "description": "Modify the QuantityShipped on one or more ShipmentLines of a Shipment.\n\nWhen the new QuantityShipped is 0 it will be cancelled.",
        "operationId": "ModifyQuantityShipped",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Shipments.ModifyQuantityShipped"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ModifyQuantityShipped",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ProducePackingSlip": {
      "summary": "ProducePackingSlip",
      "description": "The ProducePackingSlip service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Shipments.ProducePackingSlip",
        "description": "The ProducePackingSlip service",
        "operationId": "ProducePackingSlip",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Shipments.ProducePackingSlip"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ProducePackingSlip",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Shipments.ProducePackingSlipResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ProducePickSlip": {
      "summary": "ProducePickSlip",
      "description": "The ProducePickSlip service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Shipments.ProducePickSlip",
        "description": "The ProducePickSlip service",
        "operationId": "ProducePickSlip",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Shipments.ProducePickSlip"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ProducePickSlip",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Shipments.ProducePickSlipResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListShipmentExportsForShipment": {
      "summary": "ListShipmentExportsForShipment",
      "description": "The ListShipmentExportsForShipment service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Shipments.ListShipmentExportsForShipment",
        "description": "The ListShipmentExportsForShipment service",
        "operationId": "ListShipmentExportsForShipment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Shipments.ListShipmentExportsForShipment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListShipmentExportsForShipment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Shipments.ListShipmentExportsForShipmentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetShipmentExportByID": {
      "summary": "GetShipmentExportByID",
      "description": "The GetShipmentExportByID service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Shipments.GetShipmentExportByID",
        "description": "The GetShipmentExportByID service",
        "operationId": "GetShipmentExportByID",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Shipments.GetShipmentExportByID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetShipmentExportByID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Shipments.GetShipmentExportByIDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/RetryShipmentExport": {
      "summary": "RetryShipmentExport",
      "description": "The RetryShipmentExport service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Shipments.RetryShipmentExport",
        "description": "The RetryShipmentExport service",
        "operationId": "RetryShipmentExport",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Shipments.RetryShipmentExport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to RetryShipmentExport",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetShipmentExportDocuments": {
      "summary": "GetShipmentExportDocuments",
      "description": "The GetShipmentExportDocuments service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Shipments.GetShipmentExportDocuments",
        "description": "The GetShipmentExportDocuments service",
        "operationId": "GetShipmentExportDocuments",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Shipments.GetShipmentExportDocuments"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetShipmentExportDocuments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Shipments.GetShipmentExportDocumentsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetShipmentSettings": {
      "summary": "SetShipmentSettings",
      "description": "This service is used in combination with the `GetShipmentSettings` to manage OrganizationUnit settings for Shipments.\nOptionally an OrganizationUnitID can be provided, but by default the settings are updated for the current OrganizationUnit.\n\n- DefaultReceiveMethod: How shipments should be received if no custom implementation is available",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Shipments.SetShipmentSettings",
        "description": "This service is used in combination with the `GetShipmentSettings` to manage OrganizationUnit settings for Shipments.\nOptionally an OrganizationUnitID can be provided, but by default the settings are updated for the current OrganizationUnit.\n\n- DefaultReceiveMethod: How shipments should be received if no custom implementation is available",
        "operationId": "SetShipmentSettings",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Shipments.SetShipmentSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetShipmentSettings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetShipmentSettings": {
      "summary": "GetShipmentSettings",
      "description": "@see: SetShipmentSettings",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Shipments.GetShipmentSettings",
        "description": "@see: SetShipmentSettings",
        "operationId": "GetShipmentSettings",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Shipments.GetShipmentSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetShipmentSettings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Shipments.GetShipmentSettingsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ShipShipment": {
      "summary": "ShipShipment",
      "description": "Ship an existing shipment that has status Pending.\n\nWorks only for SalesOrders at this moment.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Shipments.ShipShipment",
        "description": "Ship an existing shipment that has status Pending.\n\nWorks only for SalesOrders at this moment.",
        "operationId": "ShipShipment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Shipments.ShipShipment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ShipShipment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UndoShipment": {
      "summary": "UndoShipment",
      "description": "Removes stock from transit for an unreceived shipment",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Shipments.UndoShipment",
        "description": "Removes stock from transit for an unreceived shipment",
        "operationId": "UndoShipment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Shipments.UndoShipment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UndoShipment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UndoShipmentReceipt": {
      "summary": "UndoShipmentReceipt",
      "description": "Removes stock for a received shipment",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Shipments.UndoShipmentReceipt",
        "description": "Removes stock for a received shipment",
        "operationId": "UndoShipmentReceipt",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Shipments.UndoShipmentReceipt"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UndoShipmentReceipt",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateShipment": {
      "summary": "UpdateShipment",
      "description": "Update a Shipment. For shipments with status > Pending, only the `ReceiveMethod` can be updated.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Shipments.UpdateShipment",
        "description": "Update a Shipment. For shipments with status > Pending, only the `ReceiveMethod` can be updated.",
        "operationId": "UpdateShipment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Shipments.UpdateShipment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateShipment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateShipmentStatus": {
      "summary": "UpdateShipmentStatus",
      "description": "Updates the shipment status, creating ledger entries on shipment level.\n\nWill be processed as a whole; a single failing line in `Lines` will prevent all other updates in a single call from persisting.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Shipments.UpdateShipmentStatus",
        "description": "Updates the shipment status, creating ledger entries on shipment level.\n\nWill be processed as a whole; a single failing line in `Lines` will prevent all other updates in a single call from persisting.",
        "operationId": "UpdateShipmentStatus",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Shipments.UpdateShipmentStatus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateShipmentStatus",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ValidateShipment": {
      "summary": "ValidateShipment",
      "description": "Validates if a Shipment can be shipped in the current state.\n\nReturns if it is valid (`IsValid`) and if not, how much still needs to be paid (`OpenAmountForShipment`).",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Shipments.ValidateShipment",
        "description": "Validates if a Shipment can be shipped in the current state.\n\nReturns if it is valid (`IsValid`) and if not, how much still needs to be paid (`OpenAmountForShipment`).",
        "operationId": "ValidateShipment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Shipments.ValidateShipment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ValidateShipment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Shipments.ValidateShipmentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ParseScript": {
      "summary": "ParseScript",
      "description": "Parses a script for validation and auto-completion.\n\nCan be used as the user types their script, for that purpose use these parameters:\n- Type: Fast, doing Full performs a full compilation of the script which can take longer. Using Full can be done before the user hits the Save button, or for example every 10th keystroke or so.\n- IncludeAST: False, if you don't use the AST this will greatly reduce the response size.\n\nUse IncludeCompletionSuggestions if you want to display auto-completion suggestions to the user.\n\nYou can verify the entire script and get completion results by passing in the full script as the Source and only the text until the user's cursor in the CompletionSource.\n\nA list of the available dialects can be retrieved by calling GetScriptDialects.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Scripting.ParseScript",
        "description": "Parses a script for validation and auto-completion.\n\nCan be used as the user types their script, for that purpose use these parameters:\n- Type: Fast, doing Full performs a full compilation of the script which can take longer. Using Full can be done before the user hits the Save button, or for example every 10th keystroke or so.\n- IncludeAST: False, if you don't use the AST this will greatly reduce the response size.\n\nUse IncludeCompletionSuggestions if you want to display auto-completion suggestions to the user.\n\nYou can verify the entire script and get completion results by passing in the full script as the Source and only the text until the user's cursor in the CompletionSource.\n\nA list of the available dialects can be retrieved by calling GetScriptDialects.",
        "operationId": "ParseScript",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Scripting.ParseScript"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ParseScript",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Scripting.ParseScriptResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateScript": {
      "summary": "CreateScript",
      "description": "Creates a new script.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Scripting.CreateScript",
        "description": "Creates a new script.",
        "operationId": "CreateScript",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Scripting.CreateScript"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateScript",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Scripting.CreateScriptResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateScript": {
      "summary": "UpdateScript",
      "description": "Updates a script",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Scripting.UpdateScript",
        "description": "Updates a script",
        "operationId": "UpdateScript",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Scripting.UpdateScript"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateScript",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Scripting.UpdateScriptResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListScripts": {
      "summary": "ListScripts",
      "description": "Lists scripts, optionally filtered.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Scripting.ListScripts",
        "description": "Lists scripts, optionally filtered.",
        "operationId": "ListScripts",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Scripting.ListScripts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListScripts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Scripting.ListScriptsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetScript": {
      "summary": "GetScript",
      "description": "Gets a script by ID",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Scripting.GetScript",
        "description": "Gets a script by ID",
        "operationId": "GetScript",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Scripting.GetScript"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetScript",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Scripting.GetScriptResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteScript": {
      "summary": "DeleteScript",
      "description": "Deletes a script",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Scripting.DeleteScript",
        "description": "Deletes a script",
        "operationId": "DeleteScript",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Scripting.DeleteScript"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteScript",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ExplainScript": {
      "summary": "ExplainScript",
      "description": "Attempts to explain the given script in plain English.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Scripting.ExplainScript",
        "description": "Attempts to explain the given script in plain English.",
        "operationId": "ExplainScript",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Scripting.ExplainScript"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ExplainScript",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Scripting.ExplainScriptResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetScriptDialects": {
      "summary": "GetScriptDialects",
      "description": "Returns all available dialects",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Scripting.GetScriptDialects",
        "description": "Returns all available dialects",
        "operationId": "GetScriptDialects",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Scripting.GetScriptDialects"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetScriptDialects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Scripting.GetScriptDialectsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetScriptExtensionPoints": {
      "summary": "GetScriptExtensionPoints",
      "description": "The GetScriptExtensionPoints service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Scripting.GetScriptExtensionPoints",
        "description": "The GetScriptExtensionPoints service",
        "operationId": "GetScriptExtensionPoints",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Scripting.GetScriptExtensionPoints"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetScriptExtensionPoints",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Scripting.GetScriptExtensionPointsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListScriptHistory": {
      "summary": "ListScriptHistory",
      "description": "Returns a list of revisions for a specific script.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Scripting.ListScriptHistory",
        "description": "Returns a list of revisions for a specific script.",
        "operationId": "ListScriptHistory",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Scripting.ListScriptHistory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListScriptHistory",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Scripting.ListScriptHistoryResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/BuildScript": {
      "summary": "BuildScript",
      "description": "The BuildScript service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Scripting.BuildScript",
        "description": "The BuildScript service",
        "operationId": "BuildScript",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Scripting.BuildScript"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to BuildScript",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Scripting.BuildScriptResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetScriptNodeCompletionOptions": {
      "summary": "GetScriptNodeCompletionOptions",
      "description": "Retrieves the completion options for the provided node that is part of the provided AST.\n\nThe completion options consist of three possible values:\n\n- Alternatives: with which nodes can the requested node be replaced?\n- NextStatements: if the node is a statement, which statements can come after it?\n- SelfCompletion: if a node contains child nodes, what are the possible node types for those children?",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Scripting.GetScriptNodeCompletionOptions",
        "description": "Retrieves the completion options for the provided node that is part of the provided AST.\n\nThe completion options consist of three possible values:\n\n- Alternatives: with which nodes can the requested node be replaced?\n- NextStatements: if the node is a statement, which statements can come after it?\n- SelfCompletion: if a node contains child nodes, what are the possible node types for those children?",
        "operationId": "GetScriptNodeCompletionOptions",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Scripting.GetScriptNodeCompletionOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetScriptNodeCompletionOptions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Scripting.GetScriptNodeCompletionOptionsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateRecurringTask": {
      "summary": "CreateRecurringTask",
      "description": "The CreateRecurringTask service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.RecurringTasks.CreateRecurringTask",
        "description": "The CreateRecurringTask service",
        "operationId": "CreateRecurringTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.RecurringTasks.CreateRecurringTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateRecurringTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteRecurringTask": {
      "summary": "DeleteRecurringTask",
      "description": "The DeleteRecurringTask service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.RecurringTasks.DeleteRecurringTask",
        "description": "The DeleteRecurringTask service",
        "operationId": "DeleteRecurringTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.RecurringTasks.DeleteRecurringTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteRecurringTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/EnqueueTask": {
      "summary": "EnqueueTask",
      "description": "The EnqueueTask service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.RecurringTasks.EnqueueTask",
        "description": "The EnqueueTask service",
        "operationId": "EnqueueTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.RecurringTasks.EnqueueTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to EnqueueTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListAvailableRecurringTasks": {
      "summary": "ListAvailableRecurringTasks",
      "description": "The ListAvailableRecurringTasks service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.RecurringTasks.ListAvailableRecurringTasks",
        "description": "The ListAvailableRecurringTasks service",
        "operationId": "ListAvailableRecurringTasks",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.RecurringTasks.ListAvailableRecurringTasks"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListAvailableRecurringTasks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.RecurringTasks.ListAvailableRecurringTasksResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListRecurringTasks": {
      "summary": "ListRecurringTasks",
      "description": "The ListRecurringTasks service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.RecurringTasks.ListRecurringTasks",
        "description": "The ListRecurringTasks service",
        "operationId": "ListRecurringTasks",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.RecurringTasks.ListRecurringTasks"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListRecurringTasks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.RecurringTasks.ListRecurringTasksResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListRecurringTasks2": {
      "summary": "ListRecurringTasks2",
      "description": "The ListRecurringTasks2 service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.RecurringTasks.ListRecurringTasks2",
        "description": "The ListRecurringTasks2 service",
        "operationId": "ListRecurringTasks2",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.RecurringTasks.ListRecurringTasks2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListRecurringTasks2",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.RecurringTasks.ListRecurringTasks2Response"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/TriggerRecurringTask": {
      "summary": "TriggerRecurringTask",
      "description": "The TriggerRecurringTask service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.RecurringTasks.TriggerRecurringTask",
        "description": "The TriggerRecurringTask service",
        "operationId": "TriggerRecurringTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.RecurringTasks.TriggerRecurringTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to TriggerRecurringTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.RecurringTasks.TriggerRecurringTaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateRecurringTask": {
      "summary": "UpdateRecurringTask",
      "description": "The UpdateRecurringTask service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.RecurringTasks.UpdateRecurringTask",
        "description": "The UpdateRecurringTask service",
        "operationId": "UpdateRecurringTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.RecurringTasks.UpdateRecurringTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateRecurringTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetQuickBuyOptions": {
      "summary": "GetQuickBuyOptions",
      "description": "Service for retrieving an list of `QuickBuy` options",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.QuickBuys.GetQuickBuyOptions",
        "description": "Service for retrieving an list of `QuickBuy` options",
        "operationId": "GetQuickBuyOptions",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.QuickBuys.GetQuickBuyOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetQuickBuyOptions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.QuickBuys.GetQuickBuyOptionsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateQuickBuy": {
      "summary": "CreateQuickBuy",
      "description": "Service for creating a `QuickBuy`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.QuickBuys.CreateQuickBuy",
        "description": "Service for creating a `QuickBuy`",
        "operationId": "CreateQuickBuy",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.QuickBuys.CreateQuickBuy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateQuickBuy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.QuickBuys.CreateQuickBuyResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetQuickBuy": {
      "summary": "GetQuickBuy",
      "description": "Service for retrieving an existing `QuickBuy` by ID",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.QuickBuys.GetQuickBuy",
        "description": "Service for retrieving an existing `QuickBuy` by ID",
        "operationId": "GetQuickBuy",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.QuickBuys.GetQuickBuy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetQuickBuy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.QuickBuys.GetQuickBuyResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetQuickBuys": {
      "summary": "GetQuickBuys",
      "description": "Service for retrieving an list of `QuickBuy`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.QuickBuys.GetQuickBuys",
        "description": "Service for retrieving an list of `QuickBuy`",
        "operationId": "GetQuickBuys",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.QuickBuys.GetQuickBuys"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetQuickBuys",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.QuickBuys.GetQuickBuysResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateQuickBuy": {
      "summary": "UpdateQuickBuy",
      "description": "Service for updating an existing `QuickBuy` by ID",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.QuickBuys.UpdateQuickBuy",
        "description": "Service for updating an existing `QuickBuy` by ID",
        "operationId": "UpdateQuickBuy",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.QuickBuys.UpdateQuickBuy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateQuickBuy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteQuickBuy": {
      "summary": "DeleteQuickBuy",
      "description": "Service for deleting an existing `QuickBuy` by ID",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.QuickBuys.DeleteQuickBuy",
        "description": "Service for deleting an existing `QuickBuy` by ID",
        "operationId": "DeleteQuickBuy",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.QuickBuys.DeleteQuickBuy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteQuickBuy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/AddPushNotificationDevice": {
      "summary": "AddPushNotificationDevice",
      "description": "The AddPushNotificationDevice service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Push.AddPushNotificationDevice",
        "description": "The AddPushNotificationDevice service",
        "operationId": "AddPushNotificationDevice",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Push.AddPushNotificationDevice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to AddPushNotificationDevice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/RegisterAppForNotifications": {
      "summary": "RegisterAppForNotifications",
      "description": "The RegisterAppForNotifications service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Push.RegisterAppForNotifications",
        "description": "The RegisterAppForNotifications service",
        "operationId": "RegisterAppForNotifications",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Push.RegisterAppForNotifications"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to RegisterAppForNotifications",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/RemovePushNotificationDevice": {
      "summary": "RemovePushNotificationDevice",
      "description": "The RemovePushNotificationDevice service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Push.RemovePushNotificationDevice",
        "description": "The RemovePushNotificationDevice service",
        "operationId": "RemovePushNotificationDevice",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Push.RemovePushNotificationDevice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to RemovePushNotificationDevice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/AddPurchaseOrderLines": {
      "summary": "AddPurchaseOrderLines",
      "description": "Add lines to an existing purchase order\n\nIt is required to supply an OrderID and at leas one line with a ProductID and a Quantity. All other line properties are optional.\nIt's not allowed to create multiple lines with the same product on the same stocklabel.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.PurchaseOrders.AddPurchaseOrderLines",
        "description": "Add lines to an existing purchase order\n\nIt is required to supply an OrderID and at leas one line with a ProductID and a Quantity. All other line properties are optional.\nIt's not allowed to create multiple lines with the same product on the same stocklabel.",
        "operationId": "AddPurchaseOrderLines",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.AddPurchaseOrderLines"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to AddPurchaseOrderLines",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.AddPurchaseOrderLinesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ConfirmPurchaseOrder": {
      "summary": "ConfirmPurchaseOrder",
      "description": "Confirms that specified Purchase Order will be delivered, identified by the `OrderID` parameter.\n\nOptionally use the `BackendID` parameter to set the BackendID on the Purchase Order.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.PurchaseOrders.ConfirmPurchaseOrder",
        "description": "Confirms that specified Purchase Order will be delivered, identified by the `OrderID` parameter.\n\nOptionally use the `BackendID` parameter to set the BackendID on the Purchase Order.",
        "operationId": "ConfirmPurchaseOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.ConfirmPurchaseOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ConfirmPurchaseOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreatePurchaseOrder": {
      "summary": "CreatePurchaseOrder",
      "description": "Creates a Purchase Order for supplied `OrganizationUnitID`, from optional `SupplierID`.\n\nUse the `BackendID` to indicate the supplier order reference.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.PurchaseOrders.CreatePurchaseOrder",
        "description": "Creates a Purchase Order for supplied `OrganizationUnitID`, from optional `SupplierID`.\n\nUse the `BackendID` to indicate the supplier order reference.",
        "operationId": "CreatePurchaseOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.CreatePurchaseOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreatePurchaseOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.CreatePurchaseOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateShipmentReceipt": {
      "summary": "CreateShipmentReceipt",
      "description": "Creates a shipment receipt with `Lines` for specified `ShipmentID`.\n\n* `CompletesShipment` / `Lines.CompletesShipmentLine` will close the shipment (line) for futher receipts\n* `Lines.QuantityReceived` is the delta quantity received in this receipt, so not the new total quantity received\n* `StockLabelID` is the target StockLabel for the received stock - overrides the StockLabel of the purchase order line",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.PurchaseOrders.CreateShipmentReceipt",
        "description": "Creates a shipment receipt with `Lines` for specified `ShipmentID`.\n\n* `CompletesShipment` / `Lines.CompletesShipmentLine` will close the shipment (line) for futher receipts\n* `Lines.QuantityReceived` is the delta quantity received in this receipt, so not the new total quantity received\n* `StockLabelID` is the target StockLabel for the received stock - overrides the StockLabel of the purchase order line",
        "operationId": "CreateShipmentReceipt",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.CreateShipmentReceipt"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateShipmentReceipt",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.CreateShipmentReceiptResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/FullyReceiveShipment": {
      "summary": "FullyReceiveShipment",
      "description": "Receives a shipment completely as-is. Supply either `ID` or `BackendID`.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.PurchaseOrders.FullyReceiveShipment",
        "description": "Receives a shipment completely as-is. Supply either `ID` or `BackendID`.",
        "operationId": "FullyReceiveShipment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.FullyReceiveShipment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to FullyReceiveShipment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.FullyReceiveShipmentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/FullyShipPurchaseOrder": {
      "summary": "FullyShipPurchaseOrder",
      "description": "The FullyShipPurchaseOrder service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.PurchaseOrders.FullyShipPurchaseOrder",
        "description": "The FullyShipPurchaseOrder service",
        "operationId": "FullyShipPurchaseOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.FullyShipPurchaseOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to FullyShipPurchaseOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetOrganizationUnitCreditBalance": {
      "summary": "GetOrganizationUnitCreditBalance",
      "description": "The GetOrganizationUnitCreditBalance service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.PurchaseOrders.GetOrganizationUnitCreditBalance",
        "description": "The GetOrganizationUnitCreditBalance service",
        "operationId": "GetOrganizationUnitCreditBalance",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.GetOrganizationUnitCreditBalance"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetOrganizationUnitCreditBalance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.GetOrganizationUnitCreditBalanceResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetProductSupplierInfoForProducts": {
      "summary": "GetProductSupplierInfoForProducts",
      "description": "Get the supplier product info for a set of product IDs (not supplier product IDs) and the optional supplier OU.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.PurchaseOrders.GetProductSupplierInfoForProducts",
        "description": "Get the supplier product info for a set of product IDs (not supplier product IDs) and the optional supplier OU.",
        "operationId": "GetProductSupplierInfoForProducts",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.GetProductSupplierInfoForProducts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetProductSupplierInfoForProducts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.GetProductSupplierInfoForProductsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetShipmentDetails": {
      "summary": "GetShipmentDetails",
      "description": "Get details of a shipment to receive, either by `ID` or by `BackendID`/`OrganizationUnitID` combination.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.PurchaseOrders.GetShipmentDetails",
        "description": "Get details of a shipment to receive, either by `ID` or by `BackendID`/`OrganizationUnitID` combination.",
        "operationId": "GetShipmentDetails",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.GetShipmentDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetShipmentDetails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.GetShipmentDetailsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetShipmentReceipt": {
      "summary": "GetShipmentReceipt",
      "description": "Get an existing ShipmentReceipt",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.PurchaseOrders.GetShipmentReceipt",
        "description": "Get an existing ShipmentReceipt",
        "operationId": "GetShipmentReceipt",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.GetShipmentReceipt"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetShipmentReceipt",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.GetShipmentReceiptResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetSupplierStockForProduct": {
      "summary": "GetSupplierStockForProduct",
      "description": "The GetSupplierStockForProduct service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.PurchaseOrders.GetSupplierStockForProduct",
        "description": "The GetSupplierStockForProduct service",
        "operationId": "GetSupplierStockForProduct",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.GetSupplierStockForProduct"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetSupplierStockForProduct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.GetSupplierStockForProductResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ModifyPurchaseOrderLine": {
      "summary": "ModifyPurchaseOrderLine",
      "description": "The ModifyPurchaseOrderLine service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.PurchaseOrders.ModifyPurchaseOrderLine",
        "description": "The ModifyPurchaseOrderLine service",
        "operationId": "ModifyPurchaseOrderLine",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.ModifyPurchaseOrderLine"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ModifyPurchaseOrderLine",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/RaisePurchaseOrderImportedEvent": {
      "summary": "RaisePurchaseOrderImportedEvent",
      "description": "The RaisePurchaseOrderImportedEvent service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.PurchaseOrders.RaisePurchaseOrderImportedEvent",
        "description": "The RaisePurchaseOrderImportedEvent service",
        "operationId": "RaisePurchaseOrderImportedEvent",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.RaisePurchaseOrderImportedEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to RaisePurchaseOrderImportedEvent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ReceivePurchaseOrderShipment": {
      "summary": "ReceivePurchaseOrderShipment",
      "description": "Receive (part of) a Shipment for a PurchaseOrder.\n\nA ShipmentID is required.\n\nWhen doing partial receipts it is strongly advised to supply a BackendSystemID and BackendID to make sure Receipts are not created twice.\n\nTo do partial receipts the FinalShipment property should be set to false, otherwise the shipment will be close afterwards and the remaining lines will be booked as missing.\n\nWhen available it is preferred to identify the ShipmentLines with the ShipmentLineID and not with the ProductID.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.PurchaseOrders.ReceivePurchaseOrderShipment",
        "description": "Receive (part of) a Shipment for a PurchaseOrder.\n\nA ShipmentID is required.\n\nWhen doing partial receipts it is strongly advised to supply a BackendSystemID and BackendID to make sure Receipts are not created twice.\n\nTo do partial receipts the FinalShipment property should be set to false, otherwise the shipment will be close afterwards and the remaining lines will be booked as missing.\n\nWhen available it is preferred to identify the ShipmentLines with the ShipmentLineID and not with the ProductID.",
        "operationId": "ReceivePurchaseOrderShipment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.ReceivePurchaseOrderShipment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ReceivePurchaseOrderShipment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.ReceivePurchaseOrderShipmentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ReceiveShipment": {
      "summary": "ReceiveShipment",
      "description": "The ReceiveShipment service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.PurchaseOrders.ReceiveShipment",
        "description": "The ReceiveShipment service",
        "operationId": "ReceiveShipment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.ReceiveShipment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ReceiveShipment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ShipPurchaseOrder": {
      "summary": "ShipPurchaseOrder",
      "description": "The ShipPurchaseOrder service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.PurchaseOrders.ShipPurchaseOrder",
        "description": "The ShipPurchaseOrder service",
        "operationId": "ShipPurchaseOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.ShipPurchaseOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ShipPurchaseOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.ShipPurchaseOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SupplierCreateOrUpdatePurchaseOrder": {
      "summary": "SupplierCreateOrUpdatePurchaseOrder",
      "description": "Creates a purchase order (or updates it if it already exists).\n\nWhen the order already exists, only the lines can be updated (see `SupplierUpdatePurchaseOrder`) - other properties will be ignored.\n\n:lightbulb: Using `SupplierCreateOrder` and `SupplierUpdatePurchaseOrder` is preferred.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.PurchaseOrders.SupplierCreateOrUpdatePurchaseOrder",
        "description": "Creates a purchase order (or updates it if it already exists).\n\nWhen the order already exists, only the lines can be updated (see `SupplierUpdatePurchaseOrder`) - other properties will be ignored.\n\n:lightbulb: Using `SupplierCreateOrder` and `SupplierUpdatePurchaseOrder` is preferred.",
        "operationId": "SupplierCreateOrUpdatePurchaseOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.SupplierCreateOrUpdatePurchaseOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SupplierCreateOrUpdatePurchaseOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.CreatePurchaseOrderResponseWithUpdateIndicator"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SupplierCreatePurchaseOrder": {
      "summary": "SupplierCreatePurchaseOrder",
      "description": "The SupplierCreatePurchaseOrder service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.PurchaseOrders.SupplierCreatePurchaseOrder",
        "description": "The SupplierCreatePurchaseOrder service",
        "operationId": "SupplierCreatePurchaseOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.SupplierCreatePurchaseOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SupplierCreatePurchaseOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.CreatePurchaseOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SupplierShipPurchaseOrder": {
      "summary": "SupplierShipPurchaseOrder",
      "description": "Ships a Purchase Order with specified lines. Supply either `ID` or a `BackendID`/`BackendSystemID` combination to\nidentify the order.\n\nIf you wish to receive on behalf of a different organization, identify that organization by specifying a\n`ShipToOrganizationUnitBackendID`. Should this organization reside in a different cluster, this call will be proxied\nto that cluster for you.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.PurchaseOrders.SupplierShipPurchaseOrder",
        "description": "Ships a Purchase Order with specified lines. Supply either `ID` or a `BackendID`/`BackendSystemID` combination to\nidentify the order.\n\nIf you wish to receive on behalf of a different organization, identify that organization by specifying a\n`ShipToOrganizationUnitBackendID`. Should this organization reside in a different cluster, this call will be proxied\nto that cluster for you.",
        "operationId": "SupplierShipPurchaseOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.SupplierShipPurchaseOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SupplierShipPurchaseOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SupplierUpdatePurchaseOrder": {
      "summary": "SupplierUpdatePurchaseOrder",
      "description": "The SupplierUpdatePurchaseOrder service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.PurchaseOrders.SupplierUpdatePurchaseOrder",
        "description": "The SupplierUpdatePurchaseOrder service",
        "operationId": "SupplierUpdatePurchaseOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.SupplierUpdatePurchaseOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SupplierUpdatePurchaseOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetConfigurableProductDetail": {
      "summary": "GetConfigurableProductDetail",
      "description": "The GetConfigurableProductDetail service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Products.GetConfigurableProductDetail",
        "description": "The GetConfigurableProductDetail service",
        "operationId": "GetConfigurableProductDetail",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Products.GetConfigurableProductDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetConfigurableProductDetail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Products.GetConfigurableProductDetailResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetConfigurableProductsDetail": {
      "summary": "GetConfigurableProductsDetail",
      "description": "The GetConfigurableProductsDetail service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Products.GetConfigurableProductsDetail",
        "description": "The GetConfigurableProductsDetail service",
        "operationId": "GetConfigurableProductsDetail",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Products.GetConfigurableProductsDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetConfigurableProductsDetail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Products.GetConfigurableProductsDetailResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetGreetingCards": {
      "summary": "GetGreetingCards",
      "description": "Returns a list of greeting cards.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Products.GetGreetingCards",
        "description": "Returns a list of greeting cards.",
        "operationId": "GetGreetingCards",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Products.GetGreetingCards"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetGreetingCards",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Products.GetGreetingCardsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetProductDetail": {
      "summary": "GetProductDetail",
      "description": "The GetProductDetail service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Products.GetProductDetail",
        "description": "The GetProductDetail service",
        "operationId": "GetProductDetail",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Products.GetProductDetail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetProductDetail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Products.GetProductDetailResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetProductRelations": {
      "summary": "GetProductRelations",
      "description": "The GetProductRelations service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Products.GetProductRelations",
        "description": "The GetProductRelations service",
        "operationId": "GetProductRelations",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Products.GetProductRelations"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetProductRelations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Products.GetProductRelationsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetProductPrices": {
      "summary": "GetProductPrices",
      "description": "This service is used to list prices associated with the products determined by IDs.\n\nPrice - this value has TaxRate applied\nPriceInTax - value without TaxRate\n\nA product has more associated prices with different usage types, e.g. Cost, Sales..\n\nRequest e.g.:\n{\n  \"ProductIDs\": [\n    \"productId1\",\n    \"productId2\"\n  ]\n}",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Products.GetProductPrices",
        "description": "This service is used to list prices associated with the products determined by IDs.\n\nPrice - this value has TaxRate applied\nPriceInTax - value without TaxRate\n\nA product has more associated prices with different usage types, e.g. Cost, Sales..\n\nRequest e.g.:\n{\n  \"ProductIDs\": [\n    \"productId1\",\n    \"productId2\"\n  ]\n}",
        "operationId": "GetProductPrices",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Products.GetProductPrices"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetProductPrices",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Products.GetProductPricesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetProductPricing": {
      "summary": "GetProductPricing",
      "description": "The GetProductPricing service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Products.GetProductPricing",
        "description": "The GetProductPricing service",
        "operationId": "GetProductPricing",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Products.GetProductPricing"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetProductPricing",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Products.GetProductPricingResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetProductSearchSuggestions": {
      "summary": "GetProductSearchSuggestions",
      "description": "The GetProductSearchSuggestions service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Products.GetProductSearchSuggestions",
        "description": "The GetProductSearchSuggestions service",
        "operationId": "GetProductSearchSuggestions",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Products.GetProductSearchSuggestions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetProductSearchSuggestions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Products.GetProductSearchSuggestionsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetProducts": {
      "summary": "GetProducts",
      "description": "Fetch one or more products by ID.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Products.GetProducts",
        "description": "Fetch one or more products by ID.",
        "operationId": "GetProducts",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Products.GetProducts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetProducts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Products.GetProductsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetProductUnitOfMeasureQuantities": {
      "summary": "GetProductUnitOfMeasureQuantities",
      "description": "The GetProductUnitOfMeasureQuantities service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Products.GetProductUnitOfMeasureQuantities",
        "description": "The GetProductUnitOfMeasureQuantities service",
        "operationId": "GetProductUnitOfMeasureQuantities",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Products.GetProductUnitOfMeasureQuantities"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetProductUnitOfMeasureQuantities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Products.GetProductUnitOfMeasureQuantitiesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListBrands": {
      "summary": "ListBrands",
      "description": "The ListBrands service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Products.ListBrands",
        "description": "The ListBrands service",
        "operationId": "ListBrands",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Products.ListBrands"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListBrands",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Products.ListBrandsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/PrintProductPriceLabel": {
      "summary": "PrintProductPriceLabel",
      "description": "This service is used to print labels containing the price details of one product",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Products.PrintProductPriceLabel",
        "description": "This service is used to print labels containing the price details of one product",
        "operationId": "PrintProductPriceLabel",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Products.PrintProductPriceLabel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to PrintProductPriceLabel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Products.PrintProductPriceLabelResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetProductRequirementValuesForOrderLine": {
      "summary": "GetProductRequirementValuesForOrderLine",
      "description": "List all ProductRequirement values for an OrderLine",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Products.GetProductRequirementValuesForOrderLine",
        "description": "List all ProductRequirement values for an OrderLine",
        "operationId": "GetProductRequirementValuesForOrderLine",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Products.GetProductRequirementValuesForOrderLine"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetProductRequirementValuesForOrderLine",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Products.GetProductRequirementValuesForOrderLineResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetProductRequirementValuesForOrder": {
      "summary": "GetProductRequirementValuesForOrder",
      "description": "List all ProductRequirement values for an Order",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Products.GetProductRequirementValuesForOrder",
        "description": "List all ProductRequirement values for an Order",
        "operationId": "GetProductRequirementValuesForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Products.GetProductRequirementValuesForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetProductRequirementValuesForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Products.GetProductRequirementValuesForOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateProductRequirementValuesForOrderLine": {
      "summary": "UpdateProductRequirementValuesForOrderLine",
      "description": "Replace the given ProductRequirement values for an OrderLine with new values",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Products.UpdateProductRequirementValuesForOrderLine",
        "description": "Replace the given ProductRequirement values for an OrderLine with new values",
        "operationId": "UpdateProductRequirementValuesForOrderLine",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Products.UpdateProductRequirementValuesForOrderLine"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateProductRequirementValuesForOrderLine",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetProductStructure": {
      "summary": "GetProductStructure",
      "description": "Retrieve the structure of products by `Code` (and for given `LanguageID`/`CountryID`).",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Products.GetProductStructure",
        "description": "Retrieve the structure of products by `Code` (and for given `LanguageID`/`CountryID`).",
        "operationId": "GetProductStructure",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Products.GetProductStructure"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetProductStructure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Products.GetProductStructureResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateProductStructure": {
      "summary": "CreateProductStructure",
      "description": "Create a new structure of products.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Products.CreateProductStructure",
        "description": "Create a new structure of products.",
        "operationId": "CreateProductStructure",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Products.CreateProductStructure"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateProductStructure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Products.CreateProductStructureResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/EditProductStructure": {
      "summary": "EditProductStructure",
      "description": "Edits an existing structure of products by `ID`.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Products.EditProductStructure",
        "description": "Edits an existing structure of products by `ID`.",
        "operationId": "EditProductStructure",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Products.EditProductStructure"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to EditProductStructure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Products.EditProductStructureResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteProductStructure": {
      "summary": "DeleteProductStructure",
      "description": "Deletes an existing structure of products by `ID`.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Products.DeleteProductStructure",
        "description": "Deletes an existing structure of products by `ID`.",
        "operationId": "DeleteProductStructure",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Products.DeleteProductStructure"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteProductStructure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListProductStructures": {
      "summary": "ListProductStructures",
      "description": "List product structures.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Products.ListProductStructures",
        "description": "List product structures.",
        "operationId": "ListProductStructures",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Products.ListProductStructures"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListProductStructures",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Products.ListProductStructuresResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ResolveProductBackendIDs": {
      "summary": "ResolveProductBackendIDs",
      "description": "Resolve product backend IDs",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Products.ResolveProductBackendIDs",
        "description": "Resolve product backend IDs",
        "operationId": "ResolveProductBackendIDs",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Products.ResolveProductBackendIDs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ResolveProductBackendIDs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Products.ResolveProductBackendIDsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SearchProducts": {
      "summary": "SearchProducts",
      "description": "Performs a search for products, given a `Query` string.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Products.SearchProducts",
        "description": "Performs a search for products, given a `Query` string.",
        "operationId": "SearchProducts",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Products.SearchProducts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SearchProducts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Products.SearchProductsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/AddBundleProductToOrder": {
      "summary": "AddBundleProductToOrder",
      "description": "The normal `AddProductToOrder` cannot be used for adding a Product with type `BundleProduct` to an order. Instead, `AddBundleProductToOrder` must be\nused. In addition to the `BundleProductID`, this service accepts an optional `LineSelection`, which represents the bundle's configuration in terms of\nwhich products you've chosen.\n\nThe `LineSelection` data structure contains a `SelectedProductID`, which must refer to a ProductID that is a valid option for this bundle, according\nto what `GetBundleProductDetails` returns.\n\nIf no `LineSelection` is provided then the default products of the bundle are added to the Order.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.ProductBundles.AddBundleProductToOrder",
        "description": "The normal `AddProductToOrder` cannot be used for adding a Product with type `BundleProduct` to an order. Instead, `AddBundleProductToOrder` must be\nused. In addition to the `BundleProductID`, this service accepts an optional `LineSelection`, which represents the bundle's configuration in terms of\nwhich products you've chosen.\n\nThe `LineSelection` data structure contains a `SelectedProductID`, which must refer to a ProductID that is a valid option for this bundle, according\nto what `GetBundleProductDetails` returns.\n\nIf no `LineSelection` is provided then the default products of the bundle are added to the Order.",
        "operationId": "AddBundleProductToOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.ProductBundles.AddBundleProductToOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to AddBundleProductToOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.ProductBundles.AddBundleProductToOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ApplyBundleProductSelection": {
      "summary": "ApplyBundleProductSelection",
      "description": "This service is used to apply a selection of products to the provided `BundleProductOrderLineID`.\nThe `BundleProductOrderLineID` field refers to the ID of an `OrderLine` on the provided `Order` that has a `BundleProduct` Product on it.\nThe `LineSelection` field is a list that couples a `SelectedProductID` to a `ProductBundleLineID` and is identical to how it's used in `AddBundleProductToOrder`.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.ProductBundles.ApplyBundleProductSelection",
        "description": "This service is used to apply a selection of products to the provided `BundleProductOrderLineID`.\nThe `BundleProductOrderLineID` field refers to the ID of an `OrderLine` on the provided `Order` that has a `BundleProduct` Product on it.\nThe `LineSelection` field is a list that couples a `SelectedProductID` to a `ProductBundleLineID` and is identical to how it's used in `AddBundleProductToOrder`.",
        "operationId": "ApplyBundleProductSelection",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.ProductBundles.ApplyBundleProductSelection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ApplyBundleProductSelection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.SimpleShoppingCartResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetBundleProductsForProduct": {
      "summary": "GetBundleProductsForProduct",
      "description": "This service returns a list of bundle products that contain the `ProductID` in the request.\nThe service is meant to be used on a product detail page as a \"this product is also available in these bundles\" component.\nThe request allows you to specify what data you'd like to get back from the bundle product, through the `IncludedFields` field.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.ProductBundles.GetBundleProductsForProduct",
        "description": "This service returns a list of bundle products that contain the `ProductID` in the request.\nThe service is meant to be used on a product detail page as a \"this product is also available in these bundles\" component.\nThe request allows you to specify what data you'd like to get back from the bundle product, through the `IncludedFields` field.",
        "operationId": "GetBundleProductsForProduct",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.ProductBundles.GetBundleProductsForProduct"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetBundleProductsForProduct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.ProductBundles.GetBundleProductsForProductResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetPotentialBundleProductsForOrder": {
      "summary": "GetPotentialBundleProductsForOrder",
      "description": "This service returns the bundles for which you currently have at least one product in the provided order.\nThis can then be used to suggest bundles to the end-user that they're missing out on.\n\nThe IncludedFields field controls which product content you get back for each bundle product. By default, only the product's display value is returned.\n\nSpecifying the ProductIDs field means that only suggestions for the given products are returned.\nIf the Order does not contain the provided ProductIDs, nothing will be returned.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.ProductBundles.GetPotentialBundleProductsForOrder",
        "description": "This service returns the bundles for which you currently have at least one product in the provided order.\nThis can then be used to suggest bundles to the end-user that they're missing out on.\n\nThe IncludedFields field controls which product content you get back for each bundle product. By default, only the product's display value is returned.\n\nSpecifying the ProductIDs field means that only suggestions for the given products are returned.\nIf the Order does not contain the provided ProductIDs, nothing will be returned.",
        "operationId": "GetPotentialBundleProductsForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.ProductBundles.GetPotentialBundleProductsForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetPotentialBundleProductsForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.ProductBundles.GetPotentialBundleProductsForOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateProductBundle": {
      "summary": "CreateProductBundle",
      "description": "This service creates a ProductBundle for the given BundleProductID.\n\nThe request body object contains three parameters:\n\n- BackendID: Optional. Can be filled in with the identifier of this bundle by which it is known in another system.\n- BundleProductID: Required. This should refer to an EVA product with type `BundleProduct`.\n- Type: Required. This specifies the type of bundle: discount or configurable. The type can not be changed after the bundle has been created.\n- Lines: Optional. These specify the `ProductBundle`'s lines. If left empty or null at creation, these can be filled in by calling `UpdateProductBundle`. When specified, a line consists of the following:\n    - BackendID: Optional. If the bundle exists in another system, this can refer to it.\n    - Options: A list of available options for this line from which can be chosen. Only contains a ProductID for now, which may refer to a normal sellable product, a product with Type `ConfigurableProduct` or a `BundleProduct` (which would create bundles of bundles).\n    - DefaultProductID: Optional, but required if there are multiple options or if the line option is a Configurable product. The DefaultProductID cannot be a `ConfigurableProduct` or a `BundleProduct`.\n    - IsRequired: Is this line an optional part of the bundle or not?",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.ProductBundles.CreateProductBundle",
        "description": "This service creates a ProductBundle for the given BundleProductID.\n\nThe request body object contains three parameters:\n\n- BackendID: Optional. Can be filled in with the identifier of this bundle by which it is known in another system.\n- BundleProductID: Required. This should refer to an EVA product with type `BundleProduct`.\n- Type: Required. This specifies the type of bundle: discount or configurable. The type can not be changed after the bundle has been created.\n- Lines: Optional. These specify the `ProductBundle`'s lines. If left empty or null at creation, these can be filled in by calling `UpdateProductBundle`. When specified, a line consists of the following:\n    - BackendID: Optional. If the bundle exists in another system, this can refer to it.\n    - Options: A list of available options for this line from which can be chosen. Only contains a ProductID for now, which may refer to a normal sellable product, a product with Type `ConfigurableProduct` or a `BundleProduct` (which would create bundles of bundles).\n    - DefaultProductID: Optional, but required if there are multiple options or if the line option is a Configurable product. The DefaultProductID cannot be a `ConfigurableProduct` or a `BundleProduct`.\n    - IsRequired: Is this line an optional part of the bundle or not?",
        "operationId": "CreateProductBundle",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.ProductBundles.CreateProductBundle"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateProductBundle",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.CreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateProductBundle": {
      "summary": "UpdateProductBundle",
      "description": "This service is largely the same as CreateProductBundle.\nThe model passed into the request body is considered to be the entire bundle configuration.\nAny lines that are currently present but not present in the update model are removed from the bundle.\nThe only parameter that is different is that the model requires an ID to be set for the root object and its lines, which you get back from the `GetProductBundle` and `ListProductBundles` services.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.ProductBundles.UpdateProductBundle",
        "description": "This service is largely the same as CreateProductBundle.\nThe model passed into the request body is considered to be the entire bundle configuration.\nAny lines that are currently present but not present in the update model are removed from the bundle.\nThe only parameter that is different is that the model requires an ID to be set for the root object and its lines, which you get back from the `GetProductBundle` and `ListProductBundles` services.",
        "operationId": "UpdateProductBundle",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.ProductBundles.UpdateProductBundle"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateProductBundle",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteProductBundle": {
      "summary": "DeleteProductBundle",
      "description": "Deletes a ProductBundle, also marking the underlying Product as deleted, not returning it in search results any more.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.ProductBundles.DeleteProductBundle",
        "description": "Deletes a ProductBundle, also marking the underlying Product as deleted, not returning it in search results any more.",
        "operationId": "DeleteProductBundle",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.ProductBundles.DeleteProductBundle"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteProductBundle",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListProductBundles": {
      "summary": "ListProductBundles",
      "description": "This service returns a paged summary of `ProductBundles`, for each bundle it contains the `BundleProduct` and the pricing information for the bundle.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.ProductBundles.ListProductBundles",
        "description": "This service returns a paged summary of `ProductBundles`, for each bundle it contains the `BundleProduct` and the pricing information for the bundle.",
        "operationId": "ListProductBundles",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.ProductBundles.ListProductBundles"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListProductBundles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.ProductBundles.ListProductBundlesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetProductBundle": {
      "summary": "GetProductBundle",
      "description": "This service is used to fetch a `ProductBundle` by its ID. The requested bundle will be returned with its lines and for each line, its options.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.ProductBundles.GetProductBundle",
        "description": "This service is used to fetch a `ProductBundle` by its ID. The requested bundle will be returned with its lines and for each line, its options.",
        "operationId": "GetProductBundle",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.ProductBundles.GetProductBundle"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetProductBundle",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.ProductBundles.GetProductBundleResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetBundleProductDetails": {
      "summary": "GetBundleProductDetails",
      "description": "Gets the details of a bundle by its ProductID. The input to this service is `BundleProductID` which refers to the ID\nof a `Product` that has `Type` = `BundleProduct`.\n\nThe details of a bundle is a structure containing the lines of the bundle, the available options for each line\nof the bundle and, if it's a bundle of bundles or a bundle of configurable products, this structure is recursive; each option\ncan have lines of its own again. So the output of this service contains a tree of all the available products for the bundle.\n\nThe `IncludedFields` parameter is optional and allows you to specify which fields you wish to get back from this service.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.ProductBundles.GetBundleProductDetails",
        "description": "Gets the details of a bundle by its ProductID. The input to this service is `BundleProductID` which refers to the ID\nof a `Product` that has `Type` = `BundleProduct`.\n\nThe details of a bundle is a structure containing the lines of the bundle, the available options for each line\nof the bundle and, if it's a bundle of bundles or a bundle of configurable products, this structure is recursive; each option\ncan have lines of its own again. So the output of this service contains a tree of all the available products for the bundle.\n\nThe `IncludedFields` parameter is optional and allows you to specify which fields you wish to get back from this service.",
        "operationId": "GetBundleProductDetails",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.ProductBundles.GetBundleProductDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetBundleProductDetails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.ProductBundles.GetBundleProductDetailResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/Print": {
      "summary": "Print",
      "description": "Pushes a blob (by `BlobID`) to a device of specified `Type` on given `StationID`.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Printing.Print",
        "description": "Pushes a blob (by `BlobID`) to a device of specified `Type` on given `StationID`.",
        "operationId": "Print",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Printing.Print"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to Print",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/RenderThermalPrintResult": {
      "summary": "RenderThermalPrintResult",
      "description": "Renders the result of a previous thermal print job to HTML and/or PDF.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Printing.RenderThermalPrintResult",
        "description": "Renders the result of a previous thermal print job to HTML and/or PDF.",
        "operationId": "RenderThermalPrintResult",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Printing.RenderThermalPrintResult"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to RenderThermalPrintResult",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Printing.RenderThermalPrintResultResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ReprintThermalPrintResult": {
      "summary": "ReprintThermalPrintResult",
      "description": "Reprints the results of a previous thermal print job to a specified station.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Printing.ReprintThermalPrintResult",
        "description": "Reprints the results of a previous thermal print job to a specified station.",
        "operationId": "ReprintThermalPrintResult",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Printing.ReprintThermalPrintResult"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ReprintThermalPrintResult",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ExplainProductPrices": {
      "summary": "ExplainProductPrices",
      "description": "Returns a tree representation of how the price was derived for the given ProductIDs in the given PriceListID.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Pricing.ExplainProductPrices",
        "description": "Returns a tree representation of how the price was derived for the given ProductIDs in the given PriceListID.",
        "operationId": "ExplainProductPrices",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Pricing.ExplainProductPrices"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ExplainProductPrices",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Pricing.ExplainProductPricesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetPotentialProductPricing": {
      "summary": "GetPotentialProductPricing",
      "description": "The GetPotentialProductPricing service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Pricing.GetPotentialProductPricing",
        "description": "The GetPotentialProductPricing service",
        "operationId": "GetPotentialProductPricing",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Pricing.GetPotentialProductPricing"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetPotentialProductPricing",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Pricing.GetPotentialProductPricingResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListManualTaxExemptionReasons": {
      "summary": "ListManualTaxExemptionReasons",
      "description": "The ListManualTaxExemptionReasons service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Pricing.ListManualTaxExemptionReasons",
        "description": "The ListManualTaxExemptionReasons service",
        "operationId": "ListManualTaxExemptionReasons",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Pricing.ListManualTaxExemptionReasons"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListManualTaxExemptionReasons",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Pricing.ListManualTaxExemptionReasonsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListProductPrices": {
      "summary": "ListProductPrices",
      "description": "The ListProductPrices service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Pricing.ListProductPrices",
        "description": "The ListProductPrices service",
        "operationId": "ListProductPrices",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Pricing.ListProductPrices"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListProductPrices",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Pricing.ListProductPricesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListTaxCodes": {
      "summary": "ListTaxCodes",
      "description": "The ListTaxCodes service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Pricing.ListTaxCodes",
        "description": "The ListTaxCodes service",
        "operationId": "ListTaxCodes",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Pricing.ListTaxCodes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListTaxCodes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Pricing.ListTaxCodesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/PushPriceList": {
      "summary": "PushPriceList",
      "description": "A service that allows to manage the entirety of a price list.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Pricing.PushPriceList",
        "description": "A service that allows to manage the entirety of a price list.",
        "operationId": "PushPriceList",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Pricing.PushPriceList"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to PushPriceList",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Pricing.PushPriceListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateTaxCode": {
      "summary": "CreateTaxCode",
      "description": "The CreateTaxCode service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Pricing.CreateTaxCode",
        "description": "The CreateTaxCode service",
        "operationId": "CreateTaxCode",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Pricing.CreateTaxCode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateTaxCode",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Pricing.CreateTaxCodeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateTaxCode": {
      "summary": "UpdateTaxCode",
      "description": "The UpdateTaxCode service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Pricing.UpdateTaxCode",
        "description": "The UpdateTaxCode service",
        "operationId": "UpdateTaxCode",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Pricing.UpdateTaxCode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateTaxCode",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteTaxCode": {
      "summary": "DeleteTaxCode",
      "description": "The DeleteTaxCode service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Pricing.DeleteTaxCode",
        "description": "The DeleteTaxCode service",
        "operationId": "DeleteTaxCode",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Pricing.DeleteTaxCode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteTaxCode",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateManualTaxExemptionReason": {
      "summary": "CreateManualTaxExemptionReason",
      "description": "Create a new manual tax exemption reason.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Pricing.CreateManualTaxExemptionReason",
        "description": "Create a new manual tax exemption reason.",
        "operationId": "CreateManualTaxExemptionReason",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Pricing.CreateManualTaxExemptionReason"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateManualTaxExemptionReason",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Pricing.CreateManualTaxExemptionReasonResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateManualTaxExemptionReason": {
      "summary": "UpdateManualTaxExemptionReason",
      "description": "Update a manual tax exemption reason.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Pricing.UpdateManualTaxExemptionReason",
        "description": "Update a manual tax exemption reason.",
        "operationId": "UpdateManualTaxExemptionReason",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Pricing.UpdateManualTaxExemptionReason"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateManualTaxExemptionReason",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteManualTaxExemptionReason": {
      "summary": "DeleteManualTaxExemptionReason",
      "description": "Delete a manual tax exemption reason.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Pricing.DeleteManualTaxExemptionReason",
        "description": "Delete a manual tax exemption reason.",
        "operationId": "DeleteManualTaxExemptionReason",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Pricing.DeleteManualTaxExemptionReason"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteManualTaxExemptionReason",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteManualTaxExemptionReasonLine": {
      "summary": "DeleteManualTaxExemptionReasonLine",
      "description": "Delete a manual tax exemption reason line.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Pricing.DeleteManualTaxExemptionReasonLine",
        "description": "Delete a manual tax exemption reason line.",
        "operationId": "DeleteManualTaxExemptionReasonLine",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Pricing.DeleteManualTaxExemptionReasonLine"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteManualTaxExemptionReasonLine",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateTaxRate": {
      "summary": "CreateTaxRate",
      "description": "Creates a tax rate.\n\n* `CountryID` is a foreign key to the Countries table, which uses the ISO 3166-2 standard as ID\n* `CountrySubdivisionID` is a foreign key to the CountrySubdivisions table, which uses the ISO 3166-2 standard as ID\n* `TaxCodeID` is a foreign key to the TaxCodes table, which can be listed using the `ListTaxCodes` service\n\nPercentages are a human readable formatted result of a fraction - applications use a `Rate` instead as an actual result of fraction to maintain\nprecision and integrity. If you wish to set a 21% tax percentage, that means a 1.21 tax rate. Setting a rate of 1.00 implies a 0% tax percentage,\nand setting to 2.00 would mean a rediculous 100% tax percentage, doubling prices. You can probably tell that a `Rate` of 2.00 here is much more\nreadable than a 100% increase, but hey; nobody's forcing you to stick to percentages. At least - we're not!\n\nOh, and you can set a tax rate of 0.00, which would mean it will be fully sponsored by the government and will be free to purchase. The services\nblock anything lower than 0.00 and higher than 2.00 for sanity reasons. Will recap when governments gone mad.\n\n:key: The combination of `CountryID`, `CountrySubdivision` and `TaxCodeID` is unique and will be enforced by EVA.\n\n:point_right: `StartDate` and `EndDate` are optional, and can be used to transition from one rate to a next when it changes. Both these dates\nare inclusive, meaning you'd want to set the `EndDate` of the expiring tax rate to 2018-12-31 and the `StartDate` of the new tax rate to\n2019-01-01 (for example).",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Pricing.CreateTaxRate",
        "description": "Creates a tax rate.\n\n* `CountryID` is a foreign key to the Countries table, which uses the ISO 3166-2 standard as ID\n* `CountrySubdivisionID` is a foreign key to the CountrySubdivisions table, which uses the ISO 3166-2 standard as ID\n* `TaxCodeID` is a foreign key to the TaxCodes table, which can be listed using the `ListTaxCodes` service\n\nPercentages are a human readable formatted result of a fraction - applications use a `Rate` instead as an actual result of fraction to maintain\nprecision and integrity. If you wish to set a 21% tax percentage, that means a 1.21 tax rate. Setting a rate of 1.00 implies a 0% tax percentage,\nand setting to 2.00 would mean a rediculous 100% tax percentage, doubling prices. You can probably tell that a `Rate` of 2.00 here is much more\nreadable than a 100% increase, but hey; nobody's forcing you to stick to percentages. At least - we're not!\n\nOh, and you can set a tax rate of 0.00, which would mean it will be fully sponsored by the government and will be free to purchase. The services\nblock anything lower than 0.00 and higher than 2.00 for sanity reasons. Will recap when governments gone mad.\n\n:key: The combination of `CountryID`, `CountrySubdivision` and `TaxCodeID` is unique and will be enforced by EVA.\n\n:point_right: `StartDate` and `EndDate` are optional, and can be used to transition from one rate to a next when it changes. Both these dates\nare inclusive, meaning you'd want to set the `EndDate` of the expiring tax rate to 2018-12-31 and the `StartDate` of the new tax rate to\n2019-01-01 (for example).",
        "operationId": "CreateTaxRate",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Pricing.CreateTaxRate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateTaxRate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Pricing.CreateTaxRateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetTaxRate": {
      "summary": "GetTaxRate",
      "description": "Gets a tax rate.\n\n:point_right: See `CreateTaxRate` service for more info.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Pricing.GetTaxRate",
        "description": "Gets a tax rate.\n\n:point_right: See `CreateTaxRate` service for more info.",
        "operationId": "GetTaxRate",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Pricing.GetTaxRate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetTaxRate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Pricing.GetTaxRateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListTaxRates": {
      "summary": "ListTaxRates",
      "description": "Lists all tax rates.\n\nSupports the filter `OnlyActive`, and when specified, will filter out all tax rates that have a `StartDate` or `EndDate` out of bounds for\n'today'. The actual value of the filter is irrelevant.\n\n:point_right: See `CreateTaxRate` service for more info.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Pricing.ListTaxRates",
        "description": "Lists all tax rates.\n\nSupports the filter `OnlyActive`, and when specified, will filter out all tax rates that have a `StartDate` or `EndDate` out of bounds for\n'today'. The actual value of the filter is irrelevant.\n\n:point_right: See `CreateTaxRate` service for more info.",
        "operationId": "ListTaxRates",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Pricing.ListTaxRates"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListTaxRates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Pricing.ListTaxRatesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateTaxRate": {
      "summary": "UpdateTaxRate",
      "description": "Modifies a tax rate.\n\n:point_right: See `CreateTaxRate` service for more info.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Pricing.UpdateTaxRate",
        "description": "Modifies a tax rate.\n\n:point_right: See `CreateTaxRate` service for more info.",
        "operationId": "UpdateTaxRate",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Pricing.UpdateTaxRate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateTaxRate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteTaxRate": {
      "summary": "DeleteTaxRate",
      "description": "Deletes a tax rate.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Pricing.DeleteTaxRate",
        "description": "Deletes a tax rate.",
        "operationId": "DeleteTaxRate",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Pricing.DeleteTaxRate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteTaxRate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateSimplePrices": {
      "summary": "UpdateSimplePrices",
      "description": "Update the prices in the pricelist specified.\n\nThis service takes a simplified approach of the pricing tools EVA offers, but that limits the options you have available. The PriceList to update may\nonly have a single active PriceListAdjustment, and that has to be of type MANUAL_INPUT.\n\n* The pricelist is identified by the `PriceListID` or the `BackendSystemID` and `BackendID`.\n* Products can be identified by their (EVA) `ID` or their `BackendID`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Pricing.UpdateSimplePrices",
        "description": "Update the prices in the pricelist specified.\n\nThis service takes a simplified approach of the pricing tools EVA offers, but that limits the options you have available. The PriceList to update may\nonly have a single active PriceListAdjustment, and that has to be of type MANUAL_INPUT.\n\n* The pricelist is identified by the `PriceListID` or the `BackendSystemID` and `BackendID`.\n* Products can be identified by their (EVA) `ID` or their `BackendID`",
        "operationId": "UpdateSimplePrices",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Pricing.UpdateSimplePrices"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateSimplePrices",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ApproveCapture": {
      "summary": "ApproveCapture",
      "description": "Approve a non-confirmed payment transaction capture",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Payments.ApproveCapture",
        "description": "Approve a non-confirmed payment transaction capture",
        "operationId": "ApproveCapture",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Payments.ApproveCapture"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ApproveCapture",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ApprovePayment": {
      "summary": "ApprovePayment",
      "description": "Approve a non-confirmed payment transaction",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Payments.ApprovePayment",
        "description": "Approve a non-confirmed payment transaction",
        "operationId": "ApprovePayment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Payments.ApprovePayment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ApprovePayment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Payments.ApprovePaymentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CancelPayment": {
      "summary": "CancelPayment",
      "description": "Cancels a non-confirmed payment transaction",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Payments.CancelPayment",
        "description": "Cancels a non-confirmed payment transaction",
        "operationId": "CancelPayment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Payments.CancelPayment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CancelPayment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CapturePayment": {
      "summary": "CapturePayment",
      "description": "Sends a capture request to the PSP for the given PaymentTransaction with the given amount.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Payments.CapturePayment",
        "description": "Sends a capture request to the PSP for the given PaymentTransaction with the given amount.",
        "operationId": "CapturePayment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Payments.CapturePayment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CapturePayment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Payments.CapturePaymentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CaptureShipment": {
      "summary": "CaptureShipment",
      "description": "The CaptureShipment service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Payments.CaptureShipment",
        "description": "The CaptureShipment service",
        "operationId": "CaptureShipment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Payments.CaptureShipment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CaptureShipment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Payments.CaptureShipmentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreatePayment": {
      "summary": "CreatePayment",
      "description": "The CreatePayment service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Payments.CreatePayment",
        "description": "The CreatePayment service",
        "operationId": "CreatePayment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Payments.CreatePayment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreatePayment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Payments.CreatePaymentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreatePaymentTransactionLedger": {
      "summary": "CreatePaymentTransactionLedger",
      "description": "Create a new paymenttransaction ledger of the given type. Only custom types are allowed",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Payments.CreatePaymentTransactionLedger",
        "description": "Create a new paymenttransaction ledger of the given type. Only custom types are allowed",
        "operationId": "CreatePaymentTransactionLedger",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Payments.CreatePaymentTransactionLedger"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreatePaymentTransactionLedger",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateRefund": {
      "summary": "CreateRefund",
      "description": "Create a refund\n\nWith this service a refund can be done based on an existing PaymentTransaction, or without it for an Order.\n\nIt is required to specify a transaction or to specify the PaymentType to use.\n\nWhen no Amount is specified the open amount of the order will be used.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Payments.CreateRefund",
        "description": "Create a refund\n\nWith this service a refund can be done based on an existing PaymentTransaction, or without it for an Order.\n\nIt is required to specify a transaction or to specify the PaymentType to use.\n\nWhen no Amount is specified the open amount of the order will be used.",
        "operationId": "CreateRefund",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Payments.CreateRefund"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateRefund",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Payments.CreateRefundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetActivePaymentTypes": {
      "summary": "GetActivePaymentTypes",
      "description": "The GetActivePaymentTypes service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Payments.GetActivePaymentTypes",
        "description": "The GetActivePaymentTypes service",
        "operationId": "GetActivePaymentTypes",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Payments.GetActivePaymentTypes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetActivePaymentTypes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Payments.GetActivePaymentTypesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetAvailablePaymentMethods": {
      "summary": "GetAvailablePaymentMethods",
      "description": "Retrieve all available payment methods, in general, or for a specific order.\n\nWhen ReturnUnusablePaymentMethods is set to true, the system will also return unusable payment methods",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Payments.GetAvailablePaymentMethods",
        "description": "Retrieve all available payment methods, in general, or for a specific order.\n\nWhen ReturnUnusablePaymentMethods is set to true, the system will also return unusable payment methods",
        "operationId": "GetAvailablePaymentMethods",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Payments.GetAvailablePaymentMethods"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetAvailablePaymentMethods",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Payments.GetAvailablePaymentMethodsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetAvailableRefundPaymentMethodsForOrder": {
      "summary": "GetAvailableRefundPaymentMethodsForOrder",
      "description": "Get all available options for refunds on the given order\n\nRefunds can be executed with the CreateRefund service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Payments.GetAvailableRefundPaymentMethodsForOrder",
        "description": "Get all available options for refunds on the given order\n\nRefunds can be executed with the CreateRefund service",
        "operationId": "GetAvailableRefundPaymentMethodsForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Payments.GetAvailableRefundPaymentMethodsForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetAvailableRefundPaymentMethodsForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Payments.GetAvailableRefundPaymentMethodsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetPaymentTransaction": {
      "summary": "GetPaymentTransaction",
      "description": "The GetPaymentTransaction service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Payments.GetPaymentTransaction",
        "description": "The GetPaymentTransaction service",
        "operationId": "GetPaymentTransaction",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Payments.GetPaymentTransaction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetPaymentTransaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Payments.GetPaymentTransactionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetPaymentTransactionsForOrder": {
      "summary": "GetPaymentTransactionsForOrder",
      "description": "Get the PaymentTransactions attached to the given Order\n\nThe response also includes an object `AvailableActions`:\n- Cancel: can the payment be cancelled\n- Refund: can the payment be refunded\n- Update: can an update for this payment be requested\n- Approve: can the payment be approved",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Payments.GetPaymentTransactionsForOrder",
        "description": "Get the PaymentTransactions attached to the given Order\n\nThe response also includes an object `AvailableActions`:\n- Cancel: can the payment be cancelled\n- Refund: can the payment be refunded\n- Update: can an update for this payment be requested\n- Approve: can the payment be approved",
        "operationId": "GetPaymentTransactionsForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Payments.GetPaymentTransactionsForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetPaymentTransactionsForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Payments.GetPaymentTransactionsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetPaymentTransactionsForInvoice": {
      "summary": "GetPaymentTransactionsForInvoice",
      "description": "Get the PaymentTransactions attached to the given Invoice\n\nThe response also includes an object `AvailableActions`:\n- Cancel: can the payment be cancelled\n- Refund: can the payment be refunded\n- Update: can an update for this payment be requested\n- Approve: can the payment be approved",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Payments.GetPaymentTransactionsForInvoice",
        "description": "Get the PaymentTransactions attached to the given Invoice\n\nThe response also includes an object `AvailableActions`:\n- Cancel: can the payment be cancelled\n- Refund: can the payment be refunded\n- Update: can an update for this payment be requested\n- Approve: can the payment be approved",
        "operationId": "GetPaymentTransactionsForInvoice",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Payments.GetPaymentTransactionsForInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetPaymentTransactionsForInvoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Payments.GetPaymentTransactionsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/HandlePaymentTransactionDispute": {
      "summary": "HandlePaymentTransactionDispute",
      "description": "When a PaymentTransaction is disputed due to a Chargeback or a Reversal, the difference can be booked in a different PaymentTransaction to allow the order to be completed.\n\nCalling this service will result in an additional PaymentTransaction of type `DISPUTE`.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Payments.HandlePaymentTransactionDispute",
        "description": "When a PaymentTransaction is disputed due to a Chargeback or a Reversal, the difference can be booked in a different PaymentTransaction to allow the order to be completed.\n\nCalling this service will result in an additional PaymentTransaction of type `DISPUTE`.",
        "operationId": "HandlePaymentTransactionDispute",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Payments.HandlePaymentTransactionDispute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to HandlePaymentTransactionDispute",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListPaymentTransactionLedger": {
      "summary": "ListPaymentTransactionLedger",
      "description": "List PaymentTransactionLedger\n\nAll available filters are typed in the PageConfig.Filter property.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Payments.ListPaymentTransactionLedger",
        "description": "List PaymentTransactionLedger\n\nAll available filters are typed in the PageConfig.Filter property.",
        "operationId": "ListPaymentTransactionLedger",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Payments.ListPaymentTransactionLedger"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListPaymentTransactionLedger",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Payments.ListPaymentTransactionLedgerResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetPreferredRefundMethod": {
      "summary": "SetPreferredRefundMethod",
      "description": "Set a preferred method to use when this order will be refunded.\nCan be used on ReturnOrders to indicate how the money should be transferred back to the customer.\n\nAvailable methods can be listed with the GetAvailableRefundPaymentMethodsForOrder service.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Payments.SetPreferredRefundMethod",
        "description": "Set a preferred method to use when this order will be refunded.\nCan be used on ReturnOrders to indicate how the money should be transferred back to the customer.\n\nAvailable methods can be listed with the GetAvailableRefundPaymentMethodsForOrder service.",
        "operationId": "SetPreferredRefundMethod",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Payments.SetPreferredRefundMethod"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetPreferredRefundMethod",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetPreferredRefundMethod": {
      "summary": "GetPreferredRefundMethod",
      "description": "Get the selected preferred refund method to use when this order will be refunded.\n\nSee SetPreferredRefundMethod for more information.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Payments.GetPreferredRefundMethod",
        "description": "Get the selected preferred refund method to use when this order will be refunded.\n\nSee SetPreferredRefundMethod for more information.",
        "operationId": "GetPreferredRefundMethod",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Payments.GetPreferredRefundMethod"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetPreferredRefundMethod",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Payments.GetPreferredRefundMethodResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/RequestPaymentUpdate": {
      "summary": "RequestPaymentUpdate",
      "description": "Certain payment methods support retrieving the current status. Given a PaymentTransactionID this service will attempt to poll thestatus for that particular payment and directly update its status.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Payments.RequestPaymentUpdate",
        "description": "Certain payment methods support retrieving the current status. Given a PaymentTransactionID this service will attempt to poll thestatus for that particular payment and directly update its status.",
        "operationId": "RequestPaymentUpdate",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Payments.RequestPaymentUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to RequestPaymentUpdate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Payments.RequestPaymentUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/PrintThermalPaymentProof": {
      "summary": "PrintThermalPaymentProof",
      "description": "Produces a `PaymentProof` Document",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.PaymentProofs.PrintThermalPaymentProof",
        "description": "Produces a `PaymentProof` Document",
        "operationId": "PrintThermalPaymentProof",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.PaymentProofs.PrintThermalPaymentProof"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to PrintThermalPaymentProof",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetAnonymousToken": {
      "summary": "GetAnonymousToken",
      "description": "Retrieve the anonymous token for specified `OrganizationUnitID` and `LanguageID`. The response is your token, or null when not present.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.OrganizationUnits.GetAnonymousToken",
        "description": "Retrieve the anonymous token for specified `OrganizationUnitID` and `LanguageID`. The response is your token, or null when not present.",
        "operationId": "GetAnonymousToken",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetAnonymousToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetAnonymousToken",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetAnonymousTokenResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateAnonymousToken": {
      "summary": "CreateAnonymousToken",
      "description": "Create an anonymous token for specified `OrganizationUnitID` and `LanguageID`. The response is your new token, or a current one if it already existed.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.OrganizationUnits.CreateAnonymousToken",
        "description": "Create an anonymous token for specified `OrganizationUnitID` and `LanguageID`. The response is your new token, or a current one if it already existed.",
        "operationId": "CreateAnonymousToken",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.CreateAnonymousToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateAnonymousToken",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.CreateAnonymousTokenResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteAnonymousToken": {
      "summary": "DeleteAnonymousToken",
      "description": "Deletes an existing anonymous token.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.OrganizationUnits.DeleteAnonymousToken",
        "description": "Deletes an existing anonymous token.",
        "operationId": "DeleteAnonymousToken",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.DeleteAnonymousToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteAnonymousToken",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/BulkUpdateOrganizationUnitSettings": {
      "summary": "BulkUpdateOrganizationUnitSettings",
      "description": "Updates some of the non-unique the OrganizationUnit's settings. This service can be used to only update a subset of the settings of the OrganizationUnit by providing only the fields you want to update.\nIf a field is not part of the request message (or has value `undefined`) then the setting is not updated. If the field is present but has a value of `null` then it's assumed you want to unset the setting.\n\nThe targeted OrganizationUnits can be identified by providing `OrganizationUnitIDs` or an `OrganizationUnitSetID`.\n\nAll OrganizationUnits will be updated, if one of them fails, no changes will be persisted.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.OrganizationUnits.BulkUpdateOrganizationUnitSettings",
        "description": "Updates some of the non-unique the OrganizationUnit's settings. This service can be used to only update a subset of the settings of the OrganizationUnit by providing only the fields you want to update.\nIf a field is not part of the request message (or has value `undefined`) then the setting is not updated. If the field is present but has a value of `null` then it's assumed you want to unset the setting.\n\nThe targeted OrganizationUnits can be identified by providing `OrganizationUnitIDs` or an `OrganizationUnitSetID`.\n\nAll OrganizationUnits will be updated, if one of them fails, no changes will be persisted.",
        "operationId": "BulkUpdateOrganizationUnitSettings",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.BulkUpdateOrganizationUnitSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to BulkUpdateOrganizationUnitSettings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateOrganizationUnit": {
      "summary": "CreateOrganizationUnit",
      "description": "Create a new OrganizationUnit",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.OrganizationUnits.CreateOrganizationUnit",
        "description": "Create a new OrganizationUnit",
        "operationId": "CreateOrganizationUnit",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.CreateOrganizationUnit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateOrganizationUnit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.CreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteOrganizationUnit": {
      "summary": "DeleteOrganizationUnit",
      "description": "The DeleteOrganizationUnit service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.OrganizationUnits.DeleteOrganizationUnit",
        "description": "The DeleteOrganizationUnit service",
        "operationId": "DeleteOrganizationUnit",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.DeleteOrganizationUnit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteOrganizationUnit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetAvailableCashHandlers": {
      "summary": "GetAvailableCashHandlers",
      "description": "Returns all `CashHandlers` available to use on `OrganizationUnits`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.OrganizationUnits.GetAvailableCashHandlers",
        "description": "Returns all `CashHandlers` available to use on `OrganizationUnits`",
        "operationId": "GetAvailableCashHandlers",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetAvailableCashHandlers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetAvailableCashHandlers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetAvailableCashHandlersResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetOrganizationUnitDetailed": {
      "summary": "GetOrganizationUnitDetailed",
      "description": "Retrieve detailed organization unit information.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.OrganizationUnits.GetOrganizationUnitDetailed",
        "description": "Retrieve detailed organization unit information.",
        "operationId": "GetOrganizationUnitDetailed",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetOrganizationUnitDetailed"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetOrganizationUnitDetailed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetOrganizationUnitDetailedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetOrganizationUnitSettings": {
      "summary": "GetOrganizationUnitSettings",
      "description": "The GetOrganizationUnitSettings service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.OrganizationUnits.GetOrganizationUnitSettings",
        "description": "The GetOrganizationUnitSettings service",
        "operationId": "GetOrganizationUnitSettings",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetOrganizationUnitSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetOrganizationUnitSettings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetOrganizationUnitSettingsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetOrganizationUnitsStructure": {
      "summary": "GetOrganizationUnitsStructure",
      "description": "Returns the full authorizationstructure of the current user\n\nIt is a hierarchical list of all the OUs the user can see with the functionalities for each OU attached.\nNote: There can be multiple OUs on the top level",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.OrganizationUnits.GetOrganizationUnitsStructure",
        "description": "Returns the full authorizationstructure of the current user\n\nIt is a hierarchical list of all the OUs the user can see with the functionalities for each OU attached.\nNote: There can be multiple OUs on the top level",
        "operationId": "GetOrganizationUnitsStructure",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetOrganizationUnitsStructure"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetOrganizationUnitsStructure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetOrganizationUnitsStructureResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetOrganizationUnitSummary": {
      "summary": "GetOrganizationUnitSummary",
      "description": "Returns a summary of a specific organizationunit. Since this service is publicly available, this will return minimal information (aka a summary) about the OU.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.OrganizationUnits.GetOrganizationUnitSummary",
        "description": "Returns a summary of a specific organizationunit. Since this service is publicly available, this will return minimal information (aka a summary) about the OU.",
        "operationId": "GetOrganizationUnitSummary",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetOrganizationUnitSummary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetOrganizationUnitSummary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetOrganizationUnitSummaryResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetOrganizationUnitTree": {
      "summary": "GetOrganizationUnitTree",
      "description": "Get a tree of Organization Units, with given `OrganizationUnitID` as root node and it's direct children in a list of `Children` nodes. This iterates recursively for every child nodes\nchildren, and every child node childrens children, and every child node children childrens children, and every child node children children childrens children, and every child node\nchildren children children childrens children, and every child node children children children children childrens children, and every child node children children children children\nchildren childrens children, and every child node children children children children children children childrens children, and every child node children children children children\nchildren children children childrens children, and every child node children children children children children children children children childrens children, and every child node\nchildren children children children children children children children children childrens children, and every child node children children children children children children children\nchildren children children childrens children, and every child node children children children children children children children children children children children childrens children,\nand every child node children children children children children children children children children children children children childrens children.\n\nAnd so on.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.OrganizationUnits.GetOrganizationUnitTree",
        "description": "Get a tree of Organization Units, with given `OrganizationUnitID` as root node and it's direct children in a list of `Children` nodes. This iterates recursively for every child nodes\nchildren, and every child node childrens children, and every child node children childrens children, and every child node children children childrens children, and every child node\nchildren children children childrens children, and every child node children children children children childrens children, and every child node children children children children\nchildren childrens children, and every child node children children children children children children childrens children, and every child node children children children children\nchildren children children childrens children, and every child node children children children children children children children children childrens children, and every child node\nchildren children children children children children children children children childrens children, and every child node children children children children children children children\nchildren children children childrens children, and every child node children children children children children children children children children children children childrens children,\nand every child node children children children children children children children children children children children children childrens children.\n\nAnd so on.",
        "operationId": "GetOrganizationUnitTree",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetOrganizationUnitTree"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetOrganizationUnitTree",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetOrganizationUnitTreeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetFlatOrganizationUnitTree": {
      "summary": "GetFlatOrganizationUnitTree",
      "description": "Get the given `OrganizationUnitID` and all of it's children",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.OrganizationUnits.GetFlatOrganizationUnitTree",
        "description": "Get the given `OrganizationUnitID` and all of it's children",
        "operationId": "GetFlatOrganizationUnitTree",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetFlatOrganizationUnitTree"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetFlatOrganizationUnitTree",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetFlatOrganizationUnitTreeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetRequiredOrganizationUnitFields": {
      "summary": "GetRequiredOrganizationUnitFields",
      "description": "The GetRequiredOrganizationUnitFields service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.OrganizationUnits.GetRequiredOrganizationUnitFields",
        "description": "The GetRequiredOrganizationUnitFields service",
        "operationId": "GetRequiredOrganizationUnitFields",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetRequiredOrganizationUnitFields"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetRequiredOrganizationUnitFields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetRequiredOrganizationUnitFieldsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetSetsByOrganizationUnit": {
      "summary": "GetSetsByOrganizationUnit",
      "description": "Shows in which OU sets an OU is included.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.OrganizationUnits.GetSetsByOrganizationUnit",
        "description": "Shows in which OU sets an OU is included.",
        "operationId": "GetSetsByOrganizationUnit",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetSetsByOrganizationUnit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetSetsByOrganizationUnit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetSetsByOrganizationUnitResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetShopsByProximity": {
      "summary": "GetShopsByProximity",
      "description": "Returns stores in proximity of a set of coordinates.\n\nIf `ProductID` and `HasStock` is set, only the stores with stock for that product will be returned.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.OrganizationUnits.GetShopsByProximity",
        "description": "Returns stores in proximity of a set of coordinates.\n\nIf `ProductID` and `HasStock` is set, only the stores with stock for that product will be returned.",
        "operationId": "GetShopsByProximity",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetShopsByProximity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetShopsByProximity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetShopsByProximityResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetWebshops": {
      "summary": "GetWebshops",
      "description": "This service return the available webshop OrganizationUnits",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.OrganizationUnits.GetWebshops",
        "description": "This service return the available webshop OrganizationUnits",
        "operationId": "GetWebshops",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetWebshops"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetWebshops",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetWebshopsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ImportOrganizationUnits": {
      "summary": "ImportOrganizationUnits",
      "description": "Creates or updates specified `OrganizationUnits`, identified by your `ID` (that we map to our `BackendID`).\n\nOmit any field you don't want altered, or send in null values of nullable fields to unset their current value.\n\n- Does not apply to `Address` - if you specify a new or different one from the current, a new Address will be created with only the data specify!\n- Does not apply to `OpeningHours` - every value you specify will either update or create a record for that day",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.OrganizationUnits.ImportOrganizationUnits",
        "description": "Creates or updates specified `OrganizationUnits`, identified by your `ID` (that we map to our `BackendID`).\n\nOmit any field you don't want altered, or send in null values of nullable fields to unset their current value.\n\n- Does not apply to `Address` - if you specify a new or different one from the current, a new Address will be created with only the data specify!\n- Does not apply to `OpeningHours` - every value you specify will either update or create a record for that day",
        "operationId": "ImportOrganizationUnits",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.ImportOrganizationUnits"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ImportOrganizationUnits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.ImportOrganizationUnitsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListOrganizationUnitsDetailed": {
      "summary": "ListOrganizationUnitsDetailed",
      "description": "Returns all data of a list of organizationunits. Since this service is not publicly available, this will return all information about the OUs.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.OrganizationUnits.ListOrganizationUnitsDetailed",
        "description": "Returns all data of a list of organizationunits. Since this service is not publicly available, this will return all information about the OUs.",
        "operationId": "ListOrganizationUnitsDetailed",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.ListOrganizationUnitsDetailed"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListOrganizationUnitsDetailed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.ListOrganizationUnitsDetailedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListOrganizationUnitSummaries": {
      "summary": "ListOrganizationUnitSummaries",
      "description": "Returns summaries of a list of organizationunits. Since this service is publicly available, this will return minimal information (aka a summary) about the OUs.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.OrganizationUnits.ListOrganizationUnitSummaries",
        "description": "Returns summaries of a list of organizationunits. Since this service is publicly available, this will return minimal information (aka a summary) about the OUs.",
        "operationId": "ListOrganizationUnitSummaries",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.ListOrganizationUnitSummaries"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListOrganizationUnitSummaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.ListOrganizationUnitSummariesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListShopsByProximity": {
      "summary": "ListShopsByProximity",
      "description": "Service that returns OrganizationUnitDtos that are approximately in range of the given latitude and longitude. The result are returned in ascending order.\n\nThis service is useful for displaying a list of the nearest shops (eg: checkout and choosing a pick-up shop).\n\nThe page size `Limit` has a maximum value of `100` for this service.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.OrganizationUnits.ListShopsByProximity",
        "description": "Service that returns OrganizationUnitDtos that are approximately in range of the given latitude and longitude. The result are returned in ascending order.\n\nThis service is useful for displaying a list of the nearest shops (eg: checkout and choosing a pick-up shop).\n\nThe page size `Limit` has a maximum value of `100` for this service.",
        "operationId": "ListShopsByProximity",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.ListShopsByProximity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListShopsByProximity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.ListShopsByProximityResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListShopsInArea": {
      "summary": "ListShopsInArea",
      "description": "List the Shop OrganizationUnits in a certain area\n\nIncluded are the OpeningHours in the next 7 days, and the Regular OpeningHours.\n\nThis service is useful for showing all shops in a map, where you want to search in a given rectangle.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.OrganizationUnits.ListShopsInArea",
        "description": "List the Shop OrganizationUnits in a certain area\n\nIncluded are the OpeningHours in the next 7 days, and the Regular OpeningHours.\n\nThis service is useful for showing all shops in a map, where you want to search in a given rectangle.",
        "operationId": "ListShopsInArea",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.ListShopsInArea"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListShopsInArea",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.ListShopsInAreaResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetOrganizationUnitNotes": {
      "summary": "GetOrganizationUnitNotes",
      "description": "The GetOrganizationUnitNotes service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.OrganizationUnits.GetOrganizationUnitNotes",
        "description": "The GetOrganizationUnitNotes service",
        "operationId": "GetOrganizationUnitNotes",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetOrganizationUnitNotes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetOrganizationUnitNotes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetOrganizationUnitNotesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetOrganizationUnitNotes": {
      "summary": "SetOrganizationUnitNotes",
      "description": "The SetOrganizationUnitNotes service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.OrganizationUnits.SetOrganizationUnitNotes",
        "description": "The SetOrganizationUnitNotes service",
        "operationId": "SetOrganizationUnitNotes",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.SetOrganizationUnitNotes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetOrganizationUnitNotes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateCustomFieldsForOrganizationUnits": {
      "summary": "UpdateCustomFieldsForOrganizationUnits",
      "description": "Update custom fields for multiple organization units at once.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.OrganizationUnits.UpdateCustomFieldsForOrganizationUnits",
        "description": "Update custom fields for multiple organization units at once.",
        "operationId": "UpdateCustomFieldsForOrganizationUnits",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.UpdateCustomFieldsForOrganizationUnits"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateCustomFieldsForOrganizationUnits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateOrganizationUnit": {
      "summary": "UpdateOrganizationUnit",
      "description": "Updates the basic information associated with an OrganizationUnit. This service can be used to only update a subset of the settings of the OrganizationUnit by providing only the fields you want to update.\n\nIf a field is not part of the request message (or has value `undefined`) then the setting is not updated. If the field is present but has a value of `null` then it's assumed you want to unset the setting.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.OrganizationUnits.UpdateOrganizationUnit",
        "description": "Updates the basic information associated with an OrganizationUnit. This service can be used to only update a subset of the settings of the OrganizationUnit by providing only the fields you want to update.\n\nIf a field is not part of the request message (or has value `undefined`) then the setting is not updated. If the field is present but has a value of `null` then it's assumed you want to unset the setting.",
        "operationId": "UpdateOrganizationUnit",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.UpdateOrganizationUnit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateOrganizationUnit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateOrganizationUnitSettings": {
      "summary": "UpdateOrganizationUnitSettings",
      "description": "Updates the OrganizationUnit's settings. This service can be used to only update a subset of the settings of the OrganizationUnit by providing only the fields you want to update.\nIf a field is not part of the request message (or has value `undefined`) then the setting is not updated. If the field is present but has a value of `null` then it's assumed you want to unset the setting.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.OrganizationUnits.UpdateOrganizationUnitSettings",
        "description": "Updates the OrganizationUnit's settings. This service can be used to only update a subset of the settings of the OrganizationUnit by providing only the fields you want to update.\nIf a field is not part of the request message (or has value `undefined`) then the setting is not updated. If the field is present but has a value of `null` then it's assumed you want to unset the setting.",
        "operationId": "UpdateOrganizationUnitSettings",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.UpdateOrganizationUnitSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateOrganizationUnitSettings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/AddDiscountCouponToOrder": {
      "summary": "AddDiscountCouponToOrder",
      "description": "Add a discount coupon to an order",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.AddDiscountCouponToOrder",
        "description": "Add a discount coupon to an order",
        "operationId": "AddDiscountCouponToOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.AddDiscountCouponToOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to AddDiscountCouponToOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.AddDiscountToOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/AddManualDiscountToOrder": {
      "summary": "AddManualDiscountToOrder",
      "description": "Add a manual Discount to an order",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.AddManualDiscountToOrder",
        "description": "Add a manual Discount to an order",
        "operationId": "AddManualDiscountToOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.AddManualDiscountToOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to AddManualDiscountToOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.AddDiscountToOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CancelDiscountOrderLine": {
      "summary": "CancelDiscountOrderLine",
      "description": "Cancel a discount order line.\n\nWhen the discount of the given line is a coupon triggerd discount, the coupon will be removed from the order.\nWhen the discount of the given line is a manual discount, the manual discount will be cancelled.\nWhen the discount of the given line is an automatic discount, the discount will be disabled on the order. To re-enable it you must call the 'EnableDisabledDiscountOnOrder' service. You can check which discount are disabled on an order by calling 'ListDisabledDiscountsOnOrder'",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.CancelDiscountOrderLine",
        "description": "Cancel a discount order line.\n\nWhen the discount of the given line is a coupon triggerd discount, the coupon will be removed from the order.\nWhen the discount of the given line is a manual discount, the manual discount will be cancelled.\nWhen the discount of the given line is an automatic discount, the discount will be disabled on the order. To re-enable it you must call the 'EnableDisabledDiscountOnOrder' service. You can check which discount are disabled on an order by calling 'ListDisabledDiscountsOnOrder'",
        "operationId": "CancelDiscountOrderLine",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.CancelDiscountOrderLine"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CancelDiscountOrderLine",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.SimpleShoppingCartResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetDiscountProductOptionsForOrderLine": {
      "summary": "GetDiscountProductOptionsForOrderLine",
      "description": "Get discount product options for a specific discount line",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetDiscountProductOptionsForOrderLine",
        "description": "Get discount product options for a specific discount line",
        "operationId": "GetDiscountProductOptionsForOrderLine",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetDiscountProductOptionsForOrderLine"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetDiscountProductOptionsForOrderLine",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetDiscountProductOptionsForOrderLineResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetDiscountProductOptionsForOrder": {
      "summary": "GetDiscountProductOptionsForOrder",
      "description": "Get discount product options for order",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetDiscountProductOptionsForOrder",
        "description": "Get discount product options for order",
        "operationId": "GetDiscountProductOptionsForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetDiscountProductOptionsForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetDiscountProductOptionsForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetDiscountProductOptionsForOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetDiscountProductOption": {
      "summary": "SetDiscountProductOption",
      "description": "Set the product selection for a specific discount line",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.SetDiscountProductOption",
        "description": "Set the product selection for a specific discount line",
        "operationId": "SetDiscountProductOption",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.SetDiscountProductOption"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetDiscountProductOption",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/AddProductToOrder": {
      "summary": "AddProductToOrder",
      "description": "Add a Product to an Order\n\nA product can be defined by `ProductID` or `Barcode`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.AddProductToOrder",
        "description": "Add a Product to an Order\n\nA product can be defined by `ProductID` or `Barcode`",
        "operationId": "AddProductToOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.AddProductToOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to AddProductToOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.AddProductToOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/AddServiceProductToOrder": {
      "summary": "AddServiceProductToOrder",
      "description": "The AddServiceProductToOrder service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.AddServiceProductToOrder",
        "description": "The AddServiceProductToOrder service",
        "operationId": "AddServiceProductToOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.AddServiceProductToOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to AddServiceProductToOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.AddServiceProductToOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/AttachAddressToOrder": {
      "summary": "AttachAddressToOrder",
      "description": "Attach addresses to specified order(s), requiring either `OrderID` or `OrderIDs`.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.AttachAddressToOrder",
        "description": "Attach addresses to specified order(s), requiring either `OrderID` or `OrderIDs`.",
        "operationId": "AttachAddressToOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.AttachAddressToOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to AttachAddressToOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.AttachAddressToOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/AttachCustomerToOrder": {
      "summary": "AttachCustomerToOrder",
      "description": "Attach a Customer to an Order. When no UserID is provided the current user will be attached. If the selected User has addresses, these will also be assigned to the Order.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.AttachCustomerToOrder",
        "description": "Attach a Customer to an Order. When no UserID is provided the current user will be attached. If the selected User has addresses, these will also be assigned to the Order.",
        "operationId": "AttachCustomerToOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.AttachCustomerToOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to AttachCustomerToOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DetachCustomerFromOrder": {
      "summary": "DetachCustomerFromOrder",
      "description": "Detach a Customer from an Order. The addresses on the Order will also be cleared.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.DetachCustomerFromOrder",
        "description": "Detach a Customer from an Order. The addresses on the Order will also be cleared.",
        "operationId": "DetachCustomerFromOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.DetachCustomerFromOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DetachCustomerFromOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/AttachIdentificationToOrder": {
      "summary": "AttachIdentificationToOrder",
      "description": "The AttachIdentificationToOrder service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.AttachIdentificationToOrder",
        "description": "The AttachIdentificationToOrder service",
        "operationId": "AttachIdentificationToOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.AttachIdentificationToOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to AttachIdentificationToOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.AttachIdentificationToOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/AutocompleteOrder": {
      "summary": "AutocompleteOrder",
      "description": "Attempts to autocomplete the order by:\n\n- Cancelling the lines that can still be cancelled\n- Invoicing the lines that've been (partially) shipped\n- Optionally creating a payment to bring the open amount to 0\n\n:bikini: __The actions this service performs are irreverisble__\n\n*With great power comes great responsibility*\n-Uncle Ben",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.AutocompleteOrder",
        "description": "Attempts to autocomplete the order by:\n\n- Cancelling the lines that can still be cancelled\n- Invoicing the lines that've been (partially) shipped\n- Optionally creating a payment to bring the open amount to 0\n\n:bikini: __The actions this service performs are irreverisble__\n\n*With great power comes great responsibility*\n-Uncle Ben",
        "operationId": "AutocompleteOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.AutocompleteOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to AutocompleteOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.AutocompleteOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CancelOrder": {
      "summary": "CancelOrder",
      "description": "Cancel a complete order or a subset of lines.\n\nThe order can be identified by an OrderID or by BackendID + BackendSystemID, the lines can be identified by an OrderLineID or by BackendID.\n\nThe result will tell you if it was successful.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.CancelOrder",
        "description": "Cancel a complete order or a subset of lines.\n\nThe order can be identified by an OrderID or by BackendID + BackendSystemID, the lines can be identified by an OrderLineID or by BackendID.\n\nThe result will tell you if it was successful.",
        "operationId": "CancelOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.CancelOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CancelOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.CancelOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ChangeOrderLinesToCarryOut": {
      "summary": "ChangeOrderLinesToCarryOut",
      "description": "Update some OrderLines to a state so that they can be carried out in a store\n\nIf the products should be ordered from a supplier first, the `OrderTheLinesFromASupplier` property should be true.\n\nWhen no OrderLineIDs are provided all eligable lines in the Order are updated",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ChangeOrderLinesToCarryOut",
        "description": "Update some OrderLines to a state so that they can be carried out in a store\n\nIf the products should be ordered from a supplier first, the `OrderTheLinesFromASupplier` property should be true.\n\nWhen no OrderLineIDs are provided all eligable lines in the Order are updated",
        "operationId": "ChangeOrderLinesToCarryOut",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ChangeOrderLinesToCarryOut"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ChangeOrderLinesToCarryOut",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ChangeOrderLinesToDelivery": {
      "summary": "ChangeOrderLinesToDelivery",
      "description": "Update some OrderLines to a state so that they can be delivered to the ShippingAddress on the order\n\nWhen no OrderLineIDs are provided all eligable lines in the Order are updated",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ChangeOrderLinesToDelivery",
        "description": "Update some OrderLines to a state so that they can be delivered to the ShippingAddress on the order\n\nWhen no OrderLineIDs are provided all eligable lines in the Order are updated",
        "operationId": "ChangeOrderLinesToDelivery",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ChangeOrderLinesToDelivery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ChangeOrderLinesToDelivery",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ChangeOrderLinesToPickup": {
      "summary": "ChangeOrderLinesToPickup",
      "description": "Update some OrderLines to a state so that they can be pickup up in a store by the customer attached to the order\n\nIf no PickupOrganizationUnit was choses yet, it should be provided in the `PickupOrganizationUnitID` property.\n\nWhen no OrderLineIDs are provided all eligable lines in the Order are updated",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ChangeOrderLinesToPickup",
        "description": "Update some OrderLines to a state so that they can be pickup up in a store by the customer attached to the order\n\nIf no PickupOrganizationUnit was choses yet, it should be provided in the `PickupOrganizationUnitID` property.\n\nWhen no OrderLineIDs are provided all eligable lines in the Order are updated",
        "operationId": "ChangeOrderLinesToPickup",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ChangeOrderLinesToPickup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ChangeOrderLinesToPickup",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CheckOrderBackendIDExists": {
      "summary": "CheckOrderBackendIDExists",
      "description": "Check if order BackendID exists",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.CheckOrderBackendIDExists",
        "description": "Check if order BackendID exists",
        "operationId": "CheckOrderBackendIDExists",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.CheckOrderBackendIDExists"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CheckOrderBackendIDExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.BackendIDExistsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CheckShipmentBackendIDExists": {
      "summary": "CheckShipmentBackendIDExists",
      "description": "Check if shipment BackendID exists",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.CheckShipmentBackendIDExists",
        "description": "Check if shipment BackendID exists",
        "operationId": "CheckShipmentBackendIDExists",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.CheckShipmentBackendIDExists"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CheckShipmentBackendIDExists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.BackendIDExistsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CheckOrderAddressFraud": {
      "summary": "CheckOrderAddressFraud",
      "description": "Check if the order has fraudulent shipping or billing addresses",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.CheckOrderAddressFraud",
        "description": "Check if the order has fraudulent shipping or billing addresses",
        "operationId": "CheckOrderAddressFraud",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.CheckOrderAddressFraud"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CheckOrderAddressFraud",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.CheckOrderAddressFraudResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateInvoicedOrderLineCorrection": {
      "summary": "CreateInvoicedOrderLineCorrection",
      "description": "Create a correction on an already invoiced line\n\nThis can be used to refund a partial amount on a completed OrderLine, in cases where the product should still be returnable.\nIf the product is not returnable anymore, a return without retake should be created.\n\nThis will result in a new line what will be shipped and invoiced immediately.\nBased on the AutoRefund flag, the created open amount will be refunded.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.CreateInvoicedOrderLineCorrection",
        "description": "Create a correction on an already invoiced line\n\nThis can be used to refund a partial amount on a completed OrderLine, in cases where the product should still be returnable.\nIf the product is not returnable anymore, a return without retake should be created.\n\nThis will result in a new line what will be shipped and invoiced immediately.\nBased on the AutoRefund flag, the created open amount will be refunded.",
        "operationId": "CreateInvoicedOrderLineCorrection",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.CreateInvoicedOrderLineCorrection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateInvoicedOrderLineCorrection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateOfferFromOrder": {
      "summary": "CreateOfferFromOrder",
      "description": "Converts an order to an offer",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.CreateOfferFromOrder",
        "description": "Converts an order to an offer",
        "operationId": "CreateOfferFromOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.CreateOfferFromOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateOfferFromOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateOrderFromOffer": {
      "summary": "CreateOrderFromOffer",
      "description": "Create an Order from an Offer specified by `OrderID`.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.CreateOrderFromOffer",
        "description": "Create an Order from an Offer specified by `OrderID`.",
        "operationId": "CreateOrderFromOffer",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.CreateOrderFromOffer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateOrderFromOffer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.CreateOrderFromOfferResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/PrepareOrderForCheckout": {
      "summary": "PrepareOrderForCheckout",
      "description": "Prepare the order to go into the checkout\n\nIf the order still has status ShoppingCart, update it to Order and:\n - Validate lineactiontypes (customer are not allowed to use ShipLine p/a)\n - Set the SoldBy on the lines to the current user\n - Set the addresses of the customer on the order, if not already set\n - (Re)calculate the taxes\n - Recalculate the order: discounts, shippingcosts, giftwrappingcosts etc.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.PrepareOrderForCheckout",
        "description": "Prepare the order to go into the checkout\n\nIf the order still has status ShoppingCart, update it to Order and:\n - Validate lineactiontypes (customer are not allowed to use ShipLine p/a)\n - Set the SoldBy on the lines to the current user\n - Set the addresses of the customer on the order, if not already set\n - (Re)calculate the taxes\n - Recalculate the order: discounts, shippingcosts, giftwrappingcosts etc.",
        "operationId": "PrepareOrderForCheckout",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.PrepareOrderForCheckout"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to PrepareOrderForCheckout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateOrderLedger": {
      "summary": "CreateOrderLedger",
      "description": "Create a new order ledger of the given type",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.CreateOrderLedger",
        "description": "Create a new order ledger of the given type",
        "operationId": "CreateOrderLedger",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.CreateOrderLedger"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateOrderLedger",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateOrderLineUnitPriceCorrection": {
      "summary": "CreateOrderLineUnitPriceCorrection",
      "description": "Create a price correction on the order line, specified by `OrderID` and `OrderLineID`. Provide the new `UnitPrice` this order line should have, and include\na property `IncludingTax` to indicate if you mean IN or EX taxes.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.CreateOrderLineUnitPriceCorrection",
        "description": "Create a price correction on the order line, specified by `OrderID` and `OrderLineID`. Provide the new `UnitPrice` this order line should have, and include\na property `IncludingTax` to indicate if you mean IN or EX taxes.",
        "operationId": "CreateOrderLineUnitPriceCorrection",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.CreateOrderLineUnitPriceCorrection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateOrderLineUnitPriceCorrection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.CreateOrderLineUnitPriceCorrectionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/RemoveOrderLineUnitPriceCorrection": {
      "summary": "RemoveOrderLineUnitPriceCorrection",
      "description": "Reset the unitprice on an OrderLine with a price correction.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.RemoveOrderLineUnitPriceCorrection",
        "description": "Reset the unitprice on an OrderLine with a price correction.",
        "operationId": "RemoveOrderLineUnitPriceCorrection",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.RemoveOrderLineUnitPriceCorrection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to RemoveOrderLineUnitPriceCorrection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateOrder": {
      "summary": "CreateOrder",
      "description": "Create a new Order of the given Type",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.CreateOrder",
        "description": "Create a new Order of the given Type",
        "operationId": "CreateOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.CreateOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.CreateOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetDeliveryOrderData": {
      "summary": "GetDeliveryOrderData",
      "description": "Get additional order information intended for delivery data.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetDeliveryOrderData",
        "description": "Get additional order information intended for delivery data.",
        "operationId": "GetDeliveryOrderData",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetDeliveryOrderData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetDeliveryOrderData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetDeliveryOrderDataResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetDeliveryOrderData": {
      "summary": "SetDeliveryOrderData",
      "description": "Set additional order information intended for delivery data.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.SetDeliveryOrderData",
        "description": "Set additional order information intended for delivery data.",
        "operationId": "SetDeliveryOrderData",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.SetDeliveryOrderData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetDeliveryOrderData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DetachOrder": {
      "summary": "DetachOrder",
      "description": "Detach the given Order from the attached customer and a session. A ReminderToken will be returned to be able to use the Order later with the `RecoverShoppingCartService`.\n\nThis service can be used to transfer an Order to a different User:\n- DetachOrder\n- Logout\n- Login\n- RecoverShoppingCart",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.DetachOrder",
        "description": "Detach the given Order from the attached customer and a session. A ReminderToken will be returned to be able to use the Order later with the `RecoverShoppingCartService`.\n\nThis service can be used to transfer an Order to a different User:\n- DetachOrder\n- Logout\n- Login\n- RecoverShoppingCart",
        "operationId": "DetachOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.DetachOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DetachOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.DetachOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DuplicateOrder": {
      "summary": "DuplicateOrder",
      "description": "Make a new `Order` based on an existing one.\n\n* Optionally you can provide some OrderLineIDs to duplicate only a subset of the order.\n* When an `OrganizationUnitID` is set, the Order will be created Originating and SoldFrom the specified OrganizationUnit\n* To include the orignal GiftWrapping the flag `IncludeGiftWrapping` should be set to true. When combining this with a subset of lines, this can generate an error when some wrapped lines are not duplicated.\n* To ignore shipping costs, set `IgnoreShippingCosts` to true (defaults to false)",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.DuplicateOrder",
        "description": "Make a new `Order` based on an existing one.\n\n* Optionally you can provide some OrderLineIDs to duplicate only a subset of the order.\n* When an `OrganizationUnitID` is set, the Order will be created Originating and SoldFrom the specified OrganizationUnit\n* To include the orignal GiftWrapping the flag `IncludeGiftWrapping` should be set to true. When combining this with a subset of lines, this can generate an error when some wrapped lines are not duplicated.\n* To ignore shipping costs, set `IgnoreShippingCosts` to true (defaults to false)",
        "operationId": "DuplicateOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.DuplicateOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DuplicateOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.DuplicateOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetFiscalOrderData": {
      "summary": "GetFiscalOrderData",
      "description": "Get the fiscal properties of an Order.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetFiscalOrderData",
        "description": "Get the fiscal properties of an Order.",
        "operationId": "GetFiscalOrderData",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetFiscalOrderData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetFiscalOrderData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetFiscalOrderDataResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetFiscalOrderData": {
      "summary": "SetFiscalOrderData",
      "description": "Update the fiscal properties on an Order.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.SetFiscalOrderData",
        "description": "Update the fiscal properties on an Order.",
        "operationId": "SetFiscalOrderData",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.SetFiscalOrderData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetFiscalOrderData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ForcePlaceOrder": {
      "summary": "ForcePlaceOrder",
      "description": "The ForcePlaceOrder service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ForcePlaceOrder",
        "description": "The ForcePlaceOrder service",
        "operationId": "ForcePlaceOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ForcePlaceOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ForcePlaceOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ForcePlaceOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetConfigurableOrderView": {
      "summary": "GetConfigurableOrderView",
      "description": "The GetConfigurableOrderView service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetConfigurableOrderView",
        "description": "The GetConfigurableOrderView service",
        "operationId": "GetConfigurableOrderView",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetConfigurableOrderView"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetConfigurableOrderView",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetConfigurableOrderViewResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetOrderEventsForOrder": {
      "summary": "GetOrderEventsForOrder",
      "description": "The GetOrderEventsForOrder service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetOrderEventsForOrder",
        "description": "The GetOrderEventsForOrder service",
        "operationId": "GetOrderEventsForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderEventsForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetOrderEventsForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderEventsForOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetOrderEventDetails": {
      "summary": "GetOrderEventDetails",
      "description": "The GetOrderEventDetails service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetOrderEventDetails",
        "description": "The GetOrderEventDetails service",
        "operationId": "GetOrderEventDetails",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderEventDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetOrderEventDetails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderEventDetailsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetOrderLinks": {
      "summary": "GetOrderLinks",
      "description": "Return the current order links for the given order",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetOrderLinks",
        "description": "Return the current order links for the given order",
        "operationId": "GetOrderLinks",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderLinks"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetOrderLinks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderLinksResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetOrder": {
      "summary": "GetOrder",
      "description": "Get an Order by ID.\n\nThis service is readonly, it will not update the order just by calling it like the `GetShoppingCart` service does.\n\nTo include the result of `GetRequiredDataForOrder`, the property `AdditionalOrderDataOptions.RequiredFor` can be set to the desired level of requirements.\nTo include the result of `GetProductRequirementValuesForOrder`, the property `AdditionalOrderDataOptions.IncludeProductRequirements` can be set to `true`.\nTo include the result of `GetGiftWrappingOptionsForOrder` and `GetAvailableGiftWrappingLinesForOrder`, the property `AdditionalOrderDataOptions.IncludeGiftWrapping` can be set to `true`.\nTo include the result of `PrefigureDiscounts` and `GetPotentialDiscountsForOrder`, the property `AdditionalOrderDataOptions.IncludePrefigureDiscounts` can be set to `true`.\nTo include the result of `GetPickProductDiscountOptionsForOrder`, the property `AdditionalOrderDataOptions.IncludePickProductOptions` can be set to `true`.\nTo include the result of `ListAvailableShippingMethods`, the property `AdditionalOrderDataOptions.IncludeAvailableShippingMethods` can be set to `true`.\nTo include the result of `GetAvailablePaymentMethods`, the property `AdditionalOrderDataOptions.IncludeAvailablePaymentMethods` can be set to `true`.\nTo include the result of `GetAvailableRefundPaymentMethodsForOrder`, the property `AdditionalOrderDataOptions.IncludeAvailableRefundPaymentMethods` can be set to `true`.\nTo include the result of `ValidateOrderShipment`, the property `AdditionalOrderDataOptions.IncludeValidateShipment` can be set to `true`.\nTo include the available actions for the PaymentTransactions, the property `AdditionalOrderDataOptions.IncludePaymentTransactionActions` can be set to `true`.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetOrder",
        "description": "Get an Order by ID.\n\nThis service is readonly, it will not update the order just by calling it like the `GetShoppingCart` service does.\n\nTo include the result of `GetRequiredDataForOrder`, the property `AdditionalOrderDataOptions.RequiredFor` can be set to the desired level of requirements.\nTo include the result of `GetProductRequirementValuesForOrder`, the property `AdditionalOrderDataOptions.IncludeProductRequirements` can be set to `true`.\nTo include the result of `GetGiftWrappingOptionsForOrder` and `GetAvailableGiftWrappingLinesForOrder`, the property `AdditionalOrderDataOptions.IncludeGiftWrapping` can be set to `true`.\nTo include the result of `PrefigureDiscounts` and `GetPotentialDiscountsForOrder`, the property `AdditionalOrderDataOptions.IncludePrefigureDiscounts` can be set to `true`.\nTo include the result of `GetPickProductDiscountOptionsForOrder`, the property `AdditionalOrderDataOptions.IncludePickProductOptions` can be set to `true`.\nTo include the result of `ListAvailableShippingMethods`, the property `AdditionalOrderDataOptions.IncludeAvailableShippingMethods` can be set to `true`.\nTo include the result of `GetAvailablePaymentMethods`, the property `AdditionalOrderDataOptions.IncludeAvailablePaymentMethods` can be set to `true`.\nTo include the result of `GetAvailableRefundPaymentMethodsForOrder`, the property `AdditionalOrderDataOptions.IncludeAvailableRefundPaymentMethods` can be set to `true`.\nTo include the result of `ValidateOrderShipment`, the property `AdditionalOrderDataOptions.IncludeValidateShipment` can be set to `true`.\nTo include the available actions for the PaymentTransactions, the property `AdditionalOrderDataOptions.IncludePaymentTransactionActions` can be set to `true`.",
        "operationId": "GetOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetOrderStatistics": {
      "summary": "GetOrderStatistics",
      "description": "The GetOrderStatistics service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetOrderStatistics",
        "description": "The GetOrderStatistics service",
        "operationId": "GetOrderStatistics",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderStatistics"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetOrderStatistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderStatisticsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetOrderSummaryForShipping": {
      "summary": "GetOrderSummaryForShipping",
      "description": "Get a summary of an Order to be used when a shipment will be made.\n\nCaution: the ProductID is nullable, all non-cancelled lines are returned",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetOrderSummaryForShipping",
        "description": "Get a summary of an Order to be used when a shipment will be made.\n\nCaution: the ProductID is nullable, all non-cancelled lines are returned",
        "operationId": "GetOrderSummaryForShipping",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderSummaryForShipping"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetOrderSummaryForShipping",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderSummaryForShippingResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetOrderSummary": {
      "summary": "GetOrderSummary",
      "description": "Returns a summarized version of the order with less details than `GetOrder`. This service should be used to expose\nless data to the frontend, also this variant to retrieve the order can be used when authenticated via the `GetTemporaryTokenForOrder`\nservice. Where `GetOrder` is not accessible.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetOrderSummary",
        "description": "Returns a summarized version of the order with less details than `GetOrder`. This service should be used to expose\nless data to the frontend, also this variant to retrieve the order can be used when authenticated via the `GetTemporaryTokenForOrder`\nservice. Where `GetOrder` is not accessible.",
        "operationId": "GetOrderSummary",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderSummary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetOrderSummary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderSummaryResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetPendingShipmentInformationForOrderLines": {
      "summary": "GetPendingShipmentInformationForOrderLines",
      "description": "Returns the quantity that is to be shipped for order lines. Includes pending shipments.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetPendingShipmentInformationForOrderLines",
        "description": "Returns the quantity that is to be shipped for order lines. Includes pending shipments.",
        "operationId": "GetPendingShipmentInformationForOrderLines",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetPendingShipmentInformationForOrderLines"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetPendingShipmentInformationForOrderLines",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetPendingShipmentInformationForOrderLinesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetRelatedOrderLines": {
      "summary": "GetRelatedOrderLines",
      "description": "List all the related orderlines for the given OrderLineID.\n\nThe orderlines will be sorted by CreationTime.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetRelatedOrderLines",
        "description": "List all the related orderlines for the given OrderLineID.\n\nThe orderlines will be sorted by CreationTime.",
        "operationId": "GetRelatedOrderLines",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetRelatedOrderLines"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetRelatedOrderLines",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetRelatedOrderLinesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetRelatedOrders": {
      "summary": "GetRelatedOrders",
      "description": "Get all the related orders for the given OrderID.\n\nThe orders will be sorted by CreationTime.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetRelatedOrders",
        "description": "Get all the related orders for the given OrderID.\n\nThe orders will be sorted by CreationTime.",
        "operationId": "GetRelatedOrders",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetRelatedOrders"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetRelatedOrders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetRelatedOrdersResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetRequiredDataForOrder": {
      "summary": "GetRequiredDataForOrder",
      "description": "Get the required data for the order",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetRequiredDataForOrder",
        "description": "Get the required data for the order",
        "operationId": "GetRequiredDataForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetRequiredDataForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetRequiredDataForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetRequiredDataForOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetReturnableStatusForOrder": {
      "summary": "GetReturnableStatusForOrder",
      "description": "Gets whether or not an Order is currently returnable.\n\nFor each OrderLine on the Order you'll get back a result that specifies whether or not it can be returned,\nhow much can be returned and which (if any) other OrderLines must be returned before the line itself can be returned\n(think of parent-child lines where you can't return a child OrderLine without also returning the parent OrderLine).\n\nIn addition, this service may return `ReturnSets` which specify that 'if you return these OrderLines (specified by `OrderLineIDs`) then\nyou must *also* return these lines (specified by `RequiredOrderLineIDsToReturn`). For example, if you return all normal OrderLines on an Order\nthen you must also return all the free products you have received.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetReturnableStatusForOrder",
        "description": "Gets whether or not an Order is currently returnable.\n\nFor each OrderLine on the Order you'll get back a result that specifies whether or not it can be returned,\nhow much can be returned and which (if any) other OrderLines must be returned before the line itself can be returned\n(think of parent-child lines where you can't return a child OrderLine without also returning the parent OrderLine).\n\nIn addition, this service may return `ReturnSets` which specify that 'if you return these OrderLines (specified by `OrderLineIDs`) then\nyou must *also* return these lines (specified by `RequiredOrderLineIDsToReturn`). For example, if you return all normal OrderLines on an Order\nthen you must also return all the free products you have received.",
        "operationId": "GetReturnableStatusForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetReturnableStatusForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetReturnableStatusForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetReturnableStatusForOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetShippingMethodsForOrder": {
      "summary": "GetShippingMethodsForOrder",
      "description": "Returns all of the shipping methods that are being used on the order.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetShippingMethodsForOrder",
        "description": "Returns all of the shipping methods that are being used on the order.",
        "operationId": "GetShippingMethodsForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetShippingMethodsForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetShippingMethodsForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetShippingMethodsForOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetTemporaryTokenForOrder": {
      "summary": "GetTemporaryTokenForOrder",
      "description": "Allows customers to grab a token to be able to view their order for a limited amount of time. The token is\nobtained through the user of either `OrderID` or both a `BackendSystemID` and a `BackendID` in combination\nwith the `EmailAddress` of the customer that is attached to the order.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetTemporaryTokenForOrder",
        "description": "Allows customers to grab a token to be able to view their order for a limited amount of time. The token is\nobtained through the user of either `OrderID` or both a `BackendSystemID` and a `BackendID` in combination\nwith the `EmailAddress` of the customer that is attached to the order.",
        "operationId": "GetTemporaryTokenForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetTemporaryTokenForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetTemporaryTokenForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetTemporaryTokenForOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListAvailableShippingMethods": {
      "summary": "ListAvailableShippingMethods",
      "description": "Returns a set of all the shipping methods that can be used for the given order. Use `SetShippingMethod` to update the shipping method on the order.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ListAvailableShippingMethods",
        "description": "Returns a set of all the shipping methods that can be used for the given order. Use `SetShippingMethod` to update the shipping method on the order.",
        "operationId": "ListAvailableShippingMethods",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ListAvailableShippingMethods"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListAvailableShippingMethods",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ListAvailableShippingMethodsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetCustomOrderTypes": {
      "summary": "GetCustomOrderTypes",
      "description": "Lists the available custom order types that exists which can be used in the order editing process.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetCustomOrderTypes",
        "description": "Lists the available custom order types that exists which can be used in the order editing process.",
        "operationId": "GetCustomOrderTypes",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetCustomOrderTypes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetCustomOrderTypes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetCustomOrderTypesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListExternalOrderStatusForOrder": {
      "summary": "ListExternalOrderStatusForOrder",
      "description": "The ListExternalOrderStatusForOrder service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ListExternalOrderStatusForOrder",
        "description": "The ListExternalOrderStatusForOrder service",
        "operationId": "ListExternalOrderStatusForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ListExternalOrderStatusForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListExternalOrderStatusForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ListExternalOrderStatusForOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListInvoicesForOrder": {
      "summary": "ListInvoicesForOrder",
      "description": "The ListInvoicesForOrder service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ListInvoicesForOrder",
        "description": "The ListInvoicesForOrder service",
        "operationId": "ListInvoicesForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ListInvoicesForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListInvoicesForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ListInvoicesForOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListOrderLedgerForOrder": {
      "summary": "ListOrderLedgerForOrder",
      "description": "Retrieves a paged list of Order Ledgers for specified OrderID.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ListOrderLedgerForOrder",
        "description": "Retrieves a paged list of Order Ledgers for specified OrderID.",
        "operationId": "ListOrderLedgerForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderLedgerForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListOrderLedgerForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderLedgerForOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListOrderLinesInvoiceSummary": {
      "summary": "ListOrderLinesInvoiceSummary",
      "description": "The ListOrderLinesInvoiceSummary service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ListOrderLinesInvoiceSummary",
        "description": "The ListOrderLinesInvoiceSummary service",
        "operationId": "ListOrderLinesInvoiceSummary",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderLinesInvoiceSummary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListOrderLinesInvoiceSummary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderLinesInvoiceSummaryResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListOrderLines": {
      "summary": "ListOrderLines",
      "description": "List the OrderLines of an Order in a paginated fashion, allowing you to filter with a `PageConfig` and include product properties using `ProductProperties`.\r\n\r\nUse this service when an Order contains a lot of lines, and the `GetOrder` service doesn't cut it - it will tell you it's time to switch using a property called `HasMoreLines`.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ListOrderLines",
        "description": "List the OrderLines of an Order in a paginated fashion, allowing you to filter with a `PageConfig` and include product properties using `ProductProperties`.\r\n\r\nUse this service when an Order contains a lot of lines, and the `GetOrder` service doesn't cut it - it will tell you it's time to switch using a property called `HasMoreLines`.",
        "operationId": "ListOrderLines",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderLines"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListOrderLines",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderLinesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListOrdersForCustomer": {
      "summary": "ListOrdersForCustomer",
      "description": "List orders for specific customer.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ListOrdersForCustomer",
        "description": "List orders for specific customer.",
        "operationId": "ListOrdersForCustomer",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ListOrdersForCustomer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListOrdersForCustomer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ListOrdersForCustomerResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListOrderShipments": {
      "summary": "ListOrderShipments",
      "description": "The ListOrderShipments service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ListOrderShipments",
        "description": "The ListOrderShipments service",
        "operationId": "ListOrderShipments",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderShipments"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListOrderShipments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderShipmentsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListOrdersWithCustomerReferences": {
      "summary": "ListOrdersWithCustomerReferences",
      "description": "The ListOrdersWithCustomerReferences service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ListOrdersWithCustomerReferences",
        "description": "The ListOrdersWithCustomerReferences service",
        "operationId": "ListOrdersWithCustomerReferences",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ListOrdersWithCustomerReferences"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListOrdersWithCustomerReferences",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ListOrdersWithCustomerReferencesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/MigrateOrdersToUnified": {
      "summary": "MigrateOrdersToUnified",
      "description": "The MigrateOrdersToUnified service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.MigrateOrdersToUnified",
        "description": "The MigrateOrdersToUnified service",
        "operationId": "MigrateOrdersToUnified",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.MigrateOrdersToUnified"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to MigrateOrdersToUnified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.MigrateOrdersToUnifiedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ModifyOrderLinePrice": {
      "summary": "ModifyOrderLinePrice",
      "description": "The ModifyOrderLinePrice service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ModifyOrderLinePrice",
        "description": "The ModifyOrderLinePrice service",
        "operationId": "ModifyOrderLinePrice",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ModifyOrderLinePrice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ModifyOrderLinePrice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.SimpleShoppingCartResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ModifyQuantityOrdered": {
      "summary": "ModifyQuantityOrdered",
      "description": "The ModifyQuantityOrdered service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ModifyQuantityOrdered",
        "description": "The ModifyQuantityOrdered service",
        "operationId": "ModifyQuantityOrdered",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ModifyQuantityOrdered"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ModifyQuantityOrdered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ModifyQuantityOrderedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListOrderCustomStatus": {
      "summary": "ListOrderCustomStatus",
      "description": "The ListOrderCustomStatus service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ListOrderCustomStatus",
        "description": "The ListOrderCustomStatus service",
        "operationId": "ListOrderCustomStatus",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderCustomStatus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListOrderCustomStatus",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderCustomStatusResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateOrderCustomStatus": {
      "summary": "CreateOrderCustomStatus",
      "description": "The CreateOrderCustomStatus service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.CreateOrderCustomStatus",
        "description": "The CreateOrderCustomStatus service",
        "operationId": "CreateOrderCustomStatus",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.CreateOrderCustomStatus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateOrderCustomStatus",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.CreateOrderCustomStatusResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateOrderCustomStatus": {
      "summary": "UpdateOrderCustomStatus",
      "description": "The UpdateOrderCustomStatus service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.UpdateOrderCustomStatus",
        "description": "The UpdateOrderCustomStatus service",
        "operationId": "UpdateOrderCustomStatus",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.UpdateOrderCustomStatus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateOrderCustomStatus",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteOrderCustomStatus": {
      "summary": "DeleteOrderCustomStatus",
      "description": "The DeleteOrderCustomStatus service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.DeleteOrderCustomStatus",
        "description": "The DeleteOrderCustomStatus service",
        "operationId": "DeleteOrderCustomStatus",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.DeleteOrderCustomStatus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteOrderCustomStatus",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListOrderCustomTypes": {
      "summary": "ListOrderCustomTypes",
      "description": "The ListOrderCustomTypes service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ListOrderCustomTypes",
        "description": "The ListOrderCustomTypes service",
        "operationId": "ListOrderCustomTypes",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderCustomTypes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListOrderCustomTypes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderCustomTypesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateOrderCustomType": {
      "summary": "CreateOrderCustomType",
      "description": "The CreateOrderCustomType service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.CreateOrderCustomType",
        "description": "The CreateOrderCustomType service",
        "operationId": "CreateOrderCustomType",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.CreateOrderCustomType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateOrderCustomType",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.CreateOrderCustomTypeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateOrderCustomType": {
      "summary": "UpdateOrderCustomType",
      "description": "The UpdateOrderCustomType service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.UpdateOrderCustomType",
        "description": "The UpdateOrderCustomType service",
        "operationId": "UpdateOrderCustomType",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.UpdateOrderCustomType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateOrderCustomType",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteOrderCustomType": {
      "summary": "DeleteOrderCustomType",
      "description": "The DeleteOrderCustomType service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.DeleteOrderCustomType",
        "description": "The DeleteOrderCustomType service",
        "operationId": "DeleteOrderCustomType",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.DeleteOrderCustomType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteOrderCustomType",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListOrderExportsForOrder": {
      "summary": "ListOrderExportsForOrder",
      "description": "The ListOrderExportsForOrder service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ListOrderExportsForOrder",
        "description": "The ListOrderExportsForOrder service",
        "operationId": "ListOrderExportsForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderExportsForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListOrderExportsForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderExportsForOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetOrderExportByID": {
      "summary": "GetOrderExportByID",
      "description": "The GetOrderExportByID service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetOrderExportByID",
        "description": "The GetOrderExportByID service",
        "operationId": "GetOrderExportByID",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderExportByID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetOrderExportByID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderExportByIDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/RetryOrderExport": {
      "summary": "RetryOrderExport",
      "description": "The RetryOrderExport service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.RetryOrderExport",
        "description": "The RetryOrderExport service",
        "operationId": "RetryOrderExport",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.RetryOrderExport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to RetryOrderExport",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetOrderExportDocuments": {
      "summary": "GetOrderExportDocuments",
      "description": "The GetOrderExportDocuments service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetOrderExportDocuments",
        "description": "The GetOrderExportDocuments service",
        "operationId": "GetOrderExportDocuments",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderExportDocuments"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetOrderExportDocuments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderExportDocumentsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateOrderLink": {
      "summary": "CreateOrderLink",
      "description": "The CreateOrderLink service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.CreateOrderLink",
        "description": "The CreateOrderLink service",
        "operationId": "CreateOrderLink",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.CreateOrderLink"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateOrderLink",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.CreateOrderLinkResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateOrderLink": {
      "summary": "UpdateOrderLink",
      "description": "The UpdateOrderLink service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.UpdateOrderLink",
        "description": "The UpdateOrderLink service",
        "operationId": "UpdateOrderLink",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.UpdateOrderLink"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateOrderLink",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteOrderLink": {
      "summary": "DeleteOrderLink",
      "description": "The DeleteOrderLink service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.DeleteOrderLink",
        "description": "The DeleteOrderLink service",
        "operationId": "DeleteOrderLink",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.DeleteOrderLink"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteOrderLink",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateOrderLinkType": {
      "summary": "CreateOrderLinkType",
      "description": "The CreateOrderLinkType service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.CreateOrderLinkType",
        "description": "The CreateOrderLinkType service",
        "operationId": "CreateOrderLinkType",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.CreateOrderLinkType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateOrderLinkType",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.CreateOrderLinkTypeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateOrderLinkType": {
      "summary": "UpdateOrderLinkType",
      "description": "The UpdateOrderLinkType service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.UpdateOrderLinkType",
        "description": "The UpdateOrderLinkType service",
        "operationId": "UpdateOrderLinkType",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.UpdateOrderLinkType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateOrderLinkType",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteOrderLinkType": {
      "summary": "DeleteOrderLinkType",
      "description": "The DeleteOrderLinkType service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.DeleteOrderLinkType",
        "description": "The DeleteOrderLinkType service",
        "operationId": "DeleteOrderLinkType",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.DeleteOrderLinkType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteOrderLinkType",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetOrderLinkTypeByID": {
      "summary": "GetOrderLinkTypeByID",
      "description": "The GetOrderLinkTypeByID service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetOrderLinkTypeByID",
        "description": "The GetOrderLinkTypeByID service",
        "operationId": "GetOrderLinkTypeByID",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderLinkTypeByID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetOrderLinkTypeByID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderLinkTypeByIDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetOrderLinkTypes": {
      "summary": "GetOrderLinkTypes",
      "description": "The GetOrderLinkTypes service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetOrderLinkTypes",
        "description": "The GetOrderLinkTypes service",
        "operationId": "GetOrderLinkTypes",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderLinkTypes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetOrderLinkTypes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderLinkTypesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/PlaceOrder": {
      "summary": "PlaceOrder",
      "description": "Placing an order means it is final for all parties; both agree on the exchange in goods, services and/or money that this order implies.\n\nWill set the `Order`.`IsPlaced` flag.\n\nThis service can be used to place a single order, or to place a batch at once.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.PlaceOrder",
        "description": "Placing an order means it is final for all parties; both agree on the exchange in goods, services and/or money that this order implies.\n\nWill set the `Order`.`IsPlaced` flag.\n\nThis service can be used to place a single order, or to place a batch at once.",
        "operationId": "PlaceOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.PlaceOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to PlaceOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.PlaceOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/PollExternalOrderStatus": {
      "summary": "PollExternalOrderStatus",
      "description": "The PollExternalOrderStatus service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.PollExternalOrderStatus",
        "description": "The PollExternalOrderStatus service",
        "operationId": "PollExternalOrderStatus",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.PollExternalOrderStatus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to PollExternalOrderStatus",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ProduceTrackingInformation": {
      "summary": "ProduceTrackingInformation",
      "description": "The ProduceTrackingInformation service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ProduceTrackingInformation",
        "description": "The ProduceTrackingInformation service",
        "operationId": "ProduceTrackingInformation",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ProduceTrackingInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ProduceTrackingInformation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ProduceTrackingInformationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/PushReturnOrder": {
      "summary": "PushReturnOrder",
      "description": "Creates a returnorder with all specified data\n\nIt is required to send the identifier for the ReturnOrder of the external system by providing a BackendSystemID and a BackendID.\n\nA return is based of an OriginalOrder. This order can be identifier by the OriginalBackendID or the OriginalOrderID. One of those is required.\n\nIf the stock is already received, set the `AlreadyReceived` to true. This will ship the order immediately.\n\nIf the stock is already received and the open amount should be refunded directly, set `AutoRefund` to true.\n\nThe Lines have to be identified by the original line, this should be done by providing the OriginalBackendID or the OriginalOrderLineID.\nIf those are not available the CustomID of the product can be set, but matching based on that is not advised.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.PushReturnOrder",
        "description": "Creates a returnorder with all specified data\n\nIt is required to send the identifier for the ReturnOrder of the external system by providing a BackendSystemID and a BackendID.\n\nA return is based of an OriginalOrder. This order can be identifier by the OriginalBackendID or the OriginalOrderID. One of those is required.\n\nIf the stock is already received, set the `AlreadyReceived` to true. This will ship the order immediately.\n\nIf the stock is already received and the open amount should be refunded directly, set `AutoRefund` to true.\n\nThe Lines have to be identified by the original line, this should be done by providing the OriginalBackendID or the OriginalOrderLineID.\nIf those are not available the CustomID of the product can be set, but matching based on that is not advised.",
        "operationId": "PushReturnOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.PushReturnOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to PushReturnOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.PushReturnOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/PushSalesOrder": {
      "summary": "PushSalesOrder",
      "description": "Creates an order with all specified data, places it, and raises all follow-up events.\n\nWhenever the order already exists with the same BackendSystemID/BackendID combination, nothing will be modified.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.PushSalesOrder",
        "description": "Creates an order with all specified data, places it, and raises all follow-up events.\n\nWhenever the order already exists with the same BackendSystemID/BackendID combination, nothing will be modified.",
        "operationId": "PushSalesOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.PushSalesOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to PushSalesOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.PushSalesOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/RemoveOfferStatusFromOrder": {
      "summary": "RemoveOfferStatusFromOrder",
      "description": "Remove offer expiration date for an order specified by `OrderID`.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.RemoveOfferStatusFromOrder",
        "description": "Remove offer expiration date for an order specified by `OrderID`.",
        "operationId": "RemoveOfferStatusFromOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.RemoveOfferStatusFromOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to RemoveOfferStatusFromOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ReserveOrder": {
      "summary": "ReserveOrder",
      "description": "Reserve an Order.\n\nThe Lines on the Order with LineActionType ReserveLine will be reserved:\n- The Stock will be moved from Sellable to Reserved\n- A receipt will be printed",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ReserveOrder",
        "description": "Reserve an Order.\n\nThe Lines on the Order with LineActionType ReserveLine will be reserved:\n- The Stock will be moved from Sellable to Reserved\n- A receipt will be printed",
        "operationId": "ReserveOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ReserveOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ReserveOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SearchOrders": {
      "summary": "SearchOrders",
      "description": "Search for any type of orders by providing the filter details properties\nImportant search criterias are: OrganizationUnitID, CurrentOrganizationUnitType, OrderID, CustomerID(ClientContext.Type), IsPaid.\nOrderID and IsPaid are going to be replaced by OrderIDs (and array of IDs) and PaymentStatus (an enum).\n\nE.g. request:\n{\n  \"OrderIDs\": [\n    \"orderID1\",\n    \"orderID2\"\n  ],\n  \"PaymentStatus\": \"PaymentStatus\",\n  \"IsShipped\": \"isShipped\"\n}\n\n\nPayment status options:\n    NotPaid = 0,\n    Paid = 1,\n    Partial = 2",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.SearchOrders",
        "description": "Search for any type of orders by providing the filter details properties\nImportant search criterias are: OrganizationUnitID, CurrentOrganizationUnitType, OrderID, CustomerID(ClientContext.Type), IsPaid.\nOrderID and IsPaid are going to be replaced by OrderIDs (and array of IDs) and PaymentStatus (an enum).\n\nE.g. request:\n{\n  \"OrderIDs\": [\n    \"orderID1\",\n    \"orderID2\"\n  ],\n  \"PaymentStatus\": \"PaymentStatus\",\n  \"IsShipped\": \"isShipped\"\n}\n\n\nPayment status options:\n    NotPaid = 0,\n    Paid = 1,\n    Partial = 2",
        "operationId": "SearchOrders",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.SearchOrders"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SearchOrders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.SearchOrdersResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetCustomerReferencesOnOrder": {
      "summary": "SetCustomerReferencesOnOrder",
      "description": "The SetCustomerReferencesOnOrder service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.SetCustomerReferencesOnOrder",
        "description": "The SetCustomerReferencesOnOrder service",
        "operationId": "SetCustomerReferencesOnOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.SetCustomerReferencesOnOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetCustomerReferencesOnOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetOrderBackendIdentifier": {
      "summary": "SetOrderBackendIdentifier",
      "description": "Sets `BackendID`/`BackendSystemID` on specified `OrderID`.\n\nThis combination may not already exist, and the targeted order may not be completed, or  already have a `BackendID`/`BackendSystemID` set.\n\n:warning: Careful! Use at your own risk!\n\nAn order may already have any of the following things, which will not automatically be regenerated/resent because of this identifier change, and could\nresult in mapping issues on any external system listening in on these. Any of these would also apply to return orders referencing this order, or stock\nmutations that have been caused by this order.\n\n* Order exports to third parties\n* Event exports (order created, order updated, ...)\n* Data Lake exports\n* Shipment labels with third party carriers\n* Financial exports (Cookbook)\n* Created documents (receipts, invoices, ...)",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.SetOrderBackendIdentifier",
        "description": "Sets `BackendID`/`BackendSystemID` on specified `OrderID`.\n\nThis combination may not already exist, and the targeted order may not be completed, or  already have a `BackendID`/`BackendSystemID` set.\n\n:warning: Careful! Use at your own risk!\n\nAn order may already have any of the following things, which will not automatically be regenerated/resent because of this identifier change, and could\nresult in mapping issues on any external system listening in on these. Any of these would also apply to return orders referencing this order, or stock\nmutations that have been caused by this order.\n\n* Order exports to third parties\n* Event exports (order created, order updated, ...)\n* Data Lake exports\n* Shipment labels with third party carriers\n* Financial exports (Cookbook)\n* Created documents (receipts, invoices, ...)",
        "operationId": "SetOrderBackendIdentifier",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.SetOrderBackendIdentifier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetOrderBackendIdentifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetOrderSoldBy": {
      "summary": "SetOrderSoldBy",
      "description": "Sets the SoldBy of the specified Sales Order to the provided UserID. The user must have type Employee. This service can only be called on Orders that have not been invoiced yet.\nAs SoldBy is a line-level property this service will update all lines on the order that have not been invoiced yet.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.SetOrderSoldBy",
        "description": "Sets the SoldBy of the specified Sales Order to the provided UserID. The user must have type Employee. This service can only be called on Orders that have not been invoiced yet.\nAs SoldBy is a line-level property this service will update all lines on the order that have not been invoiced yet.",
        "operationId": "SetOrderSoldBy",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.SetOrderSoldBy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetOrderSoldBy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetPickupOrganizationUnit": {
      "summary": "SetPickupOrganizationUnit",
      "description": "The SetPickupOrganizationUnit service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.SetPickupOrganizationUnit",
        "description": "The SetPickupOrganizationUnit service",
        "operationId": "SetPickupOrganizationUnit",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.SetPickupOrganizationUnit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetPickupOrganizationUnit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.SimpleShoppingCartResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetRemarkOnOrder": {
      "summary": "SetRemarkOnOrder",
      "description": "The SetRemarkOnOrder service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.SetRemarkOnOrder",
        "description": "The SetRemarkOnOrder service",
        "operationId": "SetRemarkOnOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.SetRemarkOnOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetRemarkOnOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetRequestedDate": {
      "summary": "SetRequestedDate",
      "description": "Set the `RequestedDate` on OrderLines.\nThe RequestedDate is the date on which the OrderLine should be ready for shipping/pickup/etc.\n\nIt is required to provide an `OrderID`.\nIf the RequestedDate is null, it will be removed from the lines.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.SetRequestedDate",
        "description": "Set the `RequestedDate` on OrderLines.\nThe RequestedDate is the date on which the OrderLine should be ready for shipping/pickup/etc.\n\nIt is required to provide an `OrderID`.\nIf the RequestedDate is null, it will be removed from the lines.",
        "operationId": "SetRequestedDate",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.SetRequestedDate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetRequestedDate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetShippingMethod": {
      "summary": "SetShippingMethod",
      "description": "Sets the shipping method for the given order(lines). Use `ListAvailableShippingMethods` to request the shipping methods that can be used as input to this service.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.SetShippingMethod",
        "description": "Sets the shipping method for the given order(lines). Use `ListAvailableShippingMethods` to request the shipping methods that can be used as input to this service.",
        "operationId": "SetShippingMethod",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.SetShippingMethod"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetShippingMethod",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.SimpleShoppingCartResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ShipExternalOrder": {
      "summary": "ShipExternalOrder",
      "description": "Ships an order that has been exported to an external system by another proces",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ShipExternalOrder",
        "description": "Ships an order that has been exported to an external system by another proces",
        "operationId": "ShipExternalOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ShipExternalOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ShipExternalOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ShipExternalOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ShipOrderLines": {
      "summary": "ShipOrderLines",
      "description": "The ShipOrderLines service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ShipOrderLines",
        "description": "The ShipOrderLines service",
        "operationId": "ShipOrderLines",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ShipOrderLines"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ShipOrderLines",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ShipOrderLinesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ShipOrder": {
      "summary": "ShipOrder",
      "description": "Ships the specified order. When Lines are specified, only those lines will be shipped.\n\nShipping of Lines includes:\n- Activating giftcards\n- Mutating the stock of the products\n- Potentially invoicing of the lines\n- Validating requirements",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ShipOrder",
        "description": "Ships the specified order. When Lines are specified, only those lines will be shipped.\n\nShipping of Lines includes:\n- Activating giftcards\n- Mutating the stock of the products\n- Potentially invoicing of the lines\n- Validating requirements",
        "operationId": "ShipOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ShipOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ShipOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ShipOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SplitOrderLine": {
      "summary": "SplitOrderLine",
      "description": "Split an OrderLine in two lines.\n\nThe new line will have a QuantityOrdered of QuantityToSplit and on the existing line there will be QuantityToShip items cancelled.\nIf the OrderLine has a negative QuantityToShip, the QuantityOrdered of the new line will be -QuantityToSplit.\n\nThe QuantityToSplit should always be greather than 0 and smaller than the absolute value of the QuantityToShip of the OrderLine.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.SplitOrderLine",
        "description": "Split an OrderLine in two lines.\n\nThe new line will have a QuantityOrdered of QuantityToSplit and on the existing line there will be QuantityToShip items cancelled.\nIf the OrderLine has a negative QuantityToShip, the QuantityOrdered of the new line will be -QuantityToSplit.\n\nThe QuantityToSplit should always be greather than 0 and smaller than the absolute value of the QuantityToShip of the OrderLine.",
        "operationId": "SplitOrderLine",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.SplitOrderLine"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SplitOrderLine",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.SplitOrderLineResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ExemptOrderFromTax": {
      "summary": "ExemptOrderFromTax",
      "description": "Marks the provided Order or OrderLine as exempt from tax, with specified code and reason.\n\nWhen exempting the Order, this also marks all current OrderLines of the Order that haven't been invoiced yet as tax-exempt. All future\nOrderLines created on this Order will then also automatically be made tax-exempt.\n\nCalling this service is irreversible; once the Order is marked as tax exempt, it cannot be undone and can only be worked around by creating a new Order.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ExemptOrderFromTax",
        "description": "Marks the provided Order or OrderLine as exempt from tax, with specified code and reason.\n\nWhen exempting the Order, this also marks all current OrderLines of the Order that haven't been invoiced yet as tax-exempt. All future\nOrderLines created on this Order will then also automatically be made tax-exempt.\n\nCalling this service is irreversible; once the Order is marked as tax exempt, it cannot be undone and can only be worked around by creating a new Order.",
        "operationId": "ExemptOrderFromTax",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ExemptOrderFromTax"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ExemptOrderFromTax",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetSalesTaxEstimateForOrder": {
      "summary": "GetSalesTaxEstimateForOrder",
      "description": "Will return the estimated tax for specified order, but does not persist through the order amounts retrieved elsewhere.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetSalesTaxEstimateForOrder",
        "description": "Will return the estimated tax for specified order, but does not persist through the order amounts retrieved elsewhere.",
        "operationId": "GetSalesTaxEstimateForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetSalesTaxEstimateForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetSalesTaxEstimateForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.SalesTaxEstimateForOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ApplySalesTaxEstimateForOrder": {
      "summary": "ApplySalesTaxEstimateForOrder",
      "description": "Will apply and return the estimated tax for specified order. Its effect is persistent through all subsequent calls for this orders' amounts.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ApplySalesTaxEstimateForOrder",
        "description": "Will apply and return the estimated tax for specified order. Its effect is persistent through all subsequent calls for this orders' amounts.",
        "operationId": "ApplySalesTaxEstimateForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ApplySalesTaxEstimateForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ApplySalesTaxEstimateForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.SalesTaxEstimateForOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/TransferOrder": {
      "summary": "TransferOrder",
      "description": "Transfers the order to a customer.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.TransferOrder",
        "description": "Transfers the order to a customer.",
        "operationId": "TransferOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.TransferOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to TransferOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/TransferOrderToOrganizationUnit": {
      "summary": "TransferOrderToOrganizationUnit",
      "description": "Transfers the provided Order to the OrganizationUnit of the currently logged in user, updating both the SoldFromOrganizationUnit and PickupOrganizationUnit.\n\nIf this is already the case, calling this service has no effect. In case the order cannot be transferred, this service will return an error.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.TransferOrderToOrganizationUnit",
        "description": "Transfers the provided Order to the OrganizationUnit of the currently logged in user, updating both the SoldFromOrganizationUnit and PickupOrganizationUnit.\n\nIf this is already the case, calling this service has no effect. In case the order cannot be transferred, this service will return an error.",
        "operationId": "TransferOrderToOrganizationUnit",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.TransferOrderToOrganizationUnit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to TransferOrderToOrganizationUnit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetTransportOrderLineData": {
      "summary": "GetTransportOrderLineData",
      "description": "Get additional order line information intended for transport data.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetTransportOrderLineData",
        "description": "Get additional order line information intended for transport data.",
        "operationId": "GetTransportOrderLineData",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetTransportOrderLineData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetTransportOrderLineData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetTransportOrderLineDataResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetTransportOrderLineData": {
      "summary": "SetTransportOrderLineData",
      "description": "Set additional order line information intended for transport data. Supports a single `OrderLineID`, or a list of `OrderLineIDs`.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.SetTransportOrderLineData",
        "description": "Set additional order line information intended for transport data. Supports a single `OrderLineID`, or a list of `OrderLineIDs`.",
        "operationId": "SetTransportOrderLineData",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.SetTransportOrderLineData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetTransportOrderLineData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateContractNumber": {
      "summary": "UpdateContractNumber",
      "description": "The UpdateContractNumber service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.UpdateContractNumber",
        "description": "The UpdateContractNumber service",
        "operationId": "UpdateContractNumber",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.UpdateContractNumber"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateContractNumber",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetContractNumber": {
      "summary": "GetContractNumber",
      "description": "The GetContractNumber service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetContractNumber",
        "description": "The GetContractNumber service",
        "operationId": "GetContractNumber",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetContractNumber"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetContractNumber",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetContractNumberResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateOrderAddresses": {
      "summary": "UpdateOrderAddresses",
      "description": "The UpdateOrderAddresses service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.UpdateOrderAddresses",
        "description": "The UpdateOrderAddresses service",
        "operationId": "UpdateOrderAddresses",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.UpdateOrderAddresses"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateOrderAddresses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.UpdateOrderAddressesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateOrderShippingAddress": {
      "summary": "UpdateOrderShippingAddress",
      "description": "The UpdateOrderShippingAddress service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.UpdateOrderShippingAddress",
        "description": "The UpdateOrderShippingAddress service",
        "operationId": "UpdateOrderShippingAddress",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.UpdateOrderShippingAddress"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateOrderShippingAddress",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.UpdateOrderAddressResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateOrderBillingAddress": {
      "summary": "UpdateOrderBillingAddress",
      "description": "The UpdateOrderBillingAddress service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.UpdateOrderBillingAddress",
        "description": "The UpdateOrderBillingAddress service",
        "operationId": "UpdateOrderBillingAddress",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.UpdateOrderBillingAddress"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateOrderBillingAddress",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.UpdateOrderAddressResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateOrderPickupAddress": {
      "summary": "UpdateOrderPickupAddress",
      "description": "The UpdateOrderPickupAddress service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.UpdateOrderPickupAddress",
        "description": "The UpdateOrderPickupAddress service",
        "operationId": "UpdateOrderPickupAddress",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.UpdateOrderPickupAddress"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateOrderPickupAddress",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.UpdateOrderAddressResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateOrderCheckoutOptions": {
      "summary": "UpdateOrderCheckoutOptions",
      "description": "Update the data for the checkoutoptions returned in the AdditionalData of a GetOrder/GetShoppingCart call",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.UpdateOrderCheckoutOptions",
        "description": "Update the data for the checkoutoptions returned in the AdditionalData of a GetOrder/GetShoppingCart call",
        "operationId": "UpdateOrderCheckoutOptions",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.UpdateOrderCheckoutOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateOrderCheckoutOptions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateOrderCurrency": {
      "summary": "UpdateOrderCurrency",
      "description": "The UpdateOrderCurrency service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.UpdateOrderCurrency",
        "description": "The UpdateOrderCurrency service",
        "operationId": "UpdateOrderCurrency",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.UpdateOrderCurrency"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateOrderCurrency",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateOrderCustomFields": {
      "summary": "UpdateOrderCustomFields",
      "description": "Create or update existing custom field on order",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.UpdateOrderCustomFields",
        "description": "Create or update existing custom field on order",
        "operationId": "UpdateOrderCustomFields",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.UpdateOrderCustomFields"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateOrderCustomFields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateOrderLineCustomFields": {
      "summary": "UpdateOrderLineCustomFields",
      "description": "Create or update existing custom field on order line level by ID",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.UpdateOrderLineCustomFields",
        "description": "Create or update existing custom field on order line level by ID",
        "operationId": "UpdateOrderLineCustomFields",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.UpdateOrderLineCustomFields"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateOrderLineCustomFields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateOrderLineStockLabel": {
      "summary": "UpdateOrderLineStockLabel",
      "description": "Update the StockLabel for a single `OrderLine` or for the complete `Order`. It is required to supply an `OrderID` or an `OrderLineID`.\nIf one of the lines cannot be updated, it will be skipped.\n\nOnly unshipped orderlines with LineActionType Ship can be updated.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.UpdateOrderLineStockLabel",
        "description": "Update the StockLabel for a single `OrderLine` or for the complete `Order`. It is required to supply an `OrderID` or an `OrderLineID`.\nIf one of the lines cannot be updated, it will be skipped.\n\nOnly unshipped orderlines with LineActionType Ship can be updated.",
        "operationId": "UpdateOrderLineStockLabel",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.UpdateOrderLineStockLabel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateOrderLineStockLabel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateOrderOptions": {
      "summary": "UpdateOrderOptions",
      "description": "This services can be used to toggle some of the OrderOptions.\n\n- IgnoreDiscounts: Discounts will not be added/removed/recalculated\n- IgnoreShippingCosts: ShippingCosts will not be added/removed/recalculated\n- IgnoreGiftWrappingCosts: GiftWrappingCosts will not be added/removed/recalculated\n- AllowPartialFulfillment: The order will potentially be fulfilled in multiple batches",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.UpdateOrderOptions",
        "description": "This services can be used to toggle some of the OrderOptions.\n\n- IgnoreDiscounts: Discounts will not be added/removed/recalculated\n- IgnoreShippingCosts: ShippingCosts will not be added/removed/recalculated\n- IgnoreGiftWrappingCosts: GiftWrappingCosts will not be added/removed/recalculated\n- AllowPartialFulfillment: The order will potentially be fulfilled in multiple batches",
        "operationId": "UpdateOrderOptions",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.UpdateOrderOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateOrderOptions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateOrder": {
      "summary": "UpdateOrder",
      "description": "Update various fields on an Order.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.UpdateOrder",
        "description": "Update various fields on an Order.",
        "operationId": "UpdateOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.UpdateOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateOrderShippingStatus": {
      "summary": "UpdateOrderShippingStatus",
      "description": "Updates the order shipping status, creating ledger entries on order level.\n\nWill be processed as a whole; a single failing line in `Lines` will prevent all other updates in a single call from persisting.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.UpdateOrderShippingStatus",
        "description": "Updates the order shipping status, creating ledger entries on order level.\n\nWill be processed as a whole; a single failing line in `Lines` will prevent all other updates in a single call from persisting.",
        "operationId": "UpdateOrderShippingStatus",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.UpdateOrderShippingStatus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateOrderShippingStatus",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateSerialNumber": {
      "summary": "UpdateSerialNumber",
      "description": "Update the SerialNumber on an OrderLine. When no serialnumber is provided it will be removed.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.UpdateSerialNumber",
        "description": "Update the SerialNumber on an OrderLine. When no serialnumber is provided it will be removed.",
        "operationId": "UpdateSerialNumber",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.UpdateSerialNumber"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateSerialNumber",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetSerialNumbers": {
      "summary": "SetSerialNumbers",
      "description": "Creates new orderlines for each given serialnumber, based on the given orderline and sets one of serial numbers on the given orderline.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.SetSerialNumbers",
        "description": "Creates new orderlines for each given serialnumber, based on the given orderline and sets one of serial numbers on the given orderline.",
        "operationId": "SetSerialNumbers",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.SetSerialNumbers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetSerialNumbers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ValidateExportSchedule": {
      "summary": "ValidateExportSchedule",
      "description": "Validate if all conditions are met to schedule the (specified lines of) specified order.\n\n_Will check the default ExportValidator and check OrderRequirements for all actions._",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ValidateExportSchedule",
        "description": "Validate if all conditions are met to schedule the (specified lines of) specified order.\n\n_Will check the default ExportValidator and check OrderRequirements for all actions._",
        "operationId": "ValidateExportSchedule",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ValidateExportSchedule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ValidateExportSchedule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ValidateExportScheduleResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ValidateOrderShipment": {
      "summary": "ValidateOrderShipment",
      "description": "Validates if a (part of an) Order can be shipped in the current state.\n\nReturns if it is valid (`IsValid`) and if not, how much still needs to be paid (`OpenAmountForShipment`).",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ValidateOrderShipment",
        "description": "Validates if a (part of an) Order can be shipped in the current state.\n\nReturns if it is valid (`IsValid`) and if not, how much still needs to be paid (`OpenAmountForShipment`).",
        "operationId": "ValidateOrderShipment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ValidateOrderShipment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ValidateOrderShipment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ValidateOrderShipmentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ValidateRequiredDataForOrder": {
      "summary": "ValidateRequiredDataForOrder",
      "description": "Validate the required data for the order",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ValidateRequiredDataForOrder",
        "description": "Validate the required data for the order",
        "operationId": "ValidateRequiredDataForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ValidateRequiredDataForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ValidateRequiredDataForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ValidateRequiredDataForOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/VerifyCustomer": {
      "summary": "VerifyCustomer",
      "description": "Verify the customer of an order by a QR code check. This process is used to validate that the person that picks up an order is really the person that ordered it.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.VerifyCustomer",
        "description": "Verify the customer of an order by a QR code check. This process is used to validate that the person that picks up an order is really the person that ordered it.",
        "operationId": "VerifyCustomer",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.VerifyCustomer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to VerifyCustomer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ForceVerifyCustomer": {
      "summary": "ForceVerifyCustomer",
      "description": "Verify the customer of an order without QR code check.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ForceVerifyCustomer",
        "description": "Verify the customer of an order without QR code check.",
        "operationId": "ForceVerifyCustomer",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ForceVerifyCustomer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ForceVerifyCustomer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetCustomerOrderVerificationCode": {
      "summary": "GetCustomerOrderVerificationCode",
      "description": "The GetCustomerOrderVerificationCode service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetCustomerOrderVerificationCode",
        "description": "The GetCustomerOrderVerificationCode service",
        "operationId": "GetCustomerOrderVerificationCode",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetCustomerOrderVerificationCode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetCustomerOrderVerificationCode",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetVerificationCodeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetEmployeeOrderVerificationCode": {
      "summary": "GetEmployeeOrderVerificationCode",
      "description": "The GetEmployeeOrderVerificationCode service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetEmployeeOrderVerificationCode",
        "description": "The GetEmployeeOrderVerificationCode service",
        "operationId": "GetEmployeeOrderVerificationCode",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetEmployeeOrderVerificationCode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetEmployeeOrderVerificationCode",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetVerificationCodeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/VerifyOrder": {
      "summary": "VerifyOrder",
      "description": "Verify an Order that has been flagged with a CustomOrderStatus `NeedsEmployeeVerification`. Will try to place the order after the verification.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.VerifyOrder",
        "description": "Verify an Order that has been flagged with a CustomOrderStatus `NeedsEmployeeVerification`. Will try to place the order after the verification.",
        "operationId": "VerifyOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.VerifyOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to VerifyOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetWarehouseOrderData": {
      "summary": "GetWarehouseOrderData",
      "description": "Get additional order information intended for warehouse data.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GetWarehouseOrderData",
        "description": "Get additional order information intended for warehouse data.",
        "operationId": "GetWarehouseOrderData",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GetWarehouseOrderData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetWarehouseOrderData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GetWarehouseOrderDataResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetWarehouseOrderData": {
      "summary": "SetWarehouseOrderData",
      "description": "Set additional order information intended for warehouse data.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.SetWarehouseOrderData",
        "description": "Set additional order information intended for warehouse data.",
        "operationId": "SetWarehouseOrderData",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.SetWarehouseOrderData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetWarehouseOrderData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetTaxExemptionReasons": {
      "summary": "GetTaxExemptionReasons",
      "description": "Gets the available reasons for tax exemption.\nThe `Code` property of each result can then be supplied to `ExemptOrderFromTax` as the `TaxExemptionCode`.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.Taxes.GetTaxExemptionReasons",
        "description": "Gets the available reasons for tax exemption.\nThe `Code` property of each result can then be supplied to `ExemptOrderFromTax` as the `TaxExemptionCode`.",
        "operationId": "GetTaxExemptionReasons",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.Taxes.GetTaxExemptionReasons"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetTaxExemptionReasons",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.Taxes.GetTaxExemptionReasonsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateReturnToSupplierOrder": {
      "summary": "CreateReturnToSupplierOrder",
      "description": "Convert the given `Order` to a ReturnToSupplierOrder. Existing none-product lines will be cancelled.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ReturnToSupplier.CreateReturnToSupplierOrder",
        "description": "Convert the given `Order` to a ReturnToSupplierOrder. Existing none-product lines will be cancelled.",
        "operationId": "CreateReturnToSupplierOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.CreateReturnToSupplierOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateReturnToSupplierOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateReturnToSupplierRequest": {
      "summary": "CreateReturnToSupplierRequest",
      "description": "Create a new ReturnToSupplierRequest\n\nA ReturnToSupplierRequest is used to generate ReturnToSupplier orders for Shops\n\n- Name: For identification of the request (required)\n- OrganizationUnitSetID: The organizationunits (filtered on Type = Shop) that will get a RTS (required)\n- ProductSearchTemplateID: Only products matching this template will be added to the orders, if supplied (optional)\n- RecallPercentage: Percentage of the current stock to recall. Value should be between 0.00 and 1.00. (required)\n- Filters, CountryID, LanguageID: Instead of a productsearchtemplate, products can also be defined by providing a manual filter (all optional)",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ReturnToSupplier.CreateReturnToSupplierRequest",
        "description": "Create a new ReturnToSupplierRequest\n\nA ReturnToSupplierRequest is used to generate ReturnToSupplier orders for Shops\n\n- Name: For identification of the request (required)\n- OrganizationUnitSetID: The organizationunits (filtered on Type = Shop) that will get a RTS (required)\n- ProductSearchTemplateID: Only products matching this template will be added to the orders, if supplied (optional)\n- RecallPercentage: Percentage of the current stock to recall. Value should be between 0.00 and 1.00. (required)\n- Filters, CountryID, LanguageID: Instead of a productsearchtemplate, products can also be defined by providing a manual filter (all optional)",
        "operationId": "CreateReturnToSupplierRequest",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.CreateReturnToSupplierRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateReturnToSupplierRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.CreateReturnToSupplierRequestResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteReturnToSupplierRequest": {
      "summary": "DeleteReturnToSupplierRequest",
      "description": "Delete a ReturnToSupplierRequest\n\nThis is only allowed for Request in the state New or Error",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ReturnToSupplier.DeleteReturnToSupplierRequest",
        "description": "Delete a ReturnToSupplierRequest\n\nThis is only allowed for Request in the state New or Error",
        "operationId": "DeleteReturnToSupplierRequest",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.DeleteReturnToSupplierRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteReturnToSupplierRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetReturnToSupplierData": {
      "summary": "GetReturnToSupplierData",
      "description": "The GetReturnToSupplierData service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ReturnToSupplier.GetReturnToSupplierData",
        "description": "The GetReturnToSupplierData service",
        "operationId": "GetReturnToSupplierData",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.GetReturnToSupplierData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetReturnToSupplierData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.GetReturnToSupplierDataResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetReturnToSupplierRequestByID": {
      "summary": "GetReturnToSupplierRequestByID",
      "description": "Get a ReturnToSupplierRequest",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ReturnToSupplier.GetReturnToSupplierRequestByID",
        "description": "Get a ReturnToSupplierRequest",
        "operationId": "GetReturnToSupplierRequestByID",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.GetReturnToSupplierRequestByID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetReturnToSupplierRequestByID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.GetReturnToSupplierRequestByIDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListReturnableSuppliersForOrder": {
      "summary": "ListReturnableSuppliersForOrder",
      "description": "The ListReturnableSuppliersForOrder service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ReturnToSupplier.ListReturnableSuppliersForOrder",
        "description": "The ListReturnableSuppliersForOrder service",
        "operationId": "ListReturnableSuppliersForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.ListReturnableSuppliersForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListReturnableSuppliersForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.ListReturnableSuppliersForOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListReturnToSupplierRequests": {
      "summary": "ListReturnToSupplierRequests",
      "description": "List ReturnToSupplierRequests\n\nAvailable filters:\n- Name\n- Status",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ReturnToSupplier.ListReturnToSupplierRequests",
        "description": "List ReturnToSupplierRequests\n\nAvailable filters:\n- Name\n- Status",
        "operationId": "ListReturnToSupplierRequests",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.ListReturnToSupplierRequests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListReturnToSupplierRequests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.ListReturnToSupplierRequestsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/PrintReturnToSupplierOrderTicket": {
      "summary": "PrintReturnToSupplierOrderTicket",
      "description": "Print the return to supplier order label.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ReturnToSupplier.PrintReturnToSupplierOrderTicket",
        "description": "Print the return to supplier order label.",
        "operationId": "PrintReturnToSupplierOrderTicket",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.PrintReturnToSupplierOrderTicket"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to PrintReturnToSupplierOrderTicket",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ProcessReturnToSupplierRequest": {
      "summary": "ProcessReturnToSupplierRequest",
      "description": "Start the processing of a ReturnToSupplierRequest\n\nThis will put the request in a processing state and will generate the orders based on the set options.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ReturnToSupplier.ProcessReturnToSupplierRequest",
        "description": "Start the processing of a ReturnToSupplierRequest\n\nThis will put the request in a processing state and will generate the orders based on the set options.",
        "operationId": "ProcessReturnToSupplierRequest",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.ProcessReturnToSupplierRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ProcessReturnToSupplierRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetSuppliersForReturnToSupplierRequest": {
      "summary": "SetSuppliersForReturnToSupplierRequest",
      "description": "Set the suppliers for OrganizationUnit where this could not be automatically determined\n\nTo view the available suppliers, sue the ValidateReturnToSupplierRequest service.\n\nThe SupplierOrganizationUnitID is nullable, if it is set to `null`, the OrganizationUnit will be skipped when generating the orders.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ReturnToSupplier.SetSuppliersForReturnToSupplierRequest",
        "description": "Set the suppliers for OrganizationUnit where this could not be automatically determined\n\nTo view the available suppliers, sue the ValidateReturnToSupplierRequest service.\n\nThe SupplierOrganizationUnitID is nullable, if it is set to `null`, the OrganizationUnit will be skipped when generating the orders.",
        "operationId": "SetSuppliersForReturnToSupplierRequest",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.SetSuppliersForReturnToSupplierRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetSuppliersForReturnToSupplierRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateReturnToSupplierOrder": {
      "summary": "UpdateReturnToSupplierOrder",
      "description": "Update the return to supplier order with Reason, ShipFrom- and ShipTo organization unit",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ReturnToSupplier.UpdateReturnToSupplierOrder",
        "description": "Update the return to supplier order with Reason, ShipFrom- and ShipTo organization unit",
        "operationId": "UpdateReturnToSupplierOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.UpdateReturnToSupplierOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateReturnToSupplierOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateReturnToSupplierRequest": {
      "summary": "UpdateReturnToSupplierRequest",
      "description": "Update a ReturnToSupplierRequest\n\nThis is only allowed for requests in the state New\n\nProperties that are not provided in the request, will not be updated.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ReturnToSupplier.UpdateReturnToSupplierRequest",
        "description": "Update a ReturnToSupplierRequest\n\nThis is only allowed for requests in the state New\n\nProperties that are not provided in the request, will not be updated.",
        "operationId": "UpdateReturnToSupplierRequest",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.UpdateReturnToSupplierRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateReturnToSupplierRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ValidateReturnToSupplierRequest": {
      "summary": "ValidateReturnToSupplierRequest",
      "description": "Validate a ReturnToSupplierRequest\n\nThis will check if for all OrganizationUnits in the set a Supplier could be determined.\n\nThe service will return all available suppliers for each OrganizationUnit and will pick it when a single one is available.\nWhen no Suppliers are available, no Order can be generated.\nIf more than one Supplier is available, the correct one should be picked with the SetSuppliersForReturnToSupplierRequest service.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.ReturnToSupplier.ValidateReturnToSupplierRequest",
        "description": "Validate a ReturnToSupplierRequest\n\nThis will check if for all OrganizationUnits in the set a Supplier could be determined.\n\nThe service will return all available suppliers for each OrganizationUnit and will pick it when a single one is available.\nWhen no Suppliers are available, no Order can be generated.\nIf more than one Supplier is available, the correct one should be picked with the SetSuppliersForReturnToSupplierRequest service.",
        "operationId": "ValidateReturnToSupplierRequest",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.ValidateReturnToSupplierRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ValidateReturnToSupplierRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.ValidateReturnToSupplierRequestResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetRefundCorrectionReasons": {
      "summary": "GetRefundCorrectionReasons",
      "description": "Get all refund reasons available in the current context",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.Returns.GetRefundCorrectionReasons",
        "description": "Get all refund reasons available in the current context",
        "operationId": "GetRefundCorrectionReasons",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.Returns.GetRefundCorrectionReasons"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetRefundCorrectionReasons",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.Returns.GetRefundCorrectionReasonsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateInterbranchOrder": {
      "summary": "CreateInterbranchOrder",
      "description": "Convert the given `Order` to a InterbranchOrder.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.Interbranch.CreateInterbranchOrder",
        "description": "Convert the given `Order` to a InterbranchOrder.",
        "operationId": "CreateInterbranchOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.Interbranch.CreateInterbranchOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateInterbranchOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/PrintInterbranchOrderReceipt": {
      "summary": "PrintInterbranchOrderReceipt",
      "description": "Print the InterbranchOrder receipt.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.Interbranch.PrintInterbranchOrderReceipt",
        "description": "Print the InterbranchOrder receipt.",
        "operationId": "PrintInterbranchOrderReceipt",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.Interbranch.PrintInterbranchOrderReceipt"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to PrintInterbranchOrderReceipt",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListInterbranchOrganizationUnitForOrder": {
      "summary": "ListInterbranchOrganizationUnitForOrder",
      "description": "Lists the OrganizationUnits that are available for the given OrderID to be used as the target for an interbranch order.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.Interbranch.ListInterbranchOrganizationUnitForOrder",
        "description": "Lists the OrganizationUnits that are available for the given OrderID to be used as the target for an interbranch order.",
        "operationId": "ListInterbranchOrganizationUnitForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.Interbranch.ListInterbranchOrganizationUnitForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListInterbranchOrganizationUnitForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.Interbranch.ListInterbranchOrganizationUnitForOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateInterbranchOrder": {
      "summary": "UpdateInterbranchOrder",
      "description": "Mutate Interbranch properties on the given `Order`.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.Interbranch.UpdateInterbranchOrder",
        "description": "Mutate Interbranch properties on the given `Order`.",
        "operationId": "UpdateInterbranchOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.Interbranch.UpdateInterbranchOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateInterbranchOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetGiftWrappingOptionsOnOrder": {
      "summary": "SetGiftWrappingOptionsOnOrder",
      "description": "Set the GiftWrapping options on an Order.\n\nThere are 4 options:\n\n - Wrap the complete order: set `WrapOrder` to `true`\n - Wrap the complete order individually: set `WrapIndividually` to `true`\n - Wrap parts of the order: set `GiftWraps` with a set of wraps\n - Wrap nothing: set everything to `null`\n\nA `GiftWrap` consists out of an optional `Message` (could be printed on a card), an optional `GreetingCardProductID` and a set of `WrapLines`. A\n`WrapLine` has an `OrderLineID` and a `Quantity`.\n\nIf a `GreetingCardProductID` and/or `Message` is desired when the order should be completely wrapped, or without any giftwrapping at all, set these\nproperties on root level. In all other cases they should be set on the `GiftWraps`.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GiftWrapping.SetGiftWrappingOptionsOnOrder",
        "description": "Set the GiftWrapping options on an Order.\n\nThere are 4 options:\n\n - Wrap the complete order: set `WrapOrder` to `true`\n - Wrap the complete order individually: set `WrapIndividually` to `true`\n - Wrap parts of the order: set `GiftWraps` with a set of wraps\n - Wrap nothing: set everything to `null`\n\nA `GiftWrap` consists out of an optional `Message` (could be printed on a card), an optional `GreetingCardProductID` and a set of `WrapLines`. A\n`WrapLine` has an `OrderLineID` and a `Quantity`.\n\nIf a `GreetingCardProductID` and/or `Message` is desired when the order should be completely wrapped, or without any giftwrapping at all, set these\nproperties on root level. In all other cases they should be set on the `GiftWraps`.",
        "operationId": "SetGiftWrappingOptionsOnOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GiftWrapping.SetGiftWrappingOptionsOnOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetGiftWrappingOptionsOnOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetGiftWrappingOptionsForOrder": {
      "summary": "GetGiftWrappingOptionsForOrder",
      "description": "Get the GiftWrapping options for an Order.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GiftWrapping.GetGiftWrappingOptionsForOrder",
        "description": "Get the GiftWrapping options for an Order.",
        "operationId": "GetGiftWrappingOptionsForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GiftWrapping.GetGiftWrappingOptionsForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetGiftWrappingOptionsForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GiftWrapping.GetGiftWrappingOptionsForOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetAvailableGiftWrappingLinesForOrder": {
      "summary": "GetAvailableGiftWrappingLinesForOrder",
      "description": "Get the available GiftWrapping options for an Order.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.GiftWrapping.GetAvailableGiftWrappingLinesForOrder",
        "description": "Get the available GiftWrapping options for an Order.",
        "operationId": "GetAvailableGiftWrappingLinesForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.GiftWrapping.GetAvailableGiftWrappingLinesForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetAvailableGiftWrappingLinesForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.GiftWrapping.GetAvailableGiftWrappingLinesForOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DownloadInvoice": {
      "summary": "DownloadInvoice",
      "description": "This service is used only for downloading invoices.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.Documents.DownloadInvoice",
        "description": "This service is used only for downloading invoices.",
        "operationId": "DownloadInvoice",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.Documents.DownloadInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DownloadInvoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.ResourceResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DownloadOffer": {
      "summary": "DownloadOffer",
      "description": "This service is used only for downloading offers.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.Documents.DownloadOffer",
        "description": "This service is used only for downloading offers.",
        "operationId": "DownloadOffer",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.Documents.DownloadOffer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DownloadOffer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.ResourceWithBlobIDResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DownloadOrderConfirmation": {
      "summary": "DownloadOrderConfirmation",
      "description": "This service is used only for printing paper invoices.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.Documents.DownloadOrderConfirmation",
        "description": "This service is used only for printing paper invoices.",
        "operationId": "DownloadOrderConfirmation",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.Documents.DownloadOrderConfirmation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DownloadOrderConfirmation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.Documents.DownloadOrderConfirmationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/EmailInvoice": {
      "summary": "EmailInvoice",
      "description": "This service is used only for emailing invoices.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.Documents.EmailInvoice",
        "description": "This service is used only for emailing invoices.",
        "operationId": "EmailInvoice",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.Documents.EmailInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to EmailInvoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/EmailOrderConfirmation": {
      "summary": "EmailOrderConfirmation",
      "description": "This service is used only for printing paper invoices.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.Documents.EmailOrderConfirmation",
        "description": "This service is used only for printing paper invoices.",
        "operationId": "EmailOrderConfirmation",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.Documents.EmailOrderConfirmation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to EmailOrderConfirmation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetAvailableDocumentsForOrder": {
      "summary": "GetAvailableDocumentsForOrder",
      "description": "Returns a list of available outputs for an order by taking an `OrderID`.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.Documents.GetAvailableDocumentsForOrder",
        "description": "Returns a list of available outputs for an order by taking an `OrderID`.",
        "operationId": "GetAvailableDocumentsForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.Documents.GetAvailableDocumentsForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetAvailableDocumentsForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.Documents.GetAvailableDocumentsForOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/PrintPaperInvoice": {
      "summary": "PrintPaperInvoice",
      "description": "This service is used only for printing paper invoices.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.Documents.PrintPaperInvoice",
        "description": "This service is used only for printing paper invoices.",
        "operationId": "PrintPaperInvoice",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.Documents.PrintPaperInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to PrintPaperInvoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/PrintPaperOffer": {
      "summary": "PrintPaperOffer",
      "description": "This service is used only for printing offers.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.Documents.PrintPaperOffer",
        "description": "This service is used only for printing offers.",
        "operationId": "PrintPaperOffer",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.Documents.PrintPaperOffer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to PrintPaperOffer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/PrintPaperOrderConfirmation": {
      "summary": "PrintPaperOrderConfirmation",
      "description": "This service is used only for printing paper invoices.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.Documents.PrintPaperOrderConfirmation",
        "description": "This service is used only for printing paper invoices.",
        "operationId": "PrintPaperOrderConfirmation",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.Documents.PrintPaperOrderConfirmation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to PrintPaperOrderConfirmation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/PrintThermalGiftReceipt": {
      "summary": "PrintThermalGiftReceipt",
      "description": "Print a *gift* receipt; a regular receipt, but without any price- or payment details. This document is intended to accompany the purchase when gifted, so the recipient can return or exchange it without (direct) knowledge of the price.\n    The `Lines` property is optional, when omitted the entire order (from `OrderID`) will be printed. Also, `Name` and `Remark` are optional and intended for the gift recipient, only.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.Documents.PrintThermalGiftReceipt",
        "description": "Print a *gift* receipt; a regular receipt, but without any price- or payment details. This document is intended to accompany the purchase when gifted, so the recipient can return or exchange it without (direct) knowledge of the price.\n    The `Lines` property is optional, when omitted the entire order (from `OrderID`) will be printed. Also, `Name` and `Remark` are optional and intended for the gift recipient, only.",
        "operationId": "PrintThermalGiftReceipt",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.Documents.PrintThermalGiftReceipt"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to PrintThermalGiftReceipt",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/PrintThermalInvoice": {
      "summary": "PrintThermalInvoice",
      "description": "This is service is used only for printing thermal invoices.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.Documents.PrintThermalInvoice",
        "description": "This is service is used only for printing thermal invoices.",
        "operationId": "PrintThermalInvoice",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.Documents.PrintThermalInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to PrintThermalInvoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/PrintThermalOrderConfirmation": {
      "summary": "PrintThermalOrderConfirmation",
      "description": "The PrintThermalOrderConfirmation service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.Documents.PrintThermalOrderConfirmation",
        "description": "The PrintThermalOrderConfirmation service",
        "operationId": "PrintThermalOrderConfirmation",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.Documents.PrintThermalOrderConfirmation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to PrintThermalOrderConfirmation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ProduceDocuments": {
      "summary": "ProduceDocuments",
      "description": "The ProduceDocuments service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.Documents.ProduceDocuments",
        "description": "The ProduceDocuments service",
        "operationId": "ProduceDocuments",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.Documents.ProduceDocuments"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ProduceDocuments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.Documents.ProduceDocumentsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ProduceInvoice": {
      "summary": "ProduceInvoice",
      "description": "The ProduceInvoice service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.Documents.ProduceInvoice",
        "description": "The ProduceInvoice service",
        "operationId": "ProduceInvoice",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.Documents.ProduceInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ProduceInvoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.ResourceResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ProducePurchaseOrderDocument": {
      "summary": "ProducePurchaseOrderDocument",
      "description": "The ProducePurchaseOrderDocument service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.Documents.ProducePurchaseOrderDocument",
        "description": "The ProducePurchaseOrderDocument service",
        "operationId": "ProducePurchaseOrderDocument",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.Documents.ProducePurchaseOrderDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ProducePurchaseOrderDocument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.ResourceResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ProduceReceipt": {
      "summary": "ProduceReceipt",
      "description": "The ProduceReceipt service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.Documents.ProduceReceipt",
        "description": "The ProduceReceipt service",
        "operationId": "ProduceReceipt",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.Documents.ProduceReceipt"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ProduceReceipt",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.Documents.ProduceReceiptResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ProduceShipmentDocuments": {
      "summary": "ProduceShipmentDocuments",
      "description": "Generate shipment document for an order or shipment.\n\nIt is required to supply an `OrderID` or a `ShipmentID`.\n\nWhen using an `OrderID` it is also required to set the `LinesToShip`.\n\nWhen a `StationID` is supplied the documents will be printed, if not, the service will return urls for downloading the documents.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.Documents.ProduceShipmentDocuments",
        "description": "Generate shipment document for an order or shipment.\n\nIt is required to supply an `OrderID` or a `ShipmentID`.\n\nWhen using an `OrderID` it is also required to set the `LinesToShip`.\n\nWhen a `StationID` is supplied the documents will be printed, if not, the service will return urls for downloading the documents.",
        "operationId": "ProduceShipmentDocuments",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.Documents.ProduceShipmentDocuments"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ProduceShipmentDocuments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.Documents.ProduceShipmentDocumentsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateCustomOrderStatus": {
      "summary": "CreateCustomOrderStatus",
      "description": "Creates a custom order status which can be set on an order",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.CustomOrderStatusServices.CreateCustomOrderStatus",
        "description": "Creates a custom order status which can be set on an order",
        "operationId": "CreateCustomOrderStatus",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.CustomOrderStatusServices.CreateCustomOrderStatus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateCustomOrderStatus",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.CustomOrderStatusServices.CreateCustomOrderStatusResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteCustomOrderStatus": {
      "summary": "DeleteCustomOrderStatus",
      "description": "Deletes a custom order status",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.CustomOrderStatusServices.DeleteCustomOrderStatus",
        "description": "Deletes a custom order status",
        "operationId": "DeleteCustomOrderStatus",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.CustomOrderStatusServices.DeleteCustomOrderStatus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteCustomOrderStatus",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListCustomOrderStatus": {
      "summary": "ListCustomOrderStatus",
      "description": "The ListCustomOrderStatus service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.CustomOrderStatusServices.ListCustomOrderStatus",
        "description": "The ListCustomOrderStatus service",
        "operationId": "ListCustomOrderStatus",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.CustomOrderStatusServices.ListCustomOrderStatus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListCustomOrderStatus",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.CustomOrderStatusServices.ListCustomOrderStatusResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateCustomOrderStatus": {
      "summary": "UpdateCustomOrderStatus",
      "description": "Updates a custom order status",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.CustomOrderStatusServices.UpdateCustomOrderStatus",
        "description": "Updates a custom order status",
        "operationId": "UpdateCustomOrderStatus",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.CustomOrderStatusServices.UpdateCustomOrderStatus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateCustomOrderStatus",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateOrderCustomOrderStatus": {
      "summary": "UpdateOrderCustomOrderStatus",
      "description": "Set order custom status",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.CustomOrderStatusServices.UpdateOrderCustomOrderStatus",
        "description": "Set order custom status",
        "operationId": "UpdateOrderCustomOrderStatus",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.CustomOrderStatusServices.UpdateOrderCustomOrderStatus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateOrderCustomOrderStatus",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.CustomOrderStatusServices.UpdateOrderCustomOrderStatusResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetUnitPriceCorrectionReasons": {
      "summary": "GetUnitPriceCorrectionReasons",
      "description": "Get all unitPrice correction reasons",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.Corrections.GetUnitPriceCorrectionReasons",
        "description": "Get all unitPrice correction reasons",
        "operationId": "GetUnitPriceCorrectionReasons",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.Corrections.GetUnitPriceCorrectionReasons"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetUnitPriceCorrectionReasons",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.Corrections.GetUnitPriceCorrectionReasonsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CancelOrderLineFulfillments": {
      "summary": "CancelOrderLineFulfillments",
      "description": "Cancels the OrderFulfillmentLines for the given OrderID and provided OrderLineIDs.\nIt will cancel all not already cancelled OrderFulfillmentLines for the orderlines.\nThis will cause them to be re-routed and possible be fulfilled through another supplier or method.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Fulfillment.CancelOrderLineFulfillments",
        "description": "Cancels the OrderFulfillmentLines for the given OrderID and provided OrderLineIDs.\nIt will cancel all not already cancelled OrderFulfillmentLines for the orderlines.\nThis will cause them to be re-routed and possible be fulfilled through another supplier or method.",
        "operationId": "CancelOrderLineFulfillments",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Fulfillment.CancelOrderLineFulfillments"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CancelOrderLineFulfillments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetOrderFulfillmentOptions": {
      "summary": "GetOrderFulfillmentOptions",
      "description": "The GetOrderFulfillmentOptions service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Fulfillment.GetOrderFulfillmentOptions",
        "description": "The GetOrderFulfillmentOptions service",
        "operationId": "GetOrderFulfillmentOptions",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Fulfillment.GetOrderFulfillmentOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetOrderFulfillmentOptions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Fulfillment.GetOrderFulfillmentOptionsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetOrderFulfillment": {
      "summary": "GetOrderFulfillment",
      "description": "Gets the details of an OrderFulfillment, except for its Lines which can be paged in through ListOrderFulfillmentLines with a filter on OrderFulfillmentID.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Fulfillment.GetOrderFulfillment",
        "description": "Gets the details of an OrderFulfillment, except for its Lines which can be paged in through ListOrderFulfillmentLines with a filter on OrderFulfillmentID.",
        "operationId": "GetOrderFulfillment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Fulfillment.GetOrderFulfillment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetOrderFulfillment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Fulfillment.GetOrderFulfillmentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListOrderFulfillmentLines": {
      "summary": "ListOrderFulfillmentLines",
      "description": "Lists the OrderFulfillmentLines for a given OrderID or OrderFulfillmentID.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Fulfillment.ListOrderFulfillmentLines",
        "description": "Lists the OrderFulfillmentLines for a given OrderID or OrderFulfillmentID.",
        "operationId": "ListOrderFulfillmentLines",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Fulfillment.ListOrderFulfillmentLines"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListOrderFulfillmentLines",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Fulfillment.ListOrderFulfillmentLinesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListOrderFulfillmentRejections": {
      "summary": "ListOrderFulfillmentRejections",
      "description": "List fulfillment rejections for one order.\nFilter on: OrderID, SupplierOrganizationUnitID, OrderLineID, Reason, FulfillmentMethod",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Fulfillment.ListOrderFulfillmentRejections",
        "description": "List fulfillment rejections for one order.\nFilter on: OrderID, SupplierOrganizationUnitID, OrderLineID, Reason, FulfillmentMethod",
        "operationId": "ListOrderFulfillmentRejections",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Fulfillment.ListOrderFulfillmentRejections"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListOrderFulfillmentRejections",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Fulfillment.ListOrderFulfillmentRejectionsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListOrderFulfillments": {
      "summary": "ListOrderFulfillments",
      "description": "Lists OrderFulfillments, optionally filtered.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Fulfillment.ListOrderFulfillments",
        "description": "Lists OrderFulfillments, optionally filtered.",
        "operationId": "ListOrderFulfillments",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Fulfillment.ListOrderFulfillments"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListOrderFulfillments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Fulfillment.ListOrderFulfillmentsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetOrderFulfillmentOptions": {
      "summary": "SetOrderFulfillmentOptions",
      "description": "The SetOrderFulfillmentOptions service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Fulfillment.SetOrderFulfillmentOptions",
        "description": "The SetOrderFulfillmentOptions service",
        "operationId": "SetOrderFulfillmentOptions",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Fulfillment.SetOrderFulfillmentOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetOrderFulfillmentOptions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ShipOrderFulfillment": {
      "summary": "ShipOrderFulfillment",
      "description": "Ships an OrderFulfillment, thereby creating one or more Shipments for the underlying Order.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Fulfillment.ShipOrderFulfillment",
        "description": "Ships an OrderFulfillment, thereby creating one or more Shipments for the underlying Order.",
        "operationId": "ShipOrderFulfillment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Fulfillment.ShipOrderFulfillment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ShipOrderFulfillment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Fulfillment.ShipOrderFulfillmentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateOrderFulfillmentLine": {
      "summary": "UpdateOrderFulfillmentLine",
      "description": "Updates the price and/or quantity of a fulfillment line based on its ID.\n\nWhen modifying the quantity, it's not possible currently to increase the quantity, only to decrease it. The modification must also happen on the physical fulfillment line,\nthat is a fulfillment line with Type = Physical.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Fulfillment.UpdateOrderFulfillmentLine",
        "description": "Updates the price and/or quantity of a fulfillment line based on its ID.\n\nWhen modifying the quantity, it's not possible currently to increase the quantity, only to decrease it. The modification must also happen on the physical fulfillment line,\nthat is a fulfillment line with Type = Physical.",
        "operationId": "UpdateOrderFulfillmentLine",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Fulfillment.UpdateOrderFulfillmentLine"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateOrderFulfillmentLine",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ValidateOpeningHoursTemplate": {
      "summary": "ValidateOpeningHoursTemplate",
      "description": "Validate an OpeningHoursTemplate",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.nsOpeningHours.ValidateOpeningHoursTemplate",
        "description": "Validate an OpeningHoursTemplate",
        "operationId": "ValidateOpeningHoursTemplate",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.ValidateOpeningHoursTemplate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ValidateOpeningHoursTemplate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.ValidateOpeningHoursTemplateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateOpeningHoursTemplate": {
      "summary": "CreateOpeningHoursTemplate",
      "description": "Create a new OpeningHoursTemplate",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.nsOpeningHours.CreateOpeningHoursTemplate",
        "description": "Create a new OpeningHoursTemplate",
        "operationId": "CreateOpeningHoursTemplate",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.CreateOpeningHoursTemplate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateOpeningHoursTemplate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.CreateOpeningHoursTemplateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateOpeningHoursTemplate": {
      "summary": "UpdateOpeningHoursTemplate",
      "description": "Update an existing OpeningHoursTemplate",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.nsOpeningHours.UpdateOpeningHoursTemplate",
        "description": "Update an existing OpeningHoursTemplate",
        "operationId": "UpdateOpeningHoursTemplate",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.UpdateOpeningHoursTemplate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateOpeningHoursTemplate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.ValidateOpeningHoursTemplateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteOpeningHoursTemplate": {
      "summary": "DeleteOpeningHoursTemplate",
      "description": "Delete an OpeningHoursTemplate",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.nsOpeningHours.DeleteOpeningHoursTemplate",
        "description": "Delete an OpeningHoursTemplate",
        "operationId": "DeleteOpeningHoursTemplate",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.DeleteOpeningHoursTemplate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteOpeningHoursTemplate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetSpecialDateOnOpeningHoursTemplate": {
      "summary": "SetSpecialDateOnOpeningHoursTemplate",
      "description": "Add or update a special date on an OpeningHoursTemplate",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.nsOpeningHours.SetSpecialDateOnOpeningHoursTemplate",
        "description": "Add or update a special date on an OpeningHoursTemplate",
        "operationId": "SetSpecialDateOnOpeningHoursTemplate",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.SetSpecialDateOnOpeningHoursTemplate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetSpecialDateOnOpeningHoursTemplate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/RemoveSpecialDateFromOpeningHoursTemplate": {
      "summary": "RemoveSpecialDateFromOpeningHoursTemplate",
      "description": "Remove a special date from an OpeningHoursTemplate",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.nsOpeningHours.RemoveSpecialDateFromOpeningHoursTemplate",
        "description": "Remove a special date from an OpeningHoursTemplate",
        "operationId": "RemoveSpecialDateFromOpeningHoursTemplate",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.RemoveSpecialDateFromOpeningHoursTemplate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to RemoveSpecialDateFromOpeningHoursTemplate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListOpeningHoursTemplates": {
      "summary": "ListOpeningHoursTemplates",
      "description": "List OpeningHoursTemplates",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.nsOpeningHours.ListOpeningHoursTemplates",
        "description": "List OpeningHoursTemplates",
        "operationId": "ListOpeningHoursTemplates",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.ListOpeningHoursTemplates"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListOpeningHoursTemplates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.ListOpeningHoursTemplatesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListOpeningHoursTemplatesOrganizationUnitSets": {
      "summary": "ListOpeningHoursTemplatesOrganizationUnitSets",
      "description": "List all the attached OrganizationUnitSets for OpeningHoursTemplates",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.nsOpeningHours.ListOpeningHoursTemplatesOrganizationUnitSets",
        "description": "List all the attached OrganizationUnitSets for OpeningHoursTemplates",
        "operationId": "ListOpeningHoursTemplatesOrganizationUnitSets",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.ListOpeningHoursTemplatesOrganizationUnitSets"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListOpeningHoursTemplatesOrganizationUnitSets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.ListOpeningHoursTemplatesOrganizationUnitSetsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetOpeningHoursTemplateByID": {
      "summary": "GetOpeningHoursTemplateByID",
      "description": "Get OpeningHoursTemplate by ID",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.nsOpeningHours.GetOpeningHoursTemplateByID",
        "description": "Get OpeningHoursTemplate by ID",
        "operationId": "GetOpeningHoursTemplateByID",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.GetOpeningHoursTemplateByID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetOpeningHoursTemplateByID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.GetOpeningHoursTemplateResponseByID"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/AttachOpeningHoursTemplateToOrganizationUnitSets": {
      "summary": "AttachOpeningHoursTemplateToOrganizationUnitSets",
      "description": "Attaches an OpeningHoursTemplate to the given OrganizationUnitSets.\nWhen `OverrideIfOpeningHoursTypeAlreadyAttached` is set to true, the service detaches the template of the same type before attaching the new template.\nWhen `OverrideIfOpeningHoursTypeAlreadyAttached` is set to false, the service will fail if one of the given OrganizationUnitSets is already attached to a OpeningHoursTemplate of the same Type.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.nsOpeningHours.AttachOpeningHoursTemplateToOrganizationUnitSets",
        "description": "Attaches an OpeningHoursTemplate to the given OrganizationUnitSets.\nWhen `OverrideIfOpeningHoursTypeAlreadyAttached` is set to true, the service detaches the template of the same type before attaching the new template.\nWhen `OverrideIfOpeningHoursTypeAlreadyAttached` is set to false, the service will fail if one of the given OrganizationUnitSets is already attached to a OpeningHoursTemplate of the same Type.",
        "operationId": "AttachOpeningHoursTemplateToOrganizationUnitSets",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.AttachOpeningHoursTemplateToOrganizationUnitSets"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to AttachOpeningHoursTemplateToOrganizationUnitSets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DetachOpeningHoursTemplateToOrganizationUnitSets": {
      "summary": "DetachOpeningHoursTemplateToOrganizationUnitSets",
      "description": "Attaches an OpeningHoursTemplate to the given OrganizationUnitSets.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.nsOpeningHours.DetachOpeningHoursTemplateToOrganizationUnitSets",
        "description": "Attaches an OpeningHoursTemplate to the given OrganizationUnitSets.",
        "operationId": "DetachOpeningHoursTemplateToOrganizationUnitSets",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.DetachOpeningHoursTemplateToOrganizationUnitSets"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DetachOpeningHoursTemplateToOrganizationUnitSets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetOrganizationUnitOpeningHours": {
      "summary": "GetOrganizationUnitOpeningHours",
      "description": "Get flattened organization unit opening hours",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.nsOpeningHours.GetOrganizationUnitOpeningHours",
        "description": "Get flattened organization unit opening hours",
        "operationId": "GetOrganizationUnitOpeningHours",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.GetOrganizationUnitOpeningHours"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetOrganizationUnitOpeningHours",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.GetOrganizationUnitOpeningHoursResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetDetailedOrganizationUnitOpeningHours": {
      "summary": "GetDetailedOrganizationUnitOpeningHours",
      "description": "Get detailed organization unit opening hours",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.nsOpeningHours.GetDetailedOrganizationUnitOpeningHours",
        "description": "Get detailed organization unit opening hours",
        "operationId": "GetDetailedOrganizationUnitOpeningHours",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.GetDetailedOrganizationUnitOpeningHours"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetDetailedOrganizationUnitOpeningHours",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.GetDetailedOrganizationUnitOpeningHoursResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetOrganizationUnitOpeningHoursForPeriod": {
      "summary": "GetOrganizationUnitOpeningHoursForPeriod",
      "description": "Gets the organization unit visiting opening hours for the given period.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.nsOpeningHours.GetOrganizationUnitOpeningHoursForPeriod",
        "description": "Gets the organization unit visiting opening hours for the given period.",
        "operationId": "GetOrganizationUnitOpeningHoursForPeriod",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.GetOrganizationUnitOpeningHoursForPeriod"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetOrganizationUnitOpeningHoursForPeriod",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.GetOrganizationUnitOpeningHoursForPeriodResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetOrganizationUnitOpeningHoursException": {
      "summary": "SetOrganizationUnitOpeningHoursException",
      "description": "Add or update an Organization's openinghours exception",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.nsOpeningHours.SetOrganizationUnitOpeningHoursException",
        "description": "Add or update an Organization's openinghours exception",
        "operationId": "SetOrganizationUnitOpeningHoursException",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.SetOrganizationUnitOpeningHoursException"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetOrganizationUnitOpeningHoursException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.ValidateOpeningHoursTemplateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/RemoveOrganizationUnitOpeningHoursException": {
      "summary": "RemoveOrganizationUnitOpeningHoursException",
      "description": "Remove an Organization's openinghours exception. When neither a DayOfWeek or Date is given, all openinghours exception for the given type will be removed and all openinghours will revert to the template value (if present).",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.nsOpeningHours.RemoveOrganizationUnitOpeningHoursException",
        "description": "Remove an Organization's openinghours exception. When neither a DayOfWeek or Date is given, all openinghours exception for the given type will be removed and all openinghours will revert to the template value (if present).",
        "operationId": "RemoveOrganizationUnitOpeningHoursException",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.RemoveOrganizationUnitOpeningHoursException"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to RemoveOrganizationUnitOpeningHoursException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetOpeningHoursTemplatesTranslationKeys": {
      "summary": "GetOpeningHoursTemplatesTranslationKeys",
      "description": "Get a list of all OpeningHoursTemplates translation keys for description translation.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.nsOpeningHours.GetOpeningHoursTemplatesTranslationKeys",
        "description": "Get a list of all OpeningHoursTemplates translation keys for description translation.",
        "operationId": "GetOpeningHoursTemplatesTranslationKeys",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.GetOpeningHoursTemplatesTranslationKeys"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetOpeningHoursTemplatesTranslationKeys",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.GetOpeningHoursTemplatesTranslationKeysResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListMessageQueueErrors": {
      "summary": "ListMessageQueueErrors",
      "description": "Lists the errors from the message queue.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.MessageQueue.ListMessageQueueErrors",
        "description": "Lists the errors from the message queue.",
        "operationId": "ListMessageQueueErrors",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.MessageQueue.ListMessageQueueErrors"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListMessageQueueErrors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.MessageQueue.ListMessageQueueErrorsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/RequeueErrorMessage": {
      "summary": "RequeueErrorMessage",
      "description": "Requeues specified error message(s).",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.MessageQueue.RequeueErrorMessage",
        "description": "Requeues specified error message(s).",
        "operationId": "RequeueErrorMessage",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.MessageQueue.RequeueErrorMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to RequeueErrorMessage",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/BookInvoice": {
      "summary": "BookInvoice",
      "description": "Books the given invoice by its `ID`.\n\nBooking an invoice has the side effect of creating a payment on the order for the amount of the invoice.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.BookInvoice",
        "description": "Books the given invoice by its `ID`.\n\nBooking an invoice has the side effect of creating a payment on the order for the amount of the invoice.",
        "operationId": "BookInvoice",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.BookInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to BookInvoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateInvoiceLines": {
      "summary": "CreateInvoiceLines",
      "description": "Creates lines on the given invoice (`InvoiceID`).\n\nIt is required to supply an OrderLine or a ShipmentLine. All other properties are optional and will be copied from the shipment-/order- line.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.CreateInvoiceLines",
        "description": "Creates lines on the given invoice (`InvoiceID`).\n\nIt is required to supply an OrderLine or a ShipmentLine. All other properties are optional and will be copied from the shipment-/order- line.",
        "operationId": "CreateInvoiceLines",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.CreateInvoiceLines"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateInvoiceLines",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateInvoice": {
      "summary": "CreateInvoice",
      "description": "Creates a new invoice for the given `OrganizationUnitID` (the one who writes the invoice)\nand the `SupplierOrganizationUnitID` (the one who receives good/services).\n\n- `InvoiceDate` is the date on which the invoice was created.\n- `InvoiceNumber` is the unique number for the invoice.\n- `Blobs` can contain PDF's or other media that can for example be a copy of the invoice\n- `OriginalTotalAmount` is the amount that is expected on the invoice. E.g. this can differ from the amount that is computed based on the invoice lines\n- `Type` indicates if this is an invoice for a sales or purchase orders",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.CreateInvoice",
        "description": "Creates a new invoice for the given `OrganizationUnitID` (the one who writes the invoice)\nand the `SupplierOrganizationUnitID` (the one who receives good/services).\n\n- `InvoiceDate` is the date on which the invoice was created.\n- `InvoiceNumber` is the unique number for the invoice.\n- `Blobs` can contain PDF's or other media that can for example be a copy of the invoice\n- `OriginalTotalAmount` is the amount that is expected on the invoice. E.g. this can differ from the amount that is computed based on the invoice lines\n- `Type` indicates if this is an invoice for a sales or purchase orders",
        "operationId": "CreateInvoice",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.CreateInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateInvoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.CreateInvoiceResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateInvoicesForOrder": {
      "summary": "CreateInvoicesForOrder",
      "description": "Create invoices for an Order. Optionally specify the specific lines with quantities.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.CreateInvoicesForOrder",
        "description": "Create invoices for an Order. Optionally specify the specific lines with quantities.",
        "operationId": "CreateInvoicesForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.CreateInvoicesForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateInvoicesForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.CreateInvoicesForOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateManualInvoice": {
      "summary": "CreateManualInvoice",
      "description": "Creates an order with a manually issued invoice. This will insert a committed Invoice with a custom sequencing number and additional\n`InvoiceManualData`. It will be fully paid with a custom payment type.\n\nThe specified Order will be paid, placed, shipped and completed, but without any additional side effects like stock ledgers or commitments.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.CreateManualInvoice",
        "description": "Creates an order with a manually issued invoice. This will insert a committed Invoice with a custom sequencing number and additional\n`InvoiceManualData`. It will be fully paid with a custom payment type.\n\nThe specified Order will be paid, placed, shipped and completed, but without any additional side effects like stock ledgers or commitments.",
        "operationId": "CreateManualInvoice",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.CreateManualInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateManualInvoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.CreateManualInvoiceResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteInvoice": {
      "summary": "DeleteInvoice",
      "description": "Deletes the given invoice. Note, can only delete invoices that have not been booked yet.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.DeleteInvoice",
        "description": "Deletes the given invoice. Note, can only delete invoices that have not been booked yet.",
        "operationId": "DeleteInvoice",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.DeleteInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteInvoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetInvoice": {
      "summary": "GetInvoice",
      "description": "Returns all the details of an invoice by its ID.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.GetInvoice",
        "description": "Returns all the details of an invoice by its ID.",
        "operationId": "GetInvoice",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.GetInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetInvoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.GetInvoiceResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateInvoiceAdditionalAmount": {
      "summary": "CreateInvoiceAdditionalAmount",
      "description": "Create an InvoiceAdditionalAmount",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.CreateInvoiceAdditionalAmount",
        "description": "Create an InvoiceAdditionalAmount",
        "operationId": "CreateInvoiceAdditionalAmount",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.CreateInvoiceAdditionalAmount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateInvoiceAdditionalAmount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.CreateInvoiceAdditionalAmountResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateInvoiceAdditionalAmount": {
      "summary": "UpdateInvoiceAdditionalAmount",
      "description": "Update an InvoiceAdditionalAmount",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.UpdateInvoiceAdditionalAmount",
        "description": "Update an InvoiceAdditionalAmount",
        "operationId": "UpdateInvoiceAdditionalAmount",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.UpdateInvoiceAdditionalAmount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateInvoiceAdditionalAmount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteInvoiceAdditionalAmount": {
      "summary": "DeleteInvoiceAdditionalAmount",
      "description": "Delete an InvoiceAdditionalAmount",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.DeleteInvoiceAdditionalAmount",
        "description": "Delete an InvoiceAdditionalAmount",
        "operationId": "DeleteInvoiceAdditionalAmount",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.DeleteInvoiceAdditionalAmount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteInvoiceAdditionalAmount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetInvoiceAdditionalAmountsForInvoice": {
      "summary": "GetInvoiceAdditionalAmountsForInvoice",
      "description": "Get all AdditionalAmounts for an Invoice",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.GetInvoiceAdditionalAmountsForInvoice",
        "description": "Get all AdditionalAmounts for an Invoice",
        "operationId": "GetInvoiceAdditionalAmountsForInvoice",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.GetInvoiceAdditionalAmountsForInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetInvoiceAdditionalAmountsForInvoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.GetInvoiceAdditionalAmountsForInvoiceResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetInvoiceAdditionalAmountTypeByID": {
      "summary": "GetInvoiceAdditionalAmountTypeByID",
      "description": "Get a InvoiceAdditionalAmountType by ID",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.GetInvoiceAdditionalAmountTypeByID",
        "description": "Get a InvoiceAdditionalAmountType by ID",
        "operationId": "GetInvoiceAdditionalAmountTypeByID",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.GetInvoiceAdditionalAmountTypeByID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetInvoiceAdditionalAmountTypeByID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.GetInvoiceAdditionalAmountTypeByIDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateInvoiceAdditionalAmountType": {
      "summary": "CreateInvoiceAdditionalAmountType",
      "description": "Create a InvoiceAdditionalAmountType",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.CreateInvoiceAdditionalAmountType",
        "description": "Create a InvoiceAdditionalAmountType",
        "operationId": "CreateInvoiceAdditionalAmountType",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.CreateInvoiceAdditionalAmountType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateInvoiceAdditionalAmountType",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.CreateInvoiceAdditionalAmountTypeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateInvoiceAdditionalAmountType": {
      "summary": "UpdateInvoiceAdditionalAmountType",
      "description": "Update the Description and LedgerClassID of a InvoiceAdditionalAmountType",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.UpdateInvoiceAdditionalAmountType",
        "description": "Update the Description and LedgerClassID of a InvoiceAdditionalAmountType",
        "operationId": "UpdateInvoiceAdditionalAmountType",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.UpdateInvoiceAdditionalAmountType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateInvoiceAdditionalAmountType",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteInvoiceAdditionalAmountType": {
      "summary": "DeleteInvoiceAdditionalAmountType",
      "description": "Delete a InvoiceAdditionalAmountType, this is only allowed if the type is never used",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.DeleteInvoiceAdditionalAmountType",
        "description": "Delete a InvoiceAdditionalAmountType, this is only allowed if the type is never used",
        "operationId": "DeleteInvoiceAdditionalAmountType",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.DeleteInvoiceAdditionalAmountType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteInvoiceAdditionalAmountType",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetInvoiceAdditionalAmountTypes": {
      "summary": "GetInvoiceAdditionalAmountTypes",
      "description": "Get all InvoiceAdditionalAmountTypes",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.GetInvoiceAdditionalAmountTypes",
        "description": "Get all InvoiceAdditionalAmountTypes",
        "operationId": "GetInvoiceAdditionalAmountTypes",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.GetInvoiceAdditionalAmountTypes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetInvoiceAdditionalAmountTypes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.GetInvoiceAdditionalAmountTypesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/AttachBlobToInvoice": {
      "summary": "AttachBlobToInvoice",
      "description": "The AttachBlobToInvoice service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.AttachBlobToInvoice",
        "description": "The AttachBlobToInvoice service",
        "operationId": "AttachBlobToInvoice",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.AttachBlobToInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to AttachBlobToInvoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteInvoiceBlob": {
      "summary": "DeleteInvoiceBlob",
      "description": "The DeleteInvoiceBlob service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.DeleteInvoiceBlob",
        "description": "The DeleteInvoiceBlob service",
        "operationId": "DeleteInvoiceBlob",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.DeleteInvoiceBlob"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteInvoiceBlob",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateOrUpdateInvoiceCompanyMapping": {
      "summary": "CreateOrUpdateInvoiceCompanyMapping",
      "description": "Provides a mapping between an organization unit and a company based on a country. This mapping is used in scenarios for where delivery orders are\nin play. E.g endless aisle (delivery order from a store) and an online order from a website for example.\n\nTo comply with regulations, these invoices that are generated require the tax registration number from the company that will be delivering the goods\nwith its specific registration from the country that the goods are send to.\n\nIf a mapping already exists for given `OrganizationUnitID` and `CountryID`, the `CompanyID` will be updated and `AlreadyExisted` in the response will be `true`.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.CreateOrUpdateInvoiceCompanyMapping",
        "description": "Provides a mapping between an organization unit and a company based on a country. This mapping is used in scenarios for where delivery orders are\nin play. E.g endless aisle (delivery order from a store) and an online order from a website for example.\n\nTo comply with regulations, these invoices that are generated require the tax registration number from the company that will be delivering the goods\nwith its specific registration from the country that the goods are send to.\n\nIf a mapping already exists for given `OrganizationUnitID` and `CountryID`, the `CompanyID` will be updated and `AlreadyExisted` in the response will be `true`.",
        "operationId": "CreateOrUpdateInvoiceCompanyMapping",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.CreateOrUpdateInvoiceCompanyMapping"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateOrUpdateInvoiceCompanyMapping",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.CreateOrUpdateInvoiceCompanyMappingResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListInvoiceCompanyMapping": {
      "summary": "ListInvoiceCompanyMapping",
      "description": "Lists the `InvoiceCompanyMapping` items.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.ListInvoiceCompanyMapping",
        "description": "Lists the `InvoiceCompanyMapping` items.",
        "operationId": "ListInvoiceCompanyMapping",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.ListInvoiceCompanyMapping"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListInvoiceCompanyMapping",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.ListInvoiceCompanyMappingResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteInvoiceCompanyMapping": {
      "summary": "DeleteInvoiceCompanyMapping",
      "description": "Deletes an `InvoiceCompanyMapping`.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.DeleteInvoiceCompanyMapping",
        "description": "Deletes an `InvoiceCompanyMapping`.",
        "operationId": "DeleteInvoiceCompanyMapping",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.DeleteInvoiceCompanyMapping"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteInvoiceCompanyMapping",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetInvoiceDisputeReasonByID": {
      "summary": "GetInvoiceDisputeReasonByID",
      "description": "Get a InvoiceDisputeReason by ID",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.GetInvoiceDisputeReasonByID",
        "description": "Get a InvoiceDisputeReason by ID",
        "operationId": "GetInvoiceDisputeReasonByID",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.GetInvoiceDisputeReasonByID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetInvoiceDisputeReasonByID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.GetInvoiceDisputeReasonByIDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateInvoiceDisputeReason": {
      "summary": "CreateInvoiceDisputeReason",
      "description": "Create a InvoiceDisputeReason",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.CreateInvoiceDisputeReason",
        "description": "Create a InvoiceDisputeReason",
        "operationId": "CreateInvoiceDisputeReason",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.CreateInvoiceDisputeReason"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateInvoiceDisputeReason",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.CreateInvoiceDisputeReasonResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateInvoiceDisputeReason": {
      "summary": "UpdateInvoiceDisputeReason",
      "description": "Update the Description and LedgerClassID of a InvoiceDisputeReason",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.UpdateInvoiceDisputeReason",
        "description": "Update the Description and LedgerClassID of a InvoiceDisputeReason",
        "operationId": "UpdateInvoiceDisputeReason",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.UpdateInvoiceDisputeReason"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateInvoiceDisputeReason",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteInvoiceDisputeReason": {
      "summary": "DeleteInvoiceDisputeReason",
      "description": "Delete a InvoiceDisputeReason, this is only allowed if the reason is never used",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.DeleteInvoiceDisputeReason",
        "description": "Delete a InvoiceDisputeReason, this is only allowed if the reason is never used",
        "operationId": "DeleteInvoiceDisputeReason",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.DeleteInvoiceDisputeReason"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteInvoiceDisputeReason",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetInvoiceDisputeReasons": {
      "summary": "GetInvoiceDisputeReasons",
      "description": "Get all InvoiceDisputeReasons",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.GetInvoiceDisputeReasons",
        "description": "Get all InvoiceDisputeReasons",
        "operationId": "GetInvoiceDisputeReasons",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.GetInvoiceDisputeReasons"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetInvoiceDisputeReasons",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.GetInvoiceDisputeReasonsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateInvoiceDisputeResolveAction": {
      "summary": "CreateInvoiceDisputeResolveAction",
      "description": "Create an InvoiceDisputeResolveAction",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.CreateInvoiceDisputeResolveAction",
        "description": "Create an InvoiceDisputeResolveAction",
        "operationId": "CreateInvoiceDisputeResolveAction",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.CreateInvoiceDisputeResolveAction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateInvoiceDisputeResolveAction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.CreateInvoiceDisputeResolveActionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateInvoiceDisputeResolveAction": {
      "summary": "UpdateInvoiceDisputeResolveAction",
      "description": "Update an InvoiceDisputeResolveAction",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.UpdateInvoiceDisputeResolveAction",
        "description": "Update an InvoiceDisputeResolveAction",
        "operationId": "UpdateInvoiceDisputeResolveAction",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.UpdateInvoiceDisputeResolveAction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateInvoiceDisputeResolveAction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteInvoiceDisputeResolveAction": {
      "summary": "DeleteInvoiceDisputeResolveAction",
      "description": "Delete an InvoiceDisputeResolveAction",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.DeleteInvoiceDisputeResolveAction",
        "description": "Delete an InvoiceDisputeResolveAction",
        "operationId": "DeleteInvoiceDisputeResolveAction",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.DeleteInvoiceDisputeResolveAction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteInvoiceDisputeResolveAction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateInvoiceDispute": {
      "summary": "CreateInvoiceDispute",
      "description": "Create an InvoiceDispute",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.CreateInvoiceDispute",
        "description": "Create an InvoiceDispute",
        "operationId": "CreateInvoiceDispute",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.CreateInvoiceDispute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateInvoiceDispute",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.CreateInvoiceDisputeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateInvoiceDispute": {
      "summary": "UpdateInvoiceDispute",
      "description": "Update an InvoiceDispute",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.UpdateInvoiceDispute",
        "description": "Update an InvoiceDispute",
        "operationId": "UpdateInvoiceDispute",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.UpdateInvoiceDispute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateInvoiceDispute",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteInvoiceDispute": {
      "summary": "DeleteInvoiceDispute",
      "description": "Delete an InvoiceDispute",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.DeleteInvoiceDispute",
        "description": "Delete an InvoiceDispute",
        "operationId": "DeleteInvoiceDispute",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.DeleteInvoiceDispute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteInvoiceDispute",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetInvoiceDisputesForInvoice": {
      "summary": "GetInvoiceDisputesForInvoice",
      "description": "Get all Disputes for an Invoice",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.GetInvoiceDisputesForInvoice",
        "description": "Get all Disputes for an Invoice",
        "operationId": "GetInvoiceDisputesForInvoice",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.GetInvoiceDisputesForInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetInvoiceDisputesForInvoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.GetInvoiceDisputesForInvoiceResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListInvoiceExportsForInvoice": {
      "summary": "ListInvoiceExportsForInvoice",
      "description": "List the exports for the given Invoice",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.ListInvoiceExportsForInvoice",
        "description": "List the exports for the given Invoice",
        "operationId": "ListInvoiceExportsForInvoice",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.ListInvoiceExportsForInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListInvoiceExportsForInvoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.ListInvoiceExportsForInvoiceResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetInvoiceExportByID": {
      "summary": "GetInvoiceExportByID",
      "description": "Get the details of an InvoiceExport",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.GetInvoiceExportByID",
        "description": "Get the details of an InvoiceExport",
        "operationId": "GetInvoiceExportByID",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.GetInvoiceExportByID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetInvoiceExportByID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.GetInvoiceExportByIDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/RetryInvoiceExport": {
      "summary": "RetryInvoiceExport",
      "description": "Retry the given InvoiceExport",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.RetryInvoiceExport",
        "description": "Retry the given InvoiceExport",
        "operationId": "RetryInvoiceExport",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.RetryInvoiceExport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to RetryInvoiceExport",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetInvoiceExportDocuments": {
      "summary": "GetInvoiceExportDocuments",
      "description": "Get the documents for an export when available",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.GetInvoiceExportDocuments",
        "description": "Get the documents for an export when available",
        "operationId": "GetInvoiceExportDocuments",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.GetInvoiceExportDocuments"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetInvoiceExportDocuments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.GetInvoiceExportDocumentsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetInvoiceOutputTypes": {
      "summary": "GetInvoiceOutputTypes",
      "description": "Service for retrieving a list of available `InvoiceOutputType`'s providing a `Invoice`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.GetInvoiceOutputTypes",
        "description": "Service for retrieving a list of available `InvoiceOutputType`'s providing a `Invoice`",
        "operationId": "GetInvoiceOutputTypes",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.GetInvoiceOutputTypes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetInvoiceOutputTypes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.GetInvoiceOutputTypesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetInvoicePayments": {
      "summary": "GetInvoicePayments",
      "description": "Retrieves payments for an order, with context about allocated invoices, filtered on specified optional `InvoiceID`.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.GetInvoicePayments",
        "description": "Retrieves payments for an order, with context about allocated invoices, filtered on specified optional `InvoiceID`.",
        "operationId": "GetInvoicePayments",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.GetInvoicePayments"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetInvoicePayments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.GetInvoicePaymentsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateInvoicePayment": {
      "summary": "CreateInvoicePayment",
      "description": "Allocates a payment transaction to either a specific invoice, or to all open invoices sequentially.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.CreateInvoicePayment",
        "description": "Allocates a payment transaction to either a specific invoice, or to all open invoices sequentially.",
        "operationId": "CreateInvoicePayment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.CreateInvoicePayment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateInvoicePayment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListBlobsForInvoice": {
      "summary": "ListBlobsForInvoice",
      "description": "List all the blobs that're attached to the given invoice (`InvoiceID`).",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.ListBlobsForInvoice",
        "description": "List all the blobs that're attached to the given invoice (`InvoiceID`).",
        "operationId": "ListBlobsForInvoice",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.ListBlobsForInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListBlobsForInvoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.ListBlobsForInvoiceResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListControlDocuments": {
      "summary": "ListControlDocuments",
      "description": "The ListControlDocuments service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.ListControlDocuments",
        "description": "The ListControlDocuments service",
        "operationId": "ListControlDocuments",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.ListControlDocuments"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListControlDocuments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.ListControlDocumentsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListInvoiceLedger": {
      "summary": "ListInvoiceLedger",
      "description": "List ledgers for invoices\n\nAvailable filters:\n- InvoiceID\n- InvoiceLineID\n- InvoiceDisputeID\n- Type",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.ListInvoiceLedger",
        "description": "List ledgers for invoices\n\nAvailable filters:\n- InvoiceID\n- InvoiceLineID\n- InvoiceDisputeID\n- Type",
        "operationId": "ListInvoiceLedger",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.ListInvoiceLedger"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListInvoiceLedger",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.ListInvoiceLedgerResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListInvoices": {
      "summary": "ListInvoices",
      "description": "The ListInvoices service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.ListInvoices",
        "description": "The ListInvoices service",
        "operationId": "ListInvoices",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.ListInvoices"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListInvoices",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.ListInvoicesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListManualInvoices": {
      "summary": "ListManualInvoices",
      "description": "List manually created invoices. These invoices are created via the `CreateManualInvoice` service and are used as a worst-case scenario when everything has gone offline and the retailer has to make invoices on actual paper. These services are then used to enter the paper invoices back in to EVA.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.ListManualInvoices",
        "description": "List manually created invoices. These invoices are created via the `CreateManualInvoice` service and are used as a worst-case scenario when everything has gone offline and the retailer has to make invoices on actual paper. These services are then used to enter the paper invoices back in to EVA.",
        "operationId": "ListManualInvoices",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.ListManualInvoices"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListManualInvoices",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.ListManualInvoicesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListShipmentLinesToInvoice": {
      "summary": "ListShipmentLinesToInvoice",
      "description": "List all of the lines of a shipment that have not been completely invoiced.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.ListShipmentLinesToInvoice",
        "description": "List all of the lines of a shipment that have not been completely invoiced.",
        "operationId": "ListShipmentLinesToInvoice",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.ListShipmentLinesToInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListShipmentLinesToInvoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.ListShipmentLinesToInvoiceResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListShipmentsToInvoice": {
      "summary": "ListShipmentsToInvoice",
      "description": "List all of the shipments that have not been completely invoiced.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.ListShipmentsToInvoice",
        "description": "List all of the shipments that have not been completely invoiced.",
        "operationId": "ListShipmentsToInvoice",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.ListShipmentsToInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListShipmentsToInvoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.ListShipmentsToInvoiceResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateInvoiceHoldStatus": {
      "summary": "UpdateInvoiceHoldStatus",
      "description": "The UpdateInvoiceHoldStatus service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.UpdateInvoiceHoldStatus",
        "description": "The UpdateInvoiceHoldStatus service",
        "operationId": "UpdateInvoiceHoldStatus",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.UpdateInvoiceHoldStatus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateInvoiceHoldStatus",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateInvoiceLines": {
      "summary": "UpdateInvoiceLines",
      "description": "Updates lines on the given invoice (`InvoiceID`).\n\nWhen the Quantity is 0 and the ExpectedQuantity is `null`, the line will be deleted.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.UpdateInvoiceLines",
        "description": "Updates lines on the given invoice (`InvoiceID`).\n\nWhen the Quantity is 0 and the ExpectedQuantity is `null`, the line will be deleted.",
        "operationId": "UpdateInvoiceLines",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.UpdateInvoiceLines"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateInvoiceLines",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateInvoice": {
      "summary": "UpdateInvoice",
      "description": "Updates an existing invoice. See the `CreateInvoice` service for more details about the request.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.UpdateInvoice",
        "description": "Updates an existing invoice. See the `CreateInvoice` service for more details about the request.",
        "operationId": "UpdateInvoice",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.UpdateInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateInvoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ValidateInvoiceNumber": {
      "summary": "ValidateInvoiceNumber",
      "description": "Check if given `InvoiceNumber` is valid (eg. does not already exist & passes other validations).",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Invoices.ValidateInvoiceNumber",
        "description": "Check if given `InvoiceNumber` is valid (eg. does not already exist & passes other validations).",
        "operationId": "ValidateInvoiceNumber",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Invoices.ValidateInvoiceNumber"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ValidateInvoiceNumber",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Invoices.ValidateInvoiceNumberResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GenerateDeviceHubBarcode": {
      "summary": "GenerateDeviceHubBarcode",
      "description": "Service for generating a new device hub barcode",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Interaction.GenerateDeviceHubBarcode",
        "description": "Service for generating a new device hub barcode",
        "operationId": "GenerateDeviceHubBarcode",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Interaction.GenerateDeviceHubBarcode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GenerateDeviceHubBarcode",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Interaction.GenerateDeviceHubBarcodeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GenerateScanModeBarcode": {
      "summary": "GenerateScanModeBarcode",
      "description": "Service for generating a new scan mode barcode",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Interaction.GenerateScanModeBarcode",
        "description": "Service for generating a new scan mode barcode",
        "operationId": "GenerateScanModeBarcode",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Interaction.GenerateScanModeBarcode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GenerateScanModeBarcode",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Interaction.GenerateScanModeBarcodeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GenerateSessionBarcode": {
      "summary": "GenerateSessionBarcode",
      "description": "Service for generating a new session barcode",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Interaction.GenerateSessionBarcode",
        "description": "Service for generating a new session barcode",
        "operationId": "GenerateSessionBarcode",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Interaction.GenerateSessionBarcode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GenerateSessionBarcode",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Interaction.GenerateSessionBarcodeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/RequestDeviceAuthenticationToken": {
      "summary": "RequestDeviceAuthenticationToken",
      "description": "Service for retrieving a device authentication token",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Interaction.RequestDeviceAuthenticationToken",
        "description": "Service for retrieving a device authentication token",
        "operationId": "RequestDeviceAuthenticationToken",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Interaction.RequestDeviceAuthenticationToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to RequestDeviceAuthenticationToken",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Interaction.RequestDeviceAuthenticationTokenResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetInquiry": {
      "summary": "GetInquiry",
      "description": "Returns inquiry details",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Inquiries.GetInquiry",
        "description": "Returns inquiry details",
        "operationId": "GetInquiry",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Inquiries.GetInquiry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetInquiry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Inquiries.GetInquiryResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SubmitInquiry": {
      "summary": "SubmitInquiry",
      "description": "Submit an inquiry",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Inquiries.SubmitInquiry",
        "description": "Submit an inquiry",
        "operationId": "SubmitInquiry",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Inquiries.SubmitInquiry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SubmitInquiry",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetDevice": {
      "summary": "GetDevice",
      "description": "Service for retrieving a existing `Device`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Infrastructure.GetDevice",
        "description": "Service for retrieving a existing `Device`",
        "operationId": "GetDevice",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Infrastructure.GetDevice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetDevice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Infrastructure.GetDeviceResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetDeviceTypes": {
      "summary": "GetDeviceTypes",
      "description": "Service for retrieving a list of possible `Device` types",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Infrastructure.GetDeviceTypes",
        "description": "Service for retrieving a list of possible `Device` types",
        "operationId": "GetDeviceTypes",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Infrastructure.GetDeviceTypes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetDeviceTypes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Infrastructure.GetDeviceTypesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetOpenCashDrawerReasons": {
      "summary": "GetOpenCashDrawerReasons",
      "description": "Gets the possible valid reasons that have been defined for opening the cash drawer manually.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Infrastructure.GetOpenCashDrawerReasons",
        "description": "Gets the possible valid reasons that have been defined for opening the cash drawer manually.",
        "operationId": "GetOpenCashDrawerReasons",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Infrastructure.GetOpenCashDrawerReasons"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetOpenCashDrawerReasons",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Infrastructure.GetOpenCashDrawerReasonsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetStation": {
      "summary": "GetStation",
      "description": "Service for retieving a existing `Station`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Infrastructure.GetStation",
        "description": "Service for retieving a existing `Station`",
        "operationId": "GetStation",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Infrastructure.GetStation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetStation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Infrastructure.GetStationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListDevices": {
      "summary": "ListDevices",
      "description": "Service for retrieving a list of `Device`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Infrastructure.ListDevices",
        "description": "Service for retrieving a list of `Device`",
        "operationId": "ListDevices",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Infrastructure.ListDevices"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListDevices",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Infrastructure.ListDevicesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListStationsForOrganizationUnit": {
      "summary": "ListStationsForOrganizationUnit",
      "description": "List stations for specified organization unit.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Infrastructure.ListStationsForOrganizationUnit",
        "description": "List stations for specified organization unit.",
        "operationId": "ListStationsForOrganizationUnit",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Infrastructure.ListStationsForOrganizationUnit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListStationsForOrganizationUnit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Infrastructure.ListStationsForOrganizationUnitResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ScanStation": {
      "summary": "ScanStation",
      "description": "The ScanStation service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Infrastructure.ScanStation",
        "description": "The ScanStation service",
        "operationId": "ScanStation",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Infrastructure.ScanStation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ScanStation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Infrastructure.SelectStationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SendConfigurationPage": {
      "summary": "SendConfigurationPage",
      "description": "The SendConfigurationPage service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Infrastructure.SendConfigurationPage",
        "description": "The SendConfigurationPage service",
        "operationId": "SendConfigurationPage",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Infrastructure.SendConfigurationPage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SendConfigurationPage",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/AddDigitalGiftCardToOrder": {
      "summary": "AddDigitalGiftCardToOrder",
      "description": "A specific implementation for `AddProductToOrder` for GiftCards. Adds a new order line for a digital GiftCard to specified order, where\n`OrderID` identifies the order for the customer and `Amount` is the desired amount to create a GiftCard for.\n\nOptionally supply a `DetailsUrl` pointing to the website you want the buyer of the GiftCard to land to see/manage the order.\n\nAdditionally, the `DisplayOptions` property need to be supplied, this contains a bunch of default options to personalize the giftcard.\nIt is also possible to provide some Metadata. We won't do any processing on DisplayOptions.\n\nExcept: DetailsUrl will be changed to include the `OrderID` in the URL as well as a `token` that can be used to access a few services.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.GiftCards.AddDigitalGiftCardToOrder",
        "description": "A specific implementation for `AddProductToOrder` for GiftCards. Adds a new order line for a digital GiftCard to specified order, where\n`OrderID` identifies the order for the customer and `Amount` is the desired amount to create a GiftCard for.\n\nOptionally supply a `DetailsUrl` pointing to the website you want the buyer of the GiftCard to land to see/manage the order.\n\nAdditionally, the `DisplayOptions` property need to be supplied, this contains a bunch of default options to personalize the giftcard.\nIt is also possible to provide some Metadata. We won't do any processing on DisplayOptions.\n\nExcept: DetailsUrl will be changed to include the `OrderID` in the URL as well as a `token` that can be used to access a few services.",
        "operationId": "AddDigitalGiftCardToOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.GiftCards.AddDigitalGiftCardToOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to AddDigitalGiftCardToOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CardBalanceCheck": {
      "summary": "CardBalanceCheck",
      "description": "Checks a balance of given card, where `Handler` or `Barcode` determines the giftcard provider to consult.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.GiftCards.CardBalanceCheck",
        "description": "Checks a balance of given card, where `Handler` or `Barcode` determines the giftcard provider to consult.",
        "operationId": "CardBalanceCheck",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.GiftCards.CardBalanceCheck"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CardBalanceCheck",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.GiftCards.CardBalanceCheckResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetDigitalGiftCardOptions": {
      "summary": "GetDigitalGiftCardOptions",
      "description": "Gets the GiftCard mail information identified by the `OrderID` and `GiftCardID`.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.GiftCards.GetDigitalGiftCardOptions",
        "description": "Gets the GiftCard mail information identified by the `OrderID` and `GiftCardID`.",
        "operationId": "GetDigitalGiftCardOptions",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.GiftCards.GetDigitalGiftCardOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetDigitalGiftCardOptions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.GiftCards.GetDigitalGiftCardOptionsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateDigitalGiftCardOptions": {
      "summary": "UpdateDigitalGiftCardOptions",
      "description": "Sets the new mail values for the GiftCard identified by the `OrderID` and `GiftCardID`.\n\nIf you do not specify the `FromEmailAddress` parameter, we will default to the Order.Customer.EmailAddress.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.GiftCards.UpdateDigitalGiftCardOptions",
        "description": "Sets the new mail values for the GiftCard identified by the `OrderID` and `GiftCardID`.\n\nIf you do not specify the `FromEmailAddress` parameter, we will default to the Order.Customer.EmailAddress.",
        "operationId": "UpdateDigitalGiftCardOptions",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.GiftCards.UpdateDigitalGiftCardOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateDigitalGiftCardOptions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DownloadDigitalGiftCard": {
      "summary": "DownloadDigitalGiftCard",
      "description": "Download the GiftCard data for a specific order, based on given `OrderID` and `GiftCardID`. This order needs to be visible for the current user. Requires\nthe order to be shipped (automatically when it is fully paid).\n\nAdditionally, this service can be called with an `AccessToken` and `GiftCardID` combination. In this case, no user validation is done - you know both\nkeys to the GiftCard, so you are allowed to get it's information.\n\nIf you want, you can specify a `LanguageID` to use for rendering the report - when omitted, the `LanguageID` of the current user.\n\nSee `GetDigitalGiftCardsForOrder` service for more details.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.GiftCards.DownloadDigitalGiftCard",
        "description": "Download the GiftCard data for a specific order, based on given `OrderID` and `GiftCardID`. This order needs to be visible for the current user. Requires\nthe order to be shipped (automatically when it is fully paid).\n\nAdditionally, this service can be called with an `AccessToken` and `GiftCardID` combination. In this case, no user validation is done - you know both\nkeys to the GiftCard, so you are allowed to get it's information.\n\nIf you want, you can specify a `LanguageID` to use for rendering the report - when omitted, the `LanguageID` of the current user.\n\nSee `GetDigitalGiftCardsForOrder` service for more details.",
        "operationId": "DownloadDigitalGiftCard",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.GiftCards.DownloadDigitalGiftCard"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DownloadDigitalGiftCard",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.ResourceResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetDigitalGiftCardsForOrder": {
      "summary": "GetDigitalGiftCardsForOrder",
      "description": "Retrieve the GiftCard data for a specific order, based on given `OrderID`. This order needs to be visible for the current user.\n\nWill return a list of `GiftCard` data, for every orderline with a GiftCard. Will return the same data supplied in the `AddGiftCardToOrder`\nservice. When the order was shipped (automatically when it is fully paid), the details `GiftCardNumber` and\n`Pin` are also included. An additional property `IsAvailable` let's you check if it was indeed shipped and paid.\n\nThe `GiftCardID` returned on the GiftCard is it's unique identifier, to be used in conjunction with the `AccessToken` to make it globally\nunique. Using the `AccessToken` and `GiftCardID`, we are pretty sure you are allowed to see the GiftCard data. Use this data to build the link\nto share directly, or use the approperiate services to mail/text/print this.\n\nAdditionally, this service can be called with an `AccessToken` and `GiftCardID` combination, as explained above. In this case, no user validation\nis done - you know both keys to the GiftCard, so you are allowed to get it's information.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.GiftCards.GetDigitalGiftCardsForOrder",
        "description": "Retrieve the GiftCard data for a specific order, based on given `OrderID`. This order needs to be visible for the current user.\n\nWill return a list of `GiftCard` data, for every orderline with a GiftCard. Will return the same data supplied in the `AddGiftCardToOrder`\nservice. When the order was shipped (automatically when it is fully paid), the details `GiftCardNumber` and\n`Pin` are also included. An additional property `IsAvailable` let's you check if it was indeed shipped and paid.\n\nThe `GiftCardID` returned on the GiftCard is it's unique identifier, to be used in conjunction with the `AccessToken` to make it globally\nunique. Using the `AccessToken` and `GiftCardID`, we are pretty sure you are allowed to see the GiftCard data. Use this data to build the link\nto share directly, or use the approperiate services to mail/text/print this.\n\nAdditionally, this service can be called with an `AccessToken` and `GiftCardID` combination, as explained above. In this case, no user validation\nis done - you know both keys to the GiftCard, so you are allowed to get it's information.",
        "operationId": "GetDigitalGiftCardsForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.GiftCards.GetDigitalGiftCardsForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetDigitalGiftCardsForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.GiftCards.GetDigitalGiftCardsForOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetGiftCardOptions": {
      "summary": "GetGiftCardOptions",
      "description": "Fetch the options for a giftcard. To determine the value ranges, currency etc.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.GiftCards.GetGiftCardOptions",
        "description": "Fetch the options for a giftcard. To determine the value ranges, currency etc.",
        "operationId": "GetGiftCardOptions",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.GiftCards.GetGiftCardOptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetGiftCardOptions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.GiftCards.GetGiftCardOptionsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateDigitalGiftCardOrderLine": {
      "summary": "UpdateDigitalGiftCardOrderLine",
      "description": "This service allows updating giftcard lines created with the `AddGiftCardToOrder` service.\n\nAdditionally, the `DisplayOptions` property need to be supplied;\n\n * `From` and `To` are the names of the sender and recipient of this gift, respectively\n * `Text` is an additional text to be included on the GiftCard and presented to the recipient (optional)\n\n * `ImageWidth` and `ImageHeight` describe the image used",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.GiftCards.UpdateDigitalGiftCardOrderLine",
        "description": "This service allows updating giftcard lines created with the `AddGiftCardToOrder` service.\n\nAdditionally, the `DisplayOptions` property need to be supplied;\n\n * `From` and `To` are the names of the sender and recipient of this gift, respectively\n * `Text` is an additional text to be included on the GiftCard and presented to the recipient (optional)\n\n * `ImageWidth` and `ImageHeight` describe the image used",
        "operationId": "UpdateDigitalGiftCardOrderLine",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.GiftCards.UpdateDigitalGiftCardOrderLine"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateDigitalGiftCardOrderLine",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetExternalFullStockCountResult": {
      "summary": "SetExternalFullStockCountResult",
      "description": "Set the external full stock count result.\nThe service accepts partial or full result lists.\nThe service requires a ActualCompletionTime. There can only be one completion time. The value will be updated with every service call.\n\nCountResults must either have ProductID (preferred) or ProductBarcode.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.FullStockCountServices.SetExternalFullStockCountResult",
        "description": "Set the external full stock count result.\nThe service accepts partial or full result lists.\nThe service requires a ActualCompletionTime. There can only be one completion time. The value will be updated with every service call.\n\nCountResults must either have ProductID (preferred) or ProductBarcode.",
        "operationId": "SetExternalFullStockCountResult",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.FullStockCountServices.SetExternalFullStockCountResult"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetExternalFullStockCountResult",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DownloadExternalFullStockCountResultTemplate": {
      "summary": "DownloadExternalFullStockCountResultTemplate",
      "description": "Download a template format for the full stock count result to upload.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.FullStockCountServices.DownloadExternalFullStockCountResultTemplate",
        "description": "Download a template format for the full stock count result to upload.",
        "operationId": "DownloadExternalFullStockCountResultTemplate",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.FullStockCountServices.DownloadExternalFullStockCountResultTemplate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DownloadExternalFullStockCountResultTemplate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.ResourceResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UploadExternalFullStockCountResult": {
      "summary": "UploadExternalFullStockCountResult",
      "description": "Upload full stock count result. Previous uploads will be overwritten. The service processes the data async.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.FullStockCountServices.UploadExternalFullStockCountResult",
        "description": "Upload full stock count result. Previous uploads will be overwritten. The service processes the data async.",
        "operationId": "UploadExternalFullStockCountResult",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.FullStockCountServices.UploadExternalFullStockCountResult"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UploadExternalFullStockCountResult",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetCashCorrection": {
      "summary": "GetCashCorrection",
      "description": "Retrieves details of a cash correction",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.GetCashCorrection",
        "description": "Retrieves details of a cash correction",
        "operationId": "GetCashCorrection",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.GetCashCorrection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetCashCorrection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.GetCashCorrectionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateCashDeposit": {
      "summary": "CreateCashDeposit",
      "description": "Creates a cash deposit for the provided device, currency and payment type.\n\nWhen not explicitly delaying the drop-off, it will be booked to the current active cash journal and financial period.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.CreateCashDeposit",
        "description": "Creates a cash deposit for the provided device, currency and payment type.\n\nWhen not explicitly delaying the drop-off, it will be booked to the current active cash journal and financial period.",
        "operationId": "CreateCashDeposit",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.CreateCashDeposit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateCashDeposit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.CreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListCashDeposits": {
      "summary": "ListCashDeposits",
      "description": "Lists all cash deposits for your current financial period.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.ListCashDeposits",
        "description": "Lists all cash deposits for your current financial period.",
        "operationId": "ListCashDeposits",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.ListCashDeposits"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListCashDeposits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.ListCashDepositsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteCashDeposit": {
      "summary": "DeleteCashDeposit",
      "description": "Deletes a deposit for the given `ID`.\n\nCash deposits in status Pending (`-1`) can always be removed, status Done (`0`) (\"Dropped-off\") requires the cash journal and the financial period to still be open.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.DeleteCashDeposit",
        "description": "Deletes a deposit for the given `ID`.\n\nCash deposits in status Pending (`-1`) can always be removed, status Done (`0`) (\"Dropped-off\") requires the cash journal and the financial period to still be open.",
        "operationId": "DeleteCashDeposit",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.DeleteCashDeposit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteCashDeposit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DropOffCashDeposit": {
      "summary": "DropOffCashDeposit",
      "description": "Drops-off a cash deposit previously created and stored on a device (`CreateCashDeposit.DelayDropOff`).\n\nCash deposits created this way will remain in status Pending (`-1`) until it is either dropped-off (`DropOffCashDeposit`) or deleted (`DeleteCashDeposit`). Whilst\npending, it will not create any events, will not be attached to any `CashTransactionLedger` and therefor will not be attached to any `FinancialPeriod`. You can find\nthese pending cash deposits using `ListCashDeposits`, but then only when filtering for a `DeviceID` and/or `OrganizationUnitID` (and optionally `StatusID`).",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.DropOffCashDeposit",
        "description": "Drops-off a cash deposit previously created and stored on a device (`CreateCashDeposit.DelayDropOff`).\n\nCash deposits created this way will remain in status Pending (`-1`) until it is either dropped-off (`DropOffCashDeposit`) or deleted (`DeleteCashDeposit`). Whilst\npending, it will not create any events, will not be attached to any `CashTransactionLedger` and therefor will not be attached to any `FinancialPeriod`. You can find\nthese pending cash deposits using `ListCashDeposits`, but then only when filtering for a `DeviceID` and/or `OrganizationUnitID` (and optionally `StatusID`).",
        "operationId": "DropOffCashDeposit",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.DropOffCashDeposit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DropOffCashDeposit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ProduceCashDepositDocument": {
      "summary": "ProduceCashDepositDocument",
      "description": "Service for producing a cash deposit document",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.ProduceCashDepositDocument",
        "description": "Service for producing a cash deposit document",
        "operationId": "ProduceCashDepositDocument",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.ProduceCashDepositDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ProduceCashDepositDocument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetCashDeposit": {
      "summary": "GetCashDeposit",
      "description": "Retrieves details of a cash deposit",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.GetCashDeposit",
        "description": "Retrieves details of a cash deposit",
        "operationId": "GetCashDeposit",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.GetCashDeposit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetCashDeposit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.GetCashDepositResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateCashExpense": {
      "summary": "CreateCashExpense",
      "description": "Creates a cash expense.\n\nThis service expects:\n- `DeviceID`, which is the cash device the money was used from.\n- `TypeID` which is one of the available expense types.\n- An `Amount`, which is the amount of cash that was taken from or added to the device.\nThe amount should always be positive, but the semantics of the amount depends on the AmountType of the ExpenseType:\nif ExpenseType.AmountType = Expense, then the amount is booked as an expense, if it's Income then it's booked as income. Either way, it should be a positive number.\n- A `TaxCodeID`, which refers to one of the available tax codes.\n- A `Description`, which is the reason for this expense (for example: 'lunch').\n- A `BlobID`, which contains an image of the receipt.\n- A `SignatureBlobID`, which contains an image of the signature",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.CreateCashExpense",
        "description": "Creates a cash expense.\n\nThis service expects:\n- `DeviceID`, which is the cash device the money was used from.\n- `TypeID` which is one of the available expense types.\n- An `Amount`, which is the amount of cash that was taken from or added to the device.\nThe amount should always be positive, but the semantics of the amount depends on the AmountType of the ExpenseType:\nif ExpenseType.AmountType = Expense, then the amount is booked as an expense, if it's Income then it's booked as income. Either way, it should be a positive number.\n- A `TaxCodeID`, which refers to one of the available tax codes.\n- A `Description`, which is the reason for this expense (for example: 'lunch').\n- A `BlobID`, which contains an image of the receipt.\n- A `SignatureBlobID`, which contains an image of the signature",
        "operationId": "CreateCashExpense",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.CreateCashExpense"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateCashExpense",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListCashExpenses": {
      "summary": "ListCashExpenses",
      "description": "Lists all cash expenses for your current financial period.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.ListCashExpenses",
        "description": "Lists all cash expenses for your current financial period.",
        "operationId": "ListCashExpenses",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.ListCashExpenses"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListCashExpenses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.ListCashExpensesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteCashExpense": {
      "summary": "DeleteCashExpense",
      "description": "Deletes an expense for the given `ID`. This is only possible while the cash journal and the financial period are still open.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.DeleteCashExpense",
        "description": "Deletes an expense for the given `ID`. This is only possible while the cash journal and the financial period are still open.",
        "operationId": "DeleteCashExpense",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.DeleteCashExpense"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteCashExpense",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ProduceCashExpenseDocument": {
      "summary": "ProduceCashExpenseDocument",
      "description": "Service for producing a cash expense document",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.ProduceCashExpenseDocument",
        "description": "Service for producing a cash expense document",
        "operationId": "ProduceCashExpenseDocument",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.ProduceCashExpenseDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ProduceCashExpenseDocument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetCashExpense": {
      "summary": "GetCashExpense",
      "description": "Retrieves details of a cash expense",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.GetCashExpense",
        "description": "Retrieves details of a cash expense",
        "operationId": "GetCashExpense",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.GetCashExpense"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetCashExpense",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.GetCashExpenseResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/StartOpenCashJournal": {
      "summary": "StartOpenCashJournal",
      "description": "Starts the opening of a cash journal for the given DeviceID.\n\nIt's only possible to open a cash journal when an open financial period exists and when the device is a cash device. Retrieving a list of valid devices\ncan be accomplished through the `ListDevices` service.\n\nCalling this service does not yet do anything, except return the data you need to open a cash journal:\n\n- The available denominations (coins and notes)\n- The details about the previous cash journal's closing amounts (if it exists), which can be used as an extra check\n- Possible pending cash deposits on this device",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.StartOpenCashJournal",
        "description": "Starts the opening of a cash journal for the given DeviceID.\n\nIt's only possible to open a cash journal when an open financial period exists and when the device is a cash device. Retrieving a list of valid devices\ncan be accomplished through the `ListDevices` service.\n\nCalling this service does not yet do anything, except return the data you need to open a cash journal:\n\n- The available denominations (coins and notes)\n- The details about the previous cash journal's closing amounts (if it exists), which can be used as an extra check\n- Possible pending cash deposits on this device",
        "operationId": "StartOpenCashJournal",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.StartOpenCashJournal"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to StartOpenCashJournal",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.StartOpenCashJournalResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CompleteOpenCashJournal": {
      "summary": "CompleteOpenCashJournal",
      "description": "Completes the opening of a cash journal. After this service has been called, it's possible to make cash transactions on this device.\n\nThis service expects a list of the coins and notes that were counted.\n\nWhen the opening amount is different from last period's closing amount, it's required that a correction is provided for this difference\nin `OpeningDeviationCorrection`. This simply consists of a description and an amount.\n\nFor cash journals that either do not use or ignore cash journals, most properties will automatically be set to the expected amounts. Should you\nwant to enforce validation, regardless, specify the `ForceValidation` as `true`.\n\nPending cash deposits need to be accounted for as well - supply their `ID`s as `PendingCashDeposits`. Do not add the `Amount` of cash deposits\nto the `TotalAmount`, as the user cannot usually verify the cash deposit content.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.CompleteOpenCashJournal",
        "description": "Completes the opening of a cash journal. After this service has been called, it's possible to make cash transactions on this device.\n\nThis service expects a list of the coins and notes that were counted.\n\nWhen the opening amount is different from last period's closing amount, it's required that a correction is provided for this difference\nin `OpeningDeviationCorrection`. This simply consists of a description and an amount.\n\nFor cash journals that either do not use or ignore cash journals, most properties will automatically be set to the expected amounts. Should you\nwant to enforce validation, regardless, specify the `ForceValidation` as `true`.\n\nPending cash deposits need to be accounted for as well - supply their `ID`s as `PendingCashDeposits`. Do not add the `Amount` of cash deposits\nto the `TotalAmount`, as the user cannot usually verify the cash deposit content.",
        "operationId": "CompleteOpenCashJournal",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.CompleteOpenCashJournal"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CompleteOpenCashJournal",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/StartCloseCashJournal": {
      "summary": "StartCloseCashJournal",
      "description": "Initiates the closing of a cash journal. This does not yet mutate anything, but returns all the details you need about a cash journal to be able to close it.\n\nThis consists of:\n\n- The information about the device and station\n- Which expenses and deposits were made from this device.\n- What payments were made.\n- What the `ExpectedClosingAmount` is, which is a summary of the previous journal's closing amount plus all transactions.\n- Possible pending cash deposits on this device",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.StartCloseCashJournal",
        "description": "Initiates the closing of a cash journal. This does not yet mutate anything, but returns all the details you need about a cash journal to be able to close it.\n\nThis consists of:\n\n- The information about the device and station\n- Which expenses and deposits were made from this device.\n- What payments were made.\n- What the `ExpectedClosingAmount` is, which is a summary of the previous journal's closing amount plus all transactions.\n- Possible pending cash deposits on this device",
        "operationId": "StartCloseCashJournal",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.StartCloseCashJournal"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to StartCloseCashJournal",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.StartCloseCashJournalResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CompleteCloseCashJournal": {
      "summary": "CompleteCloseCashJournal",
      "description": "Completes the closing of a cash journal, making the device once again unavailable for cash transactions until a new journal is opened.\n\nThis service expects a list of coins and notes, which summed up must equal the given `TotalAmount`.\n\nIf the `TotalAmount` is different from what was expected (returned as `ExpectedClosingAmount` in `StartCloseCashJournal` ) then this deviation\nmust be corrected and provided through a list of corrections in the `Corrections` field.\n\nFor cash journals that either do not use or ignore cash journals, most properties will automatically be set to the expected amounts. Should you\nwant to enforce validation, regardless, specify the `ForceValidation` as `true`.\n\nPending cash deposits need to be accounted for as well - supply their `ID`s as `PendingCashDeposits`. Do not add the `Amount` of cash deposits\nto the `TotalAmount`, as the user cannot usually verify the cash deposit content.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.CompleteCloseCashJournal",
        "description": "Completes the closing of a cash journal, making the device once again unavailable for cash transactions until a new journal is opened.\n\nThis service expects a list of coins and notes, which summed up must equal the given `TotalAmount`.\n\nIf the `TotalAmount` is different from what was expected (returned as `ExpectedClosingAmount` in `StartCloseCashJournal` ) then this deviation\nmust be corrected and provided through a list of corrections in the `Corrections` field.\n\nFor cash journals that either do not use or ignore cash journals, most properties will automatically be set to the expected amounts. Should you\nwant to enforce validation, regardless, specify the `ForceValidation` as `true`.\n\nPending cash deposits need to be accounted for as well - supply their `ID`s as `PendingCashDeposits`. Do not add the `Amount` of cash deposits\nto the `TotalAmount`, as the user cannot usually verify the cash deposit content.",
        "operationId": "CompleteCloseCashJournal",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.CompleteCloseCashJournal"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CompleteCloseCashJournal",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetCashJournalDenominations": {
      "summary": "GetCashJournalDenominations",
      "description": "Gets the currency and a list of available coins and notes for the provided `DeviceID`.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.GetCashJournalDenominations",
        "description": "Gets the currency and a list of available coins and notes for the provided `DeviceID`.",
        "operationId": "GetCashJournalDenominations",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.GetCashJournalDenominations"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetCashJournalDenominations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.GetCashJournalDenominationsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetCurrentCashJournals": {
      "summary": "GetCurrentCashJournals",
      "description": "Returns information about the current cash journals for the given DeviceID.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.GetCurrentCashJournals",
        "description": "Returns information about the current cash journals for the given DeviceID.",
        "operationId": "GetCurrentCashJournals",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.GetCurrentCashJournals"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetCurrentCashJournals",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.GetCurrentCashJournalsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetCashMovement": {
      "summary": "GetCashMovement",
      "description": "Retrieves details of a cash movement",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.GetCashMovement",
        "description": "Retrieves details of a cash movement",
        "operationId": "GetCashMovement",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.GetCashMovement"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetCashMovement",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.GetCashMovementResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/MoveCash": {
      "summary": "MoveCash",
      "description": "Moves cash!",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.MoveCash",
        "description": "Moves cash!",
        "operationId": "MoveCash",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.MoveCash"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to MoveCash",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DownloadFinancialPeriodDeposit": {
      "summary": "DownloadFinancialPeriodDeposit",
      "description": "The DownloadFinancialPeriodDeposit service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.DownloadFinancialPeriodDeposit",
        "description": "The DownloadFinancialPeriodDeposit service",
        "operationId": "DownloadFinancialPeriodDeposit",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.DownloadFinancialPeriodDeposit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DownloadFinancialPeriodDeposit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.ResourceResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetCashExpenseTypes": {
      "summary": "GetCashExpenseTypes",
      "description": "Returns all cash expenses that are available for your current OrganizationUnit, or available to the provided OrganizationUnitID (optional).",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.GetCashExpenseTypes",
        "description": "Returns all cash expenses that are available for your current OrganizationUnit, or available to the provided OrganizationUnitID (optional).",
        "operationId": "GetCashExpenseTypes",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.GetCashExpenseTypes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetCashExpenseTypes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.GetCashExpenseTypesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetFinancialPeriodExportDocuments": {
      "summary": "GetFinancialPeriodExportDocuments",
      "description": "The GetFinancialPeriodExportDocuments service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.GetFinancialPeriodExportDocuments",
        "description": "The GetFinancialPeriodExportDocuments service",
        "operationId": "GetFinancialPeriodExportDocuments",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.GetFinancialPeriodExportDocuments"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetFinancialPeriodExportDocuments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.GetFinancialPeriodExportDocumentsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/RetryFinancialPeriodExport": {
      "summary": "RetryFinancialPeriodExport",
      "description": "The RetryFinancialPeriodExport service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.RetryFinancialPeriodExport",
        "description": "The RetryFinancialPeriodExport service",
        "operationId": "RetryFinancialPeriodExport",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.RetryFinancialPeriodExport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to RetryFinancialPeriodExport",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/OpenFinancialPeriod": {
      "summary": "OpenFinancialPeriod",
      "description": "Opens a financial period for your current OrganizationUnit.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.OpenFinancialPeriod",
        "description": "Opens a financial period for your current OrganizationUnit.",
        "operationId": "OpenFinancialPeriod",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.OpenFinancialPeriod"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to OpenFinancialPeriod",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CloseFinancialPeriod": {
      "summary": "CloseFinancialPeriod",
      "description": "Closes the financial period for your current OrganizationUnit.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.CloseFinancialPeriod",
        "description": "Closes the financial period for your current OrganizationUnit.",
        "operationId": "CloseFinancialPeriod",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.CloseFinancialPeriod"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CloseFinancialPeriod",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetPCIQuestionAnswerForFinancialPeriod": {
      "summary": "SetPCIQuestionAnswerForFinancialPeriod",
      "description": "Set the answer to the PCI question for the provided `FinancialPeriodID`.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.SetPCIQuestionAnswerForFinancialPeriod",
        "description": "Set the answer to the PCI question for the provided `FinancialPeriodID`.",
        "operationId": "SetPCIQuestionAnswerForFinancialPeriod",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.SetPCIQuestionAnswerForFinancialPeriod"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetPCIQuestionAnswerForFinancialPeriod",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetFinancialPeriodInformation": {
      "summary": "GetFinancialPeriodInformation",
      "description": "Gets a detailed overview of the provided `FinancialPeriodID`. If no `FinancialPeriodID` is provided, the current period for your user is used.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.GetFinancialPeriodInformation",
        "description": "Gets a detailed overview of the provided `FinancialPeriodID`. If no `FinancialPeriodID` is provided, the current period for your user is used.",
        "operationId": "GetFinancialPeriodInformation",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.GetFinancialPeriodInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetFinancialPeriodInformation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.GetFinancialPeriodInformationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetFinancialPeriodClosingImpediments": {
      "summary": "GetFinancialPeriodClosingImpediments",
      "description": "Gets a list of reasons (if any) why this period cannot be closed yet.\n\nThe current possible reasons are (which is available in the `Type` property of each item):\n\n## CLOCKED_IN_USER\n\nThe user is still clocked in and must be clocked out.\n\n### Data\n\nThe `Data` property will contain:\n\n```json\n{\n  \"UserID\" : 1,\n  \"ClockedIn\" : \"2018-08-01 12:00\",\n  \"FirstName\" : \"John\",\n  \"LastName\"  : \"Doe\"\n}\n```\n\n## ACTIVE_USER_TASK\n\nThe user task hasn't been completed yet and it's either attached to this financial period, or its past its deadline.\n\n### Data\n\nThe `Data` property will contain:\n\n```json\n{\n\t\"UserTaskID\" : 5546,\n\t\"UserTaskTypeID\" : 9,\n\t\"UserID\" : null,\n\t\"UserFullName\" : null,\n\t\"IsActive\" : true,\n\t\"IsCompleted\" : false,\n\t\"Deadline\" : null,\n\t\"CreationTime\" : \"2018-08-01\"\n}\n```\n\n## OPEN_CASH_JOURNAL\n\nThere is still an open cash journal that needs to be closed before the period can be closed.\n\n### Data\n\nThe `Data` property will contain:\n\n```json\n{\n\"CashJournalID\" : 3,\n\"DeviceID\" : 1,\n\"OpeningAmount\" : 150.15\n}\n```\n\n## PCI_QUESTION\n\nThe PCI compliancy question has not been answered yet, this is required to close the period if the OrganizationUnit has been configured to require it.\n\n### Data\n\nNo Data.\n\n## NEGATIVE_STOCK\n\nThere is negative stock that must be corrected (to at least zero) before the period can be closed.\n\n### Data\n\nThe `Data` property will contain:\n\n```json\n{\n  \"ProductID\" : 7684,\n  \"ProductBackendID\" : \"ABC123\",\n  \"QuantityOnHand\" : -10,\n  \"StockLabelID\" : 1,\n  \"StockLabelName\" : \"Sellable\",\n  \"OrganizationUnitID\" : 182\n}\n```\n\nThis data can then be used to correct the stock through AdjustStock/MoveStock.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.GetFinancialPeriodClosingImpediments",
        "description": "Gets a list of reasons (if any) why this period cannot be closed yet.\n\nThe current possible reasons are (which is available in the `Type` property of each item):\n\n## CLOCKED_IN_USER\n\nThe user is still clocked in and must be clocked out.\n\n### Data\n\nThe `Data` property will contain:\n\n```json\n{\n  \"UserID\" : 1,\n  \"ClockedIn\" : \"2018-08-01 12:00\",\n  \"FirstName\" : \"John\",\n  \"LastName\"  : \"Doe\"\n}\n```\n\n## ACTIVE_USER_TASK\n\nThe user task hasn't been completed yet and it's either attached to this financial period, or its past its deadline.\n\n### Data\n\nThe `Data` property will contain:\n\n```json\n{\n\t\"UserTaskID\" : 5546,\n\t\"UserTaskTypeID\" : 9,\n\t\"UserID\" : null,\n\t\"UserFullName\" : null,\n\t\"IsActive\" : true,\n\t\"IsCompleted\" : false,\n\t\"Deadline\" : null,\n\t\"CreationTime\" : \"2018-08-01\"\n}\n```\n\n## OPEN_CASH_JOURNAL\n\nThere is still an open cash journal that needs to be closed before the period can be closed.\n\n### Data\n\nThe `Data` property will contain:\n\n```json\n{\n\"CashJournalID\" : 3,\n\"DeviceID\" : 1,\n\"OpeningAmount\" : 150.15\n}\n```\n\n## PCI_QUESTION\n\nThe PCI compliancy question has not been answered yet, this is required to close the period if the OrganizationUnit has been configured to require it.\n\n### Data\n\nNo Data.\n\n## NEGATIVE_STOCK\n\nThere is negative stock that must be corrected (to at least zero) before the period can be closed.\n\n### Data\n\nThe `Data` property will contain:\n\n```json\n{\n  \"ProductID\" : 7684,\n  \"ProductBackendID\" : \"ABC123\",\n  \"QuantityOnHand\" : -10,\n  \"StockLabelID\" : 1,\n  \"StockLabelName\" : \"Sellable\",\n  \"OrganizationUnitID\" : 182\n}\n```\n\nThis data can then be used to correct the stock through AdjustStock/MoveStock.",
        "operationId": "GetFinancialPeriodClosingImpediments",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.GetFinancialPeriodClosingImpediments"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetFinancialPeriodClosingImpediments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.GetFinancialPeriodClosingImpedimentsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetFinancialPeriodClosingStockInformation": {
      "summary": "GetFinancialPeriodClosingStockInformation",
      "description": "Gets information regarding financial period stock",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.GetFinancialPeriodClosingStockInformation",
        "description": "Gets information regarding financial period stock",
        "operationId": "GetFinancialPeriodClosingStockInformation",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.GetFinancialPeriodClosingStockInformation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetFinancialPeriodClosingStockInformation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.GetFinancialPeriodClosingStockInformationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetFinancialPeriodCashJournalDeviceSummary": {
      "summary": "GetFinancialPeriodCashJournalDeviceSummary",
      "description": "Get status summary for the devices of a FinancialPeriod",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.GetFinancialPeriodCashJournalDeviceSummary",
        "description": "Get status summary for the devices of a FinancialPeriod",
        "operationId": "GetFinancialPeriodCashJournalDeviceSummary",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.GetFinancialPeriodCashJournalDeviceSummary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetFinancialPeriodCashJournalDeviceSummary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.GetFinancialPeriodCashJournalDeviceSummaryResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetAvailableCashAmountForDevice": {
      "summary": "GetAvailableCashAmountForDevice",
      "description": "Retrieves the current available cash amount of given device, to be able to e.g. validate user given amounts in `CreateCashDeposit` or `CreateCashExpense` services.\n\nSupply a `CurrencyID` and `PaymentTypeID` to indicate the Cash Journal to be used.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.GetAvailableCashAmountForDevice",
        "description": "Retrieves the current available cash amount of given device, to be able to e.g. validate user given amounts in `CreateCashDeposit` or `CreateCashExpense` services.\n\nSupply a `CurrencyID` and `PaymentTypeID` to indicate the Cash Journal to be used.",
        "operationId": "GetAvailableCashAmountForDevice",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.GetAvailableCashAmountForDevice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetAvailableCashAmountForDevice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.GetAvailableCashAmountForDeviceResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetCurrentFinancialPeriodSummary": {
      "summary": "GetCurrentFinancialPeriodSummary",
      "description": "Returns a summary of the current financial period of the organization unit that the user is currently logged on to. The\nresult of this service can be used to retrieve more details of the financial period via the\n`GetFinancialPeriodDetails` service.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.GetCurrentFinancialPeriodSummary",
        "description": "Returns a summary of the current financial period of the organization unit that the user is currently logged on to. The\nresult of this service can be used to retrieve more details of the financial period via the\n`GetFinancialPeriodDetails` service.",
        "operationId": "GetCurrentFinancialPeriodSummary",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.GetCurrentFinancialPeriodSummary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetCurrentFinancialPeriodSummary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.GetCurrentFinancialPeriodSummaryResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetFinancialPeriodAccountsSummary": {
      "summary": "GetFinancialPeriodAccountsSummary",
      "description": "The GetFinancialPeriodAccountsSummary service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.GetFinancialPeriodAccountsSummary",
        "description": "The GetFinancialPeriodAccountsSummary service",
        "operationId": "GetFinancialPeriodAccountsSummary",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.GetFinancialPeriodAccountsSummary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetFinancialPeriodAccountsSummary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.GetFinancialPeriodAccountsSummaryResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetFinancialPeriodDetails": {
      "summary": "GetFinancialPeriodDetails",
      "description": "Returns a `FinancialPeriodDetailsDto` that contains details about the given financial period (`FinancialPeriodID`).",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.GetFinancialPeriodDetails",
        "description": "Returns a `FinancialPeriodDetailsDto` that contains details about the given financial period (`FinancialPeriodID`).",
        "operationId": "GetFinancialPeriodDetails",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.GetFinancialPeriodDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetFinancialPeriodDetails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.GetFinancialPeriodDetailsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListBookings": {
      "summary": "ListBookings",
      "description": "Lists all of the bookings that've been made for the given financial period. Which you can retrieve\nby setting the filter `FinancialPeriodID` on the `PageConfig`.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.ListBookings",
        "description": "Lists all of the bookings that've been made for the given financial period. Which you can retrieve\nby setting the filter `FinancialPeriodID` on the `PageConfig`.",
        "operationId": "ListBookings",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.ListBookings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListBookings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.ListBookingsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListCashTransactionLedger": {
      "summary": "ListCashTransactionLedger",
      "description": "This service allows you to view the cash transaction ledger, which underlies all cash transactions,\nsuch as received payments, moves between devices and expenses.\n\nBy default, you only get access to the cash transaction ledger for your current financial period. If\nyou have the `ManageCashTransactionLedger` permission, you're also allowed to filter on another financial\nperiod.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.ListCashTransactionLedger",
        "description": "This service allows you to view the cash transaction ledger, which underlies all cash transactions,\nsuch as received payments, moves between devices and expenses.\n\nBy default, you only get access to the cash transaction ledger for your current financial period. If\nyou have the `ManageCashTransactionLedger` permission, you're also allowed to filter on another financial\nperiod.",
        "operationId": "ListCashTransactionLedger",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.ListCashTransactionLedger"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListCashTransactionLedger",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.ListCashTransactionLedgerResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListCashTransactionLedgerGroups": {
      "summary": "ListCashTransactionLedgerGroups",
      "description": "This service allows you to get a grouped view of the cash transaction ledger, which underlies all cash\ntransactions, such as received payments, moves between devices and expenses.\n\nBy default, you only get access to the cash transaction ledger for your current financial period. If\nyou have the `ManageCashTransactionLedger` permission, you're also allowed to filter on another financial\nperiod.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.ListCashTransactionLedgerGroups",
        "description": "This service allows you to get a grouped view of the cash transaction ledger, which underlies all cash\ntransactions, such as received payments, moves between devices and expenses.\n\nBy default, you only get access to the cash transaction ledger for your current financial period. If\nyou have the `ManageCashTransactionLedger` permission, you're also allowed to filter on another financial\nperiod.",
        "operationId": "ListCashTransactionLedgerGroups",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.ListCashTransactionLedgerGroups"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListCashTransactionLedgerGroups",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.ListCashTransactionLedgerGroupsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListFinancialEvents": {
      "summary": "ListFinancialEvents",
      "description": "The ListFinancialEvents service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.ListFinancialEvents",
        "description": "The ListFinancialEvents service",
        "operationId": "ListFinancialEvents",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.ListFinancialEvents"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListFinancialEvents",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.ListFinancialEventsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListFinancialPeriodExports2": {
      "summary": "ListFinancialPeriodExports2",
      "description": "List financial period exports",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.ListFinancialPeriodExports2",
        "description": "List financial period exports",
        "operationId": "ListFinancialPeriodExports2",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.ListFinancialPeriodExports2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListFinancialPeriodExports2",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.ListFinancialPeriodExports2Response"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListFinancialPeriods": {
      "summary": "ListFinancialPeriods",
      "description": "List financialperiods for an OrganizationUnit\n\nDoesn't filter on the CurrentOrganizationUnit by default (as the old service did)",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.ListFinancialPeriods",
        "description": "List financialperiods for an OrganizationUnit\n\nDoesn't filter on the CurrentOrganizationUnit by default (as the old service did)",
        "operationId": "ListFinancialPeriods",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.ListFinancialPeriods"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListFinancialPeriods",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.ListFinancialPeriodsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListFinancialPeriods2": {
      "summary": "ListFinancialPeriods2",
      "description": "List financialperiods for an OrganizationUnit",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.ListFinancialPeriods2",
        "description": "List financialperiods for an OrganizationUnit",
        "operationId": "ListFinancialPeriods2",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.ListFinancialPeriods2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListFinancialPeriods2",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.ListFinancialPeriodsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListGeneralLedgerEntries": {
      "summary": "ListGeneralLedgerEntries",
      "description": "Returns a token based paged view of all the general ledgers.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.ListGeneralLedgerEntries",
        "description": "Returns a token based paged view of all the general ledgers.",
        "operationId": "ListGeneralLedgerEntries",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.ListGeneralLedgerEntries"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListGeneralLedgerEntries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.ListGeneralLedgerEntriesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListGeneralLedgers": {
      "summary": "ListGeneralLedgers",
      "description": "Returns a paged view of all the general ledgers.\n\nThe page size `Limit` has a maximum value of `1.000` for this service.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.ListGeneralLedgers",
        "description": "Returns a paged view of all the general ledgers.\n\nThe page size `Limit` has a maximum value of `1.000` for this service.",
        "operationId": "ListGeneralLedgers",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.ListGeneralLedgers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListGeneralLedgers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.ListGeneralLedgersResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetUnprocessedFinancialEventsCount": {
      "summary": "GetUnprocessedFinancialEventsCount",
      "description": "Get the estimated amount of unprocessed financial events.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.GetUnprocessedFinancialEventsCount",
        "description": "Get the estimated amount of unprocessed financial events.",
        "operationId": "GetUnprocessedFinancialEventsCount",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.GetUnprocessedFinancialEventsCount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetUnprocessedFinancialEventsCount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.GetUnprocessedFinancialEventsCountResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ProcessUnprocessedFinancialEvents": {
      "summary": "ProcessUnprocessedFinancialEvents",
      "description": "Process unprocessed financial events.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.ProcessUnprocessedFinancialEvents",
        "description": "Process unprocessed financial events.",
        "operationId": "ProcessUnprocessedFinancialEvents",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.ProcessUnprocessedFinancialEvents"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ProcessUnprocessedFinancialEvents",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/RepostFinancialPeriod": {
      "summary": "RepostFinancialPeriod",
      "description": "The RepostFinancialPeriod service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.RepostFinancialPeriod",
        "description": "The RepostFinancialPeriod service",
        "operationId": "RepostFinancialPeriod",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.RepostFinancialPeriod"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to RepostFinancialPeriod",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ResetFinancialEvents": {
      "summary": "ResetFinancialEvents",
      "description": "This service resets processed financial events back to unprocessed,\nwhich means all associated financial ledgers are deleted.\n\nOnly financial events of periods that have not been fully processed (for example exported to an external ERP system)\ncan be reset.\n\nAs this can be a time consuming service, the request is handled in the background and upon completion a mail\nis sent to the caller of this service with the results.\n\nThe scope of which events to reset can be limited by specifying a `Filter` in the request. Only the events\nthat match the filter will be reset.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.ResetFinancialEvents",
        "description": "This service resets processed financial events back to unprocessed,\nwhich means all associated financial ledgers are deleted.\n\nOnly financial events of periods that have not been fully processed (for example exported to an external ERP system)\ncan be reset.\n\nAs this can be a time consuming service, the request is handled in the background and upon completion a mail\nis sent to the caller of this service with the results.\n\nThe scope of which events to reset can be limited by specifying a `Filter` in the request. Only the events\nthat match the filter will be reset.",
        "operationId": "ResetFinancialEvents",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.ResetFinancialEvents"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ResetFinancialEvents",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/RetryFinancialPeriodExports": {
      "summary": "RetryFinancialPeriodExports",
      "description": "Retry financial period exports.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.RetryFinancialPeriodExports",
        "description": "Retry financial period exports.",
        "operationId": "RetryFinancialPeriodExports",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.RetryFinancialPeriodExports"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to RetryFinancialPeriodExports",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateCashCorrectionReason": {
      "summary": "CreateCashCorrectionReason",
      "description": "Create a cash correction reason",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.CashCorrectionReason.CreateCashCorrectionReason",
        "description": "Create a cash correction reason",
        "operationId": "CreateCashCorrectionReason",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.CashCorrectionReason.CreateCashCorrectionReason"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateCashCorrectionReason",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.CashCorrectionReason.CreateCashCorrectionReasonResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteCashCorrectionReason": {
      "summary": "DeleteCashCorrectionReason",
      "description": "Delete a cash correction reason",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.CashCorrectionReason.DeleteCashCorrectionReason",
        "description": "Delete a cash correction reason",
        "operationId": "DeleteCashCorrectionReason",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.CashCorrectionReason.DeleteCashCorrectionReason"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteCashCorrectionReason",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetCashCorrectionReason": {
      "summary": "GetCashCorrectionReason",
      "description": "Get cash correction reason by it's ID",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.CashCorrectionReason.GetCashCorrectionReason",
        "description": "Get cash correction reason by it's ID",
        "operationId": "GetCashCorrectionReason",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.CashCorrectionReason.GetCashCorrectionReason"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetCashCorrectionReason",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.CashCorrectionReason.GetCashCorrectionReasonResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetCashCorrectionReasons": {
      "summary": "GetCashCorrectionReasons",
      "description": "Get all cash correction reasons",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.CashCorrectionReason.GetCashCorrectionReasons",
        "description": "Get all cash correction reasons",
        "operationId": "GetCashCorrectionReasons",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.CashCorrectionReason.GetCashCorrectionReasons"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetCashCorrectionReasons",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Finance.CashCorrectionReason.GetCashCorrectionReasonsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateCashCorrectionReason": {
      "summary": "UpdateCashCorrectionReason",
      "description": "Update a cash correction reason",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Finance.CashCorrectionReason.UpdateCashCorrectionReason",
        "description": "Update a cash correction reason",
        "operationId": "UpdateCashCorrectionReason",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Finance.CashCorrectionReason.UpdateCashCorrectionReason"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateCashCorrectionReason",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListFeedSubscriptions": {
      "summary": "ListFeedSubscriptions",
      "description": "List the active feed subscriptions for the current user's `ApplicationID`.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Feeds.ListFeedSubscriptions",
        "description": "List the active feed subscriptions for the current user's `ApplicationID`.",
        "operationId": "ListFeedSubscriptions",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Feeds.ListFeedSubscriptions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListFeedSubscriptions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Feeds.ListFeedSubscriptionsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SubscribeToFeed": {
      "summary": "SubscribeToFeed",
      "description": "Subscribe to the specified feed for the current User's `ApplicationID`.\n\n`Name` is the name of the file you wish to watch. The `WebhookUrl` is called with a JSON POST request, in which the Feed's `name` and `applicationID` are specified. This request does not contain the data\nitself, your application will have to fetch the data using your current approaches to download this feed. This may seem verbose, but we have no guarantee the endpoint is secure, and we can't just send\npossibly sensitive information there!\n\nTo unsubscribe, call the `UnsubscribeFromFeed` service with the returned `ID` value.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Feeds.SubscribeToFeed",
        "description": "Subscribe to the specified feed for the current User's `ApplicationID`.\n\n`Name` is the name of the file you wish to watch. The `WebhookUrl` is called with a JSON POST request, in which the Feed's `name` and `applicationID` are specified. This request does not contain the data\nitself, your application will have to fetch the data using your current approaches to download this feed. This may seem verbose, but we have no guarantee the endpoint is secure, and we can't just send\npossibly sensitive information there!\n\nTo unsubscribe, call the `UnsubscribeFromFeed` service with the returned `ID` value.",
        "operationId": "SubscribeToFeed",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Feeds.SubscribeToFeed"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SubscribeToFeed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Feeds.SubscribeToFeedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UnsubscribeFromFeed": {
      "summary": "UnsubscribeFromFeed",
      "description": "Unsubscribe from the specified feed.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Feeds.UnsubscribeFromFeed",
        "description": "Unsubscribe from the specified feed.",
        "operationId": "UnsubscribeFromFeed",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Feeds.UnsubscribeFromFeed"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UnsubscribeFromFeed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateEventExportConfiguration": {
      "summary": "CreateEventExportConfiguration",
      "description": "Create event export configurations (HTTPS only).\n\nEvent Export Configurations allow you to configure specific endpoints (webhooks) for EventTargets and EventTypes.\nNot setting EventTarget & EventType will configure the endpoint for all targets and types.\nSet AuthenticationHeaderType and AuthenticationHeaderValue if you want to configure some sort of authentication.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.EventExportConfigurations.CreateEventExportConfiguration",
        "description": "Create event export configurations (HTTPS only).\n\nEvent Export Configurations allow you to configure specific endpoints (webhooks) for EventTargets and EventTypes.\nNot setting EventTarget & EventType will configure the endpoint for all targets and types.\nSet AuthenticationHeaderType and AuthenticationHeaderValue if you want to configure some sort of authentication.",
        "operationId": "CreateEventExportConfiguration",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.EventExportConfigurations.CreateEventExportConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateEventExportConfiguration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EventExportConfigurations.CreateEventExportConfigurationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteEventExportConfiguration": {
      "summary": "DeleteEventExportConfiguration",
      "description": "Service for deleting a existing `EventExportConfiguration`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.EventExportConfigurations.DeleteEventExportConfiguration",
        "description": "Service for deleting a existing `EventExportConfiguration`",
        "operationId": "DeleteEventExportConfiguration",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.EventExportConfigurations.DeleteEventExportConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteEventExportConfiguration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetEventExportConfiguration": {
      "summary": "GetEventExportConfiguration",
      "description": "Service for retrieving a existing `EventExportConfiguration`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.EventExportConfigurations.GetEventExportConfiguration",
        "description": "Service for retrieving a existing `EventExportConfiguration`",
        "operationId": "GetEventExportConfiguration",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.EventExportConfigurations.GetEventExportConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetEventExportConfiguration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EventExportConfigurations.GetEventExportConfigurationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetEventExportConfigurations": {
      "summary": "GetEventExportConfigurations",
      "description": "Service for retrieving a list of existing `EventExportConfiguration`'s",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.EventExportConfigurations.GetEventExportConfigurations",
        "description": "Service for retrieving a list of existing `EventExportConfiguration`'s",
        "operationId": "GetEventExportConfigurations",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.EventExportConfigurations.GetEventExportConfigurations"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetEventExportConfigurations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EventExportConfigurations.GetEventExportConfigurationsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetEventExportTargetTypes": {
      "summary": "GetEventExportTargetTypes",
      "description": "Service for retrieving a list of possible event types by `EventExportTarget`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.EventExportConfigurations.GetEventExportTargetTypes",
        "description": "Service for retrieving a list of possible event types by `EventExportTarget`",
        "operationId": "GetEventExportTargetTypes",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.EventExportConfigurations.GetEventExportTargetTypes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetEventExportTargetTypes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EventExportConfigurations.GetEventExportTargetTypesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/RotateEventExportConfigurationKey": {
      "summary": "RotateEventExportConfigurationKey",
      "description": "Service for updating a existing `EventExportConfiguration`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.EventExportConfigurations.RotateEventExportConfigurationKey",
        "description": "Service for updating a existing `EventExportConfiguration`",
        "operationId": "RotateEventExportConfigurationKey",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.EventExportConfigurations.RotateEventExportConfigurationKey"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to RotateEventExportConfigurationKey",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateEventExportConfiguration": {
      "summary": "UpdateEventExportConfiguration",
      "description": "Service for updating a existing `EventExportConfiguration`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.EventExportConfigurations.UpdateEventExportConfiguration",
        "description": "Service for updating a existing `EventExportConfiguration`",
        "operationId": "UpdateEventExportConfiguration",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.EventExportConfigurations.UpdateEventExportConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateEventExportConfiguration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetEnumValues": {
      "summary": "GetEnumValues",
      "description": "A generic service to return all possible values in specified list, e.g. `Currency`, `TaxCode` or `StockLabel`.\n\nThe `Name` of the enumeration is unique within EVA, and all of the `Values` returned are also unique and identifiable\nby their respective `Name`. Services that consume a value of an enumeration will expect the numeric `Value` returned.\n\nSome of these enumerations are static and are defined by code, meaning the `Values`' combination of `Name` and `Value`\nis contant and will never change. It is important to know, though, that other enumerations may be dynamic and can be\naltered per environment by their own respective services. When using these, keep in mind they can vary between\nenvironments and new values could be added. It is guaranteed, however, that once a certain `Name`-`Value` pair is set,\nit will never change in that particular environment and you are safe treat it as a constant.\n\n:point_right: It is important to realize these dynamics, because at first sight, all of these values may seem contant between\nenvironments - but that is the mere result of an initialization sequence that is usually identical, but definitely\nnot guaranteed!\n\n:point_right: `IsFlags` will indicate if the values should be treated as bit fields (or, a set of flags). For example,\nthe enumeration `OrganizationUnitTypes` demonstrates that an organization unit can both be a Shop (`1`) and a Warehouse (`16`)\nat the same time, indicated by value `17`. Always use bitwise operands on these fields!",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Enums.GetEnumValues",
        "description": "A generic service to return all possible values in specified list, e.g. `Currency`, `TaxCode` or `StockLabel`.\n\nThe `Name` of the enumeration is unique within EVA, and all of the `Values` returned are also unique and identifiable\nby their respective `Name`. Services that consume a value of an enumeration will expect the numeric `Value` returned.\n\nSome of these enumerations are static and are defined by code, meaning the `Values`' combination of `Name` and `Value`\nis contant and will never change. It is important to know, though, that other enumerations may be dynamic and can be\naltered per environment by their own respective services. When using these, keep in mind they can vary between\nenvironments and new values could be added. It is guaranteed, however, that once a certain `Name`-`Value` pair is set,\nit will never change in that particular environment and you are safe treat it as a constant.\n\n:point_right: It is important to realize these dynamics, because at first sight, all of these values may seem contant between\nenvironments - but that is the mere result of an initialization sequence that is usually identical, but definitely\nnot guaranteed!\n\n:point_right: `IsFlags` will indicate if the values should be treated as bit fields (or, a set of flags). For example,\nthe enumeration `OrganizationUnitTypes` demonstrates that an organization unit can both be a Shop (`1`) and a Warehouse (`16`)\nat the same time, indicated by value `17`. Always use bitwise operands on these fields!",
        "operationId": "GetEnumValues",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Enums.GetEnumValues"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetEnumValues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Enums.GetEnumValuesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetDocumentStoreCategories": {
      "summary": "GetDocumentStoreCategories",
      "description": "Get a list of all document store categories.\n\n:warning: For debugging and support purposes only.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.DocumentStore.GetDocumentStoreCategories",
        "description": "Get a list of all document store categories.\n\n:warning: For debugging and support purposes only.",
        "operationId": "GetDocumentStoreCategories",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.DocumentStore.GetDocumentStoreCategories"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetDocumentStoreCategories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.DocumentStore.GetDocumentStoreCategoriesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetDocumentStoreDocument": {
      "summary": "GetDocumentStoreDocument",
      "description": "Get a specific document from the document store.\n\n:warning: For debugging and support purposes only.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.DocumentStore.GetDocumentStoreDocument",
        "description": "Get a specific document from the document store.\n\n:warning: For debugging and support purposes only.",
        "operationId": "GetDocumentStoreDocument",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.DocumentStore.GetDocumentStoreDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetDocumentStoreDocument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.DocumentStore.GetDocumentStoreDocumentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SearchDocumentStore": {
      "summary": "SearchDocumentStore",
      "description": "Search for documents in a specified category. This will return a maximum of 100 records.\n\n:warning: For debugging and support purposes only.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.DocumentStore.SearchDocumentStore",
        "description": "Search for documents in a specified category. This will return a maximum of 100 records.\n\n:warning: For debugging and support purposes only.",
        "operationId": "SearchDocumentStore",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.DocumentStore.SearchDocumentStore"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SearchDocumentStore",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.DocumentStore.SearchDocumentStoreResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DisableDiscountOnOrder": {
      "summary": "DisableDiscountOnOrder",
      "description": "Disable a specific Discount for an Order, if the discount is active it will be removed from the Order, if it not active, it will not be applied anymore.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Discounts.DisableDiscountOnOrder",
        "description": "Disable a specific Discount for an Order, if the discount is active it will be removed from the Order, if it not active, it will not be applied anymore.",
        "operationId": "DisableDiscountOnOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Discounts.DisableDiscountOnOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DisableDiscountOnOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListDisabledDiscountsOnOrder": {
      "summary": "ListDisabledDiscountsOnOrder",
      "description": "List disabled discounts on order",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Discounts.ListDisabledDiscountsOnOrder",
        "description": "List disabled discounts on order",
        "operationId": "ListDisabledDiscountsOnOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Discounts.ListDisabledDiscountsOnOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListDisabledDiscountsOnOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Discounts.ListDisabledDiscountsOnOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/EnableDisabledDiscountOnOrder": {
      "summary": "EnableDisabledDiscountOnOrder",
      "description": "Enable a previous disabled Discount for an Order. If the Discount wasn't disabled, no error will be given.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Discounts.EnableDisabledDiscountOnOrder",
        "description": "Enable a previous disabled Discount for an Order. If the Discount wasn't disabled, no error will be given.",
        "operationId": "EnableDisabledDiscountOnOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Discounts.EnableDisabledDiscountOnOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to EnableDisabledDiscountOnOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DisableDiscountTriggersOnOrder": {
      "summary": "DisableDiscountTriggersOnOrder",
      "description": "Disable all discounts of the given trigger(s) on the order.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Discounts.DisableDiscountTriggersOnOrder",
        "description": "Disable all discounts of the given trigger(s) on the order.",
        "operationId": "DisableDiscountTriggersOnOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Discounts.DisableDiscountTriggersOnOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DisableDiscountTriggersOnOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/EnableDiscountTriggersOnOrder": {
      "summary": "EnableDiscountTriggersOnOrder",
      "description": "Enable previously disabled discounts of the given trigger(s) on the order",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Discounts.EnableDiscountTriggersOnOrder",
        "description": "Enable previously disabled discounts of the given trigger(s) on the order",
        "operationId": "EnableDiscountTriggersOnOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Discounts.EnableDiscountTriggersOnOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to EnableDiscountTriggersOnOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListDisabledDiscountTriggersOnOrder": {
      "summary": "ListDisabledDiscountTriggersOnOrder",
      "description": "List disabled discounts triggers on order",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Discounts.ListDisabledDiscountTriggersOnOrder",
        "description": "List disabled discounts triggers on order",
        "operationId": "ListDisabledDiscountTriggersOnOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Discounts.ListDisabledDiscountTriggersOnOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListDisabledDiscountTriggersOnOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Discounts.ListDisabledDiscountTriggersOnOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetOrderDiscountInfo": {
      "summary": "GetOrderDiscountInfo",
      "description": "This services returns info about the discounts on the given order",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Discounts.GetOrderDiscountInfo",
        "description": "This services returns info about the discounts on the given order",
        "operationId": "GetOrderDiscountInfo",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Discounts.GetOrderDiscountInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetOrderDiscountInfo",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Discounts.GetOrderDiscountInfoResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/PrefigureDiscounts": {
      "summary": "PrefigureDiscounts",
      "description": "List the discounts that potentially could be activated.\nIf a `ProductIDs`, `ProductSearchID` or `ProductSearch` is set, the service will check if the resulting products are a eligible to one or more discounts. If an `OrderID` is provided, the context of the given order is taken into account, that can include user specific discounts, order OU specific discount, etc.\n\nBe aware that:\n- If `ProductIDs` is given, `ProductSearchID` and `ProductSearch` are ignored\n- If `ProductSearchID` is given, `ProductIDs` and `ProductSearch` are ignored\n- If `ProductSearch` is given, `ProductIDs` and `ProductSearchID` are ignored",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Discounts.PrefigureDiscounts",
        "description": "List the discounts that potentially could be activated.\nIf a `ProductIDs`, `ProductSearchID` or `ProductSearch` is set, the service will check if the resulting products are a eligible to one or more discounts. If an `OrderID` is provided, the context of the given order is taken into account, that can include user specific discounts, order OU specific discount, etc.\n\nBe aware that:\n- If `ProductIDs` is given, `ProductSearchID` and `ProductSearch` are ignored\n- If `ProductSearchID` is given, `ProductIDs` and `ProductSearch` are ignored\n- If `ProductSearch` is given, `ProductIDs` and `ProductSearchID` are ignored",
        "operationId": "PrefigureDiscounts",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Discounts.PrefigureDiscounts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to PrefigureDiscounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Discounts.PrefigureDiscountsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListDiscountCouponHandlers": {
      "summary": "ListDiscountCouponHandlers",
      "description": "This services returns a list of discount coupon handlers",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Discounts.ListDiscountCouponHandlers",
        "description": "This services returns a list of discount coupon handlers",
        "operationId": "ListDiscountCouponHandlers",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Discounts.ListDiscountCouponHandlers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListDiscountCouponHandlers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Discounts.ListDiscountCouponHandlersResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListManualDiscounts": {
      "summary": "ListManualDiscounts",
      "description": "List the available manual discounts. Optionally, the OrderType or DiscountAppliesTo filter can be given.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Discounts.ListManualDiscounts",
        "description": "List the available manual discounts. Optionally, the OrderType or DiscountAppliesTo filter can be given.",
        "operationId": "ListManualDiscounts",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Discounts.ListManualDiscounts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListManualDiscounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Discounts.ListManualDiscountsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetPickProductDiscountOptionsForOrderLine": {
      "summary": "GetPickProductDiscountOptionsForOrderLine",
      "description": "Get the PickProductDiscountOptions for an OrderLine\n\nSee: `GetPickProductDiscountOptionsForOrder`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Discounts.GetPickProductDiscountOptionsForOrderLine",
        "description": "Get the PickProductDiscountOptions for an OrderLine\n\nSee: `GetPickProductDiscountOptionsForOrder`",
        "operationId": "GetPickProductDiscountOptionsForOrderLine",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Discounts.GetPickProductDiscountOptionsForOrderLine"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetPickProductDiscountOptionsForOrderLine",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Discounts.GetPickProductDiscountOptionsForOrderLineResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetPickProductDiscountOptionsForOrder": {
      "summary": "GetPickProductDiscountOptionsForOrder",
      "description": "Get the PickProductDiscountOptions for an Order\n\nFor each line there is an object with the options:\n- Options: the available products to choose from\n- CurrentSelection: the currently selected product\n- CurrentTier: the current tier of the discount\n- BaseAmount: the amount used to determine the tiers\n- Tiers:\n - ID\n - Description\n - From: The amount at which this tier is available\n - Difference: The amount that should be added to be eligable for this tier\n - DefaultProductID: The product that should be selected by default when hitting this tier\n - Prompt: Should the frontend show a prompt to pick a product?\n - ProductIDs: The avaialble products in this tier\n - IsCurrentTier: Is this tier the current one?",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Discounts.GetPickProductDiscountOptionsForOrder",
        "description": "Get the PickProductDiscountOptions for an Order\n\nFor each line there is an object with the options:\n- Options: the available products to choose from\n- CurrentSelection: the currently selected product\n- CurrentTier: the current tier of the discount\n- BaseAmount: the amount used to determine the tiers\n- Tiers:\n - ID\n - Description\n - From: The amount at which this tier is available\n - Difference: The amount that should be added to be eligable for this tier\n - DefaultProductID: The product that should be selected by default when hitting this tier\n - Prompt: Should the frontend show a prompt to pick a product?\n - ProductIDs: The avaialble products in this tier\n - IsCurrentTier: Is this tier the current one?",
        "operationId": "GetPickProductDiscountOptionsForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Discounts.GetPickProductDiscountOptionsForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetPickProductDiscountOptionsForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Discounts.GetPickProductDiscountOptionsForOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetPickProductDiscountOptionsForOrderLine": {
      "summary": "SetPickProductDiscountOptionsForOrderLine",
      "description": "Pick a product for a PickProductAction for an OrderLine",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Discounts.SetPickProductDiscountOptionsForOrderLine",
        "description": "Pick a product for a PickProductAction for an OrderLine",
        "operationId": "SetPickProductDiscountOptionsForOrderLine",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Discounts.SetPickProductDiscountOptionsForOrderLine"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetPickProductDiscountOptionsForOrderLine",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetCurrency": {
      "summary": "GetCurrency",
      "description": "The GetCurrency service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Currencies.GetCurrency",
        "description": "The GetCurrency service",
        "operationId": "GetCurrency",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Currencies.GetCurrency"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetCurrency",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Currencies.GetCurrencyResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListCurrencies": {
      "summary": "ListCurrencies",
      "description": "The ListCurrencies service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Currencies.ListCurrencies",
        "description": "The ListCurrencies service",
        "operationId": "ListCurrencies",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Currencies.ListCurrencies"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListCurrencies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Currencies.ListCurrenciesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetAvailableCurrencies": {
      "summary": "GetAvailableCurrencies",
      "description": "Services for retrieving a list of `Currency`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Currencies.GetAvailableCurrencies",
        "description": "Services for retrieving a list of `Currency`",
        "operationId": "GetAvailableCurrencies",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Currencies.GetAvailableCurrencies"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetAvailableCurrencies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Currencies.GetAvailableCurrenciesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetShoppingCartInfo": {
      "summary": "GetShoppingCartInfo",
      "description": "Fetch the summary of an Order. This summary contains:\n- QuantityOrdered: the total count of products in the Order\n- TotalAmount: the total amount of the Order\n- ForeignTotalAmount: the total amount of the Order in the foreign currency\n- CurrencyID: the currency of the Order\n\nIt is required to supply an OrderID",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Cart.GetShoppingCartInfo",
        "description": "Fetch the summary of an Order. This summary contains:\n- QuantityOrdered: the total count of products in the Order\n- TotalAmount: the total amount of the Order\n- ForeignTotalAmount: the total amount of the Order in the foreign currency\n- CurrencyID: the currency of the Order\n\nIt is required to supply an OrderID",
        "operationId": "GetShoppingCartInfo",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Cart.GetShoppingCartInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetShoppingCartInfo",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Cart.GetShoppingCartInfoResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetShoppingCart": {
      "summary": "GetShoppingCart",
      "description": "This returns the requested order. The order is retreived based on the OrderID.\n\nThe order will be recalculated:\n- Discounts\n- ShippingCosts\n- GiftWrappingCosts\n- OrderLine prices\n\nIf no recalculation is needed, use the GetOrder service instead. In general the approach would be: use GetShoppingCart while building the order, after PrepareOrderForCheckout has been called, switch to GetOrder.\n\nTo include the result of `GetRequiredDataForOrder`, the property `AdditionalOrderDataOptions.RequiredFor` can be set to the desired level of requirements.\nTo include the result of `GetProductRequirementValuesForOrder`, the property `AdditionalOrderDataOptions.IncludeProductRequirements` can be set to `true`.\nTo include the result of `GetGiftWrappingOptionsForOrder` and `GetAvailableGiftWrappingLinesForOrder`, the property `AdditionalOrderDataOptions.IncludeGiftWrapping` can be set to `true`.\nTo include the result of `PrefigureDiscounts` and `GetPotentialDiscountsForOrder`, the property `AdditionalOrderDataOptions.IncludePrefigureDiscounts` can be set to `true`.\nTo include the result of `GetPickProductDiscountOptionsForOrder`, the property `AdditionalOrderDataOptions.IncludePickProductOptions` can be set to `true`.\nTo include the result of `ListAvailableShippingMethods`, the property `AdditionalOrderDataOptions.IncludeAvailableShippingMethods` can be set to `true`.\nTo include the result of `GetAvailablePaymentMethods`, the property `AdditionalOrderDataOptions.IncludeAvailablePaymentMethods` can be set to `true`.\nTo include the result of `GetAvailableRefundPaymentMethodsForOrder`, the property `AdditionalOrderDataOptions.IncludeAvailableRefundPaymentMethods` can be set to `true`.\nTo include the result of `ValidateOrderShipment`, the property `AdditionalOrderDataOptions.IncludeValidateShipment` can be set to `true`.\nTo include the available actions for the PaymentTransactions, the property `AdditionalOrderDataOptions.IncludePaymentTransactionActions` can be set to `true`.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Cart.GetShoppingCart",
        "description": "This returns the requested order. The order is retreived based on the OrderID.\n\nThe order will be recalculated:\n- Discounts\n- ShippingCosts\n- GiftWrappingCosts\n- OrderLine prices\n\nIf no recalculation is needed, use the GetOrder service instead. In general the approach would be: use GetShoppingCart while building the order, after PrepareOrderForCheckout has been called, switch to GetOrder.\n\nTo include the result of `GetRequiredDataForOrder`, the property `AdditionalOrderDataOptions.RequiredFor` can be set to the desired level of requirements.\nTo include the result of `GetProductRequirementValuesForOrder`, the property `AdditionalOrderDataOptions.IncludeProductRequirements` can be set to `true`.\nTo include the result of `GetGiftWrappingOptionsForOrder` and `GetAvailableGiftWrappingLinesForOrder`, the property `AdditionalOrderDataOptions.IncludeGiftWrapping` can be set to `true`.\nTo include the result of `PrefigureDiscounts` and `GetPotentialDiscountsForOrder`, the property `AdditionalOrderDataOptions.IncludePrefigureDiscounts` can be set to `true`.\nTo include the result of `GetPickProductDiscountOptionsForOrder`, the property `AdditionalOrderDataOptions.IncludePickProductOptions` can be set to `true`.\nTo include the result of `ListAvailableShippingMethods`, the property `AdditionalOrderDataOptions.IncludeAvailableShippingMethods` can be set to `true`.\nTo include the result of `GetAvailablePaymentMethods`, the property `AdditionalOrderDataOptions.IncludeAvailablePaymentMethods` can be set to `true`.\nTo include the result of `GetAvailableRefundPaymentMethodsForOrder`, the property `AdditionalOrderDataOptions.IncludeAvailableRefundPaymentMethods` can be set to `true`.\nTo include the result of `ValidateOrderShipment`, the property `AdditionalOrderDataOptions.IncludeValidateShipment` can be set to `true`.\nTo include the available actions for the PaymentTransactions, the property `AdditionalOrderDataOptions.IncludePaymentTransactionActions` can be set to `true`.",
        "operationId": "GetShoppingCart",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Cart.GetShoppingCart"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetShoppingCart",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ShoppingCartResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/RecoverShoppingCart": {
      "summary": "RecoverShoppingCart",
      "description": "Recover a Transfered or Detached order by its ReminderToken.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Cart.RecoverShoppingCart",
        "description": "Recover a Transfered or Detached order by its ReminderToken.",
        "operationId": "RecoverShoppingCart",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Cart.RecoverShoppingCart"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to RecoverShoppingCart",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.ShoppingCartResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/FlushCache": {
      "summary": "FlushCache",
      "description": "The FlushCache service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Caching.FlushCache",
        "description": "The FlushCache service",
        "operationId": "FlushCache",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Caching.FlushCache"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to FlushCache",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/AttachBlobToOrder": {
      "summary": "AttachBlobToOrder",
      "description": "Attaches given Blob to an order.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Blobs.AttachBlobToOrder",
        "description": "Attaches given Blob to an order.",
        "operationId": "AttachBlobToOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Blobs.AttachBlobToOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to AttachBlobToOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListBlobsForFinancialPeriod": {
      "summary": "ListBlobsForFinancialPeriod",
      "description": "The ListBlobsForFinancialPeriod service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Blobs.ListBlobsForFinancialPeriod",
        "description": "The ListBlobsForFinancialPeriod service",
        "operationId": "ListBlobsForFinancialPeriod",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Blobs.ListBlobsForFinancialPeriod"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListBlobsForFinancialPeriod",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Blobs.ListBlobsForFinancialPeriodResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListBlobsForOrder": {
      "summary": "ListBlobsForOrder",
      "description": "Get the blobs that are attached to an Order\n\nIt's required to specify the order, optionally the blobs can also be filtered on `InvoiceID` of `ShipmentID`.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Blobs.ListBlobsForOrder",
        "description": "Get the blobs that are attached to an Order\n\nIt's required to specify the order, optionally the blobs can also be filtered on `InvoiceID` of `ShipmentID`.",
        "operationId": "ListBlobsForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Blobs.ListBlobsForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListBlobsForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Blobs.ListBlobsForOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/StoreAndAttachBlobToOrder": {
      "summary": "StoreAndAttachBlobToOrder",
      "description": "Service combining StoreBlob and AttachBlobToOrder.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Blobs.StoreAndAttachBlobToOrder",
        "description": "Service combining StoreBlob and AttachBlobToOrder.",
        "operationId": "StoreAndAttachBlobToOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Blobs.StoreAndAttachBlobToOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to StoreAndAttachBlobToOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Blobs.StoreAndAttachBlobToOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ParseBarcode": {
      "summary": "ParseBarcode",
      "description": "The ParseBarcode service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Barcodes.ParseBarcode",
        "description": "The ParseBarcode service",
        "operationId": "ParseBarcode",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Barcodes.ParseBarcode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ParseBarcode",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Barcodes.ParseBarcodeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GenerateTemporaryElevationCode": {
      "summary": "GenerateTemporaryElevationCode",
      "description": "Generates a temporary pin that can only be used for elevation.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Authentication.GenerateTemporaryElevationCode",
        "description": "Generates a temporary pin that can only be used for elevation.",
        "operationId": "GenerateTemporaryElevationCode",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Authentication.GenerateTemporaryElevationCode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GenerateTemporaryElevationCode",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Authentication.GenerateTemporaryElevationCodeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetAuthorizationStructure": {
      "summary": "GetAuthorizationStructure",
      "description": "Returns the full authorizationstructure of the current user\n\nIt is a list of all the roles the user has, with their functionalities and the OrganizationUnits where these are active",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Authentication.GetAuthorizationStructure",
        "description": "Returns the full authorizationstructure of the current user\n\nIt is a list of all the roles the user has, with their functionalities and the OrganizationUnits where these are active",
        "operationId": "GetAuthorizationStructure",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Authentication.GetAuthorizationStructure"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetAuthorizationStructure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Authentication.GetAuthorizationStructureResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/Login": {
      "summary": "Login",
      "description": "Authenticates user",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Authentication.Login",
        "description": "Authenticates user",
        "operationId": "Login",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Authentication.Login"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to Login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Authentication.LoginResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/Logout": {
      "summary": "Logout",
      "description": "Ends the current session of the user and invalidates the used AuthenticationToken\n\nOptionally the ExpireAllSessions property can be set to terminate all current sessions for the User.\n\nThe Clockout property can be used the register a clock out event for time tracking.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Authentication.Logout",
        "description": "Ends the current session of the user and invalidates the used AuthenticationToken\n\nOptionally the ExpireAllSessions property can be set to terminate all current sessions for the User.\n\nThe Clockout property can be used the register a clock out event for time tracking.",
        "operationId": "Logout",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Authentication.Logout"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to Logout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Authentication.LogoutResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetPasskey": {
      "summary": "GetPasskey",
      "description": "Gets the passkey configuration for the current user",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Authentication.GetPasskey",
        "description": "Gets the passkey configuration for the current user",
        "operationId": "GetPasskey",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Authentication.GetPasskey"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetPasskey",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Authentication.GetPasskeyResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetPasskeyChallenge": {
      "summary": "GetPasskeyChallenge",
      "description": "Generates a new temporary passkey challenge for a sequential `Login` flow",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Authentication.GetPasskeyChallenge",
        "description": "Generates a new temporary passkey challenge for a sequential `Login` flow",
        "operationId": "GetPasskeyChallenge",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Authentication.GetPasskeyChallenge"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetPasskeyChallenge",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Authentication.GetPasskeyChallengeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetPasskeySetupChallenge": {
      "summary": "GetPasskeySetupChallenge",
      "description": "Generates a new temporary passkey challenge for a sequential `CreatePasskey` flow",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Authentication.GetPasskeySetupChallenge",
        "description": "Generates a new temporary passkey challenge for a sequential `CreatePasskey` flow",
        "operationId": "GetPasskeySetupChallenge",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Authentication.GetPasskeySetupChallenge"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetPasskeySetupChallenge",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Authentication.GetPasskeySetupChallengeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreatePasskey": {
      "summary": "CreatePasskey",
      "description": "Create a new passkey, specifying a generated challenge from `GetPasskeySetupChallenge`, signed with your private key as `Signature` and including your `PublicKey` for registration",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Authentication.CreatePasskey",
        "description": "Create a new passkey, specifying a generated challenge from `GetPasskeySetupChallenge`, signed with your private key as `Signature` and including your `PublicKey` for registration",
        "operationId": "CreatePasskey",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Authentication.CreatePasskey"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreatePasskey",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeletePasskey": {
      "summary": "DeletePasskey",
      "description": "Remove the passkey configuration for the current user",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Authentication.DeletePasskey",
        "description": "Remove the passkey configuration for the current user",
        "operationId": "DeletePasskey",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Authentication.DeletePasskey"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeletePasskey",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeletePasskeyForUser": {
      "summary": "DeletePasskeyForUser",
      "description": "Remove the passkey configuration for the specified user, as employee management feature",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Authentication.DeletePasskeyForUser",
        "description": "Remove the passkey configuration for the specified user, as employee management feature",
        "operationId": "DeletePasskeyForUser",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Authentication.DeletePasskeyForUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeletePasskeyForUser",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/Ping": {
      "summary": "Ping",
      "description": "Stub service to validate the current token for employees",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Authentication.Ping",
        "description": "Stub service to validate the current token for employees",
        "operationId": "Ping",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Authentication.Ping"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to Ping",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ValidateToken": {
      "summary": "ValidateToken",
      "description": "Stub service to validate the current token",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Authentication.ValidateToken",
        "description": "Stub service to validate the current token",
        "operationId": "ValidateToken",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Authentication.ValidateToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ValidateToken",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetAvailableTwoFactorAuthenticators": {
      "summary": "GetAvailableTwoFactorAuthenticators",
      "description": "Gets the available two-factor authenticators for the current user",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Authentication.GetAvailableTwoFactorAuthenticators",
        "description": "Gets the available two-factor authenticators for the current user",
        "operationId": "GetAvailableTwoFactorAuthenticators",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Authentication.GetAvailableTwoFactorAuthenticators"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetAvailableTwoFactorAuthenticators",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Authentication.GetAvailableTwoFactorAuthenticatorsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/EnableTwoFactorAuthentication": {
      "summary": "EnableTwoFactorAuthentication",
      "description": "Enable a given two-factor authenticator for the current user",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Authentication.EnableTwoFactorAuthentication",
        "description": "Enable a given two-factor authenticator for the current user",
        "operationId": "EnableTwoFactorAuthentication",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Authentication.EnableTwoFactorAuthentication"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to EnableTwoFactorAuthentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Authentication.EnableTwoFactorAuthenticationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DisableTwoFactorAuthentication": {
      "summary": "DisableTwoFactorAuthentication",
      "description": "Disable a given two-factor authenticator for the current user",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Authentication.DisableTwoFactorAuthentication",
        "description": "Disable a given two-factor authenticator for the current user",
        "operationId": "DisableTwoFactorAuthentication",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Authentication.DisableTwoFactorAuthentication"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DisableTwoFactorAuthentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DisableAllTwoFactorAuthentication": {
      "summary": "DisableAllTwoFactorAuthentication",
      "description": "Disables all two-factor authenticator for the given user",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Authentication.DisableAllTwoFactorAuthentication",
        "description": "Disables all two-factor authenticator for the given user",
        "operationId": "DisableAllTwoFactorAuthentication",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Authentication.DisableAllTwoFactorAuthentication"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DisableAllTwoFactorAuthentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ValidateIdentificationPin": {
      "summary": "ValidateIdentificationPin",
      "description": "Validates if the given PIN is valid for the current user/ou.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Authentication.ValidateIdentificationPin",
        "description": "Validates if the given PIN is valid for the current user/ou.",
        "operationId": "ValidateIdentificationPin",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Authentication.ValidateIdentificationPin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ValidateIdentificationPin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Authentication.ValidateIdentificationPinResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateAuditChainConfiguration": {
      "summary": "CreateAuditChainConfiguration",
      "description": "Creates a new AuditChainConfiguration, which allows you to configure the starting number of a sequence and its prefix.\nCreating a configuration for an audit chain that already exists does not apply this configuration. A new chain would need to be created by incrementing the Auditing:Version setting.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Auditing.CreateAuditChainConfiguration",
        "description": "Creates a new AuditChainConfiguration, which allows you to configure the starting number of a sequence and its prefix.\nCreating a configuration for an audit chain that already exists does not apply this configuration. A new chain would need to be created by incrementing the Auditing:Version setting.",
        "operationId": "CreateAuditChainConfiguration",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Auditing.CreateAuditChainConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateAuditChainConfiguration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.CreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetAuditChainConfigurations": {
      "summary": "GetAuditChainConfigurations",
      "description": "Gets all current audit chain configurations.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Auditing.GetAuditChainConfigurations",
        "description": "Gets all current audit chain configurations.",
        "operationId": "GetAuditChainConfigurations",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Auditing.GetAuditChainConfigurations"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetAuditChainConfigurations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Auditing.GetAuditChainConfigurationsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateAuditChainConfiguration": {
      "summary": "UpdateAuditChainConfiguration",
      "description": "Updates an existing AuditChainConfiguration, which allows you to configure the starting number of a sequence and its prefix.\nUpdating a configuration for an audit chain that already exists does not apply this updated configuration. A new chain would need to be created by incrementing the Auditing:Version setting.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Auditing.UpdateAuditChainConfiguration",
        "description": "Updates an existing AuditChainConfiguration, which allows you to configure the starting number of a sequence and its prefix.\nUpdating a configuration for an audit chain that already exists does not apply this updated configuration. A new chain would need to be created by incrementing the Auditing:Version setting.",
        "operationId": "UpdateAuditChainConfiguration",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Auditing.UpdateAuditChainConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateAuditChainConfiguration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteAuditChainConfiguration": {
      "summary": "DeleteAuditChainConfiguration",
      "description": "Deletes an AuditChainConfiguration",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Auditing.DeleteAuditChainConfiguration",
        "description": "Deletes an AuditChainConfiguration",
        "operationId": "DeleteAuditChainConfiguration",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Auditing.DeleteAuditChainConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteAuditChainConfiguration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DownloadFinancialPeriodAudits": {
      "summary": "DownloadFinancialPeriodAudits",
      "description": "Downloads all generated audit files from the selected period as a single zip file, with a separate folder for each organization unit.\n\nWhen selecting a container organization unit, all underlying organization units will be included.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Auditing.DownloadFinancialPeriodAudits",
        "description": "Downloads all generated audit files from the selected period as a single zip file, with a separate folder for each organization unit.\n\nWhen selecting a container organization unit, all underlying organization units will be included.",
        "operationId": "DownloadFinancialPeriodAudits",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Auditing.DownloadFinancialPeriodAudits"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DownloadFinancialPeriodAudits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.ResourceResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetElectronicInvoiceData": {
      "summary": "GetElectronicInvoiceData",
      "description": "Used to retrieve the e-invoicing data that was set before via `SetElectronicInvoiceData`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Auditing.GetElectronicInvoiceData",
        "description": "Used to retrieve the e-invoicing data that was set before via `SetElectronicInvoiceData`",
        "operationId": "GetElectronicInvoiceData",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Auditing.GetElectronicInvoiceData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetElectronicInvoiceData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Auditing.GetElectronicInvoiceDataResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetElectronicInvoiceData": {
      "summary": "SetElectronicInvoiceData",
      "description": "Sets the additional e-invoicing data on the given order. To retrieve the information that has been set use: `GetElectronicInvoiceData`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Auditing.SetElectronicInvoiceData",
        "description": "Sets the additional e-invoicing data on the given order. To retrieve the information that has been set use: `GetElectronicInvoiceData`",
        "operationId": "SetElectronicInvoiceData",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Auditing.SetElectronicInvoiceData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetElectronicInvoiceData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetLotteryNumber": {
      "summary": "GetLotteryNumber",
      "description": "Retrieves the lottery number for a given order",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Auditing.GetLotteryNumber",
        "description": "Retrieves the lottery number for a given order",
        "operationId": "GetLotteryNumber",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Auditing.GetLotteryNumber"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetLotteryNumber",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Auditing.GetLotteryNumberResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListEventLedger": {
      "summary": "ListEventLedger",
      "description": "This service lets you query the EventLedger for auditing purposes.\n\nThe request provides a PageConfig (of type ScrollablePageConfig) that lets you filter on the given properties in the EventLedger.\nPaging is done by providing the request with the `NextResultToken` that you got back from the previous request.\nAs this method of paging is forward-only, you can't go back to a previous page unless you store the token or the results,\nand the total number of results is unknown, only whether or not there are more results (determined by if the NextResultToken is null).\n\nThe response contains the whole EventLedger document.\n\nPossible filters:\n\n- Types: A list of strings that refer to the `Type` field that is in every document.\n- OrderID: Only return documents that contain a reference to the given OrderID\n- OrganizationUnitID: Only return documents that were created by someone logged into the given OrganizationUnitID. It's recommended that this filter is always used, due to performance reasons.\n- DeviceID: Filters on documents that have a reference to the given device, usually associated with a payment or a print command.\n- FromDate: Only return documents newer than this date. It's recommended that this filter is always used, due to performance reasons.\n- ToDate: Only return documents older than this date. It's recommended that this filter is always used, due to performance reasons.\n- UserIDs: Only return documents created by these users. The IDs for this can be gotten by first doing a user search.\n- FirstName: Filter on documents created by users whose first name starts with this. Achieves the same as filtering on UserIDs, but with one step less. However, due to privacy reasons, this information isn't stored for customers.\n- FullName: Filter on documents created by users whose full name starts with this. Achieves the same as filtering on UserIDs, but with one step less. However, due to privacy reasons, this information isn't stored for customers.\n- EmailAddress: Filter on documents created by users whose email starts with this. Achieves the same as filtering on UserIDs, but with one step less. However, due to privacy reasons, this information isn't stored for customers.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Auditing.ListEventLedger",
        "description": "This service lets you query the EventLedger for auditing purposes.\n\nThe request provides a PageConfig (of type ScrollablePageConfig) that lets you filter on the given properties in the EventLedger.\nPaging is done by providing the request with the `NextResultToken` that you got back from the previous request.\nAs this method of paging is forward-only, you can't go back to a previous page unless you store the token or the results,\nand the total number of results is unknown, only whether or not there are more results (determined by if the NextResultToken is null).\n\nThe response contains the whole EventLedger document.\n\nPossible filters:\n\n- Types: A list of strings that refer to the `Type` field that is in every document.\n- OrderID: Only return documents that contain a reference to the given OrderID\n- OrganizationUnitID: Only return documents that were created by someone logged into the given OrganizationUnitID. It's recommended that this filter is always used, due to performance reasons.\n- DeviceID: Filters on documents that have a reference to the given device, usually associated with a payment or a print command.\n- FromDate: Only return documents newer than this date. It's recommended that this filter is always used, due to performance reasons.\n- ToDate: Only return documents older than this date. It's recommended that this filter is always used, due to performance reasons.\n- UserIDs: Only return documents created by these users. The IDs for this can be gotten by first doing a user search.\n- FirstName: Filter on documents created by users whose first name starts with this. Achieves the same as filtering on UserIDs, but with one step less. However, due to privacy reasons, this information isn't stored for customers.\n- FullName: Filter on documents created by users whose full name starts with this. Achieves the same as filtering on UserIDs, but with one step less. However, due to privacy reasons, this information isn't stored for customers.\n- EmailAddress: Filter on documents created by users whose email starts with this. Achieves the same as filtering on UserIDs, but with one step less. However, due to privacy reasons, this information isn't stored for customers.",
        "operationId": "ListEventLedger",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Auditing.ListEventLedger"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListEventLedger",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Auditing.ListEventLedgerResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListFinancialPeriodAudits": {
      "summary": "ListFinancialPeriodAudits",
      "description": "Lists all `Financial Period Audit` with their possible BlobID's for audition purposes.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Auditing.ListFinancialPeriodAudits",
        "description": "Lists all `Financial Period Audit` with their possible BlobID's for audition purposes.",
        "operationId": "ListFinancialPeriodAudits",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Auditing.ListFinancialPeriodAudits"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListFinancialPeriodAudits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Auditing.ListFinancialPeriodAuditsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetLotteryNumber": {
      "summary": "SetLotteryNumber",
      "description": "Sets the lottery number for a given order",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Auditing.SetLotteryNumber",
        "description": "Sets the lottery number for a given order",
        "operationId": "SetLotteryNumber",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Auditing.SetLotteryNumber"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetLotteryNumber",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ValidateVatNumber": {
      "summary": "ValidateVatNumber",
      "description": "Validates the given VAT number by the current organization unit auditing provider or by providing a country in the request",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Auditing.ValidateVatNumber",
        "description": "Validates the given VAT number by the current organization unit auditing provider or by providing a country in the request",
        "operationId": "ValidateVatNumber",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Auditing.ValidateVatNumber"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ValidateVatNumber",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Auditing.ValidateVatNumberResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetApplicationConfiguration": {
      "summary": "GetApplicationConfiguration",
      "description": "The GetApplicationConfiguration service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Applications.GetApplicationConfiguration",
        "description": "The GetApplicationConfiguration service",
        "operationId": "GetApplicationConfiguration",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Applications.GetApplicationConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetApplicationConfiguration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Applications.GetApplicationConfigurationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetCurrentApplication": {
      "summary": "GetCurrentApplication",
      "description": "The GetCurrentApplication service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Applications.GetCurrentApplication",
        "description": "The GetCurrentApplication service",
        "operationId": "GetCurrentApplication",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Applications.GetCurrentApplication"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetCurrentApplication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Applications.GetCurrentApplicationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListApplications": {
      "summary": "ListApplications",
      "description": "Get a list of all active Applications",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Applications.ListApplications",
        "description": "Get a list of all active Applications",
        "operationId": "ListApplications",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Applications.ListApplications"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListApplications",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Applications.ListApplicationsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetApiDefinition": {
      "summary": "GetApiDefinition",
      "description": "Gets the description of the entire API",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.API.GetApiDefinition",
        "description": "Gets the description of the entire API",
        "operationId": "GetApiDefinition",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.API.GetApiDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetApiDefinition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.API.GetApiDefinitionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetAvailableServices": {
      "summary": "GetAvailableServices",
      "description": "Service for retrieving a list of available services",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.API.GetAvailableServices",
        "description": "Service for retrieving a list of available services",
        "operationId": "GetAvailableServices",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.API.GetAvailableServices"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetAvailableServices",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.API.GetAvailableServicesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetAvailableServiceDetails": {
      "summary": "GetAvailableServiceDetails",
      "description": "The GetAvailableServiceDetails service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.API.GetAvailableServiceDetails",
        "description": "The GetAvailableServiceDetails service",
        "operationId": "GetAvailableServiceDetails",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.API.GetAvailableServiceDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetAvailableServiceDetails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.API.GetAvailableServiceDetailsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/AddBoardingPassToOrder": {
      "summary": "AddBoardingPassToOrder",
      "description": "Adds a boarding pass to specified order, by barcode.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Airport.AddBoardingPassToOrder",
        "description": "Adds a boarding pass to specified order, by barcode.",
        "operationId": "AddBoardingPassToOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Airport.AddBoardingPassToOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to AddBoardingPassToOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateFlight": {
      "summary": "CreateFlight",
      "description": "Create a new Flight object",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Airport.CreateFlight",
        "description": "Create a new Flight object",
        "operationId": "CreateFlight",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Airport.CreateFlight"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateFlight",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Airport.CreateFlightResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateFlight": {
      "summary": "UpdateFlight",
      "description": "Update an existing Flight",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Airport.UpdateFlight",
        "description": "Update an existing Flight",
        "operationId": "UpdateFlight",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Airport.UpdateFlight"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateFlight",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteFlight": {
      "summary": "DeleteFlight",
      "description": "Delete an existing Flight",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Airport.DeleteFlight",
        "description": "Delete an existing Flight",
        "operationId": "DeleteFlight",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Airport.DeleteFlight"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteFlight",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetFlight": {
      "summary": "GetFlight",
      "description": "Retrieves an existing Flight",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Airport.GetFlight",
        "description": "Retrieves an existing Flight",
        "operationId": "GetFlight",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Airport.GetFlight"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetFlight",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Airport.GetFlightResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListFlights": {
      "summary": "ListFlights",
      "description": "List all the existing Flights mathing the specified filter",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Airport.ListFlights",
        "description": "List all the existing Flights mathing the specified filter",
        "operationId": "ListFlights",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Airport.ListFlights"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListFlights",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Airport.ListFlightsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetBoardingPass": {
      "summary": "GetBoardingPass",
      "description": "Gets boarding pass information set to given order.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Airport.GetBoardingPass",
        "description": "Gets boarding pass information set to given order.",
        "operationId": "GetBoardingPass",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Airport.GetBoardingPass"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetBoardingPass",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Airport.GetBoardingPassResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ImportFlights": {
      "summary": "ImportFlights",
      "description": "Creates multiple Flight objects for a specific Organization Unit.\n    The flights are identified from a GRC type file containing the necessary information.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Airport.ImportFlights",
        "description": "Creates multiple Flight objects for a specific Organization Unit.\n    The flights are identified from a GRC type file containing the necessary information.",
        "operationId": "ImportFlights",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Airport.ImportFlights"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ImportFlights",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DownloadFlightsFileTemplate": {
      "summary": "DownloadFlightsFileTemplate",
      "description": "Download a template format for the flights file to upload.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Airport.DownloadFlightsFileTemplate",
        "description": "Download a template format for the flights file to upload.",
        "operationId": "DownloadFlightsFileTemplate",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Airport.DownloadFlightsFileTemplate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DownloadFlightsFileTemplate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.ResourceResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListAddressBook": {
      "summary": "ListAddressBook",
      "description": "Service for retrieving a list of `AddressBook`",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Addresses.ListAddressBook",
        "description": "Service for retrieving a list of `AddressBook`",
        "operationId": "ListAddressBook",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Addresses.ListAddressBook"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListAddressBook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Addresses.ListAddressBookResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetDefaultBillingAddress": {
      "summary": "SetDefaultBillingAddress",
      "description": "Set the given Address Book Item as default BillingAddress for the User of the Address Book",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Addresses.SetDefaultBillingAddress",
        "description": "Set the given Address Book Item as default BillingAddress for the User of the Address Book",
        "operationId": "SetDefaultBillingAddress",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Addresses.SetDefaultBillingAddress"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetDefaultBillingAddress",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetDefaultPickupAddress": {
      "summary": "SetDefaultPickupAddress",
      "description": "Set the given Address Book Item as default PickupAddress for the User of the Address Book",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Addresses.SetDefaultPickupAddress",
        "description": "Set the given Address Book Item as default PickupAddress for the User of the Address Book",
        "operationId": "SetDefaultPickupAddress",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Addresses.SetDefaultPickupAddress"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetDefaultPickupAddress",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetDefaultShippingAddress": {
      "summary": "SetDefaultShippingAddress",
      "description": "Set the given Address Book Item as default ShippingAddress for the User of the Address Book",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Addresses.SetDefaultShippingAddress",
        "description": "Set the given Address Book Item as default ShippingAddress for the User of the Address Book",
        "operationId": "SetDefaultShippingAddress",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Addresses.SetDefaultShippingAddress"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetDefaultShippingAddress",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateAddressBookItem": {
      "summary": "CreateAddressBookItem",
      "description": "Create a new Address in the AddressBook of an User",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Addresses.CreateAddressBookItem",
        "description": "Create a new Address in the AddressBook of an User",
        "operationId": "CreateAddressBookItem",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Addresses.CreateAddressBookItem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateAddressBookItem",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.CreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateAddressBookItem": {
      "summary": "UpdateAddressBookItem",
      "description": "Update an existing Address in the AddressBook of an User",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Addresses.UpdateAddressBookItem",
        "description": "Update an existing Address in the AddressBook of an User",
        "operationId": "UpdateAddressBookItem",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Addresses.UpdateAddressBookItem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateAddressBookItem",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteAddressBookItem": {
      "summary": "DeleteAddressBookItem",
      "description": "Delete an Address in the AddressBook of an User\n\nIt's not allowed to delete an address when it's the default and there are more than 1 remaining items in the address book",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Addresses.DeleteAddressBookItem",
        "description": "Delete an Address in the AddressBook of an User\n\nIt's not allowed to delete an address when it's the default and there are more than 1 remaining items in the address book",
        "operationId": "DeleteAddressBookItem",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Addresses.DeleteAddressBookItem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteAddressBookItem",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateAddressRequirement": {
      "summary": "UpdateAddressRequirement",
      "description": "Update an existing Address Requirement object.\n\nThis service is using the ID or a PropertyType-CountryID par as input for the finding of the\ncorrect address requirement we want to update.\nIf the address requirement is found the visibility and validation of this will be updated.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Addresses.UpdateAddressRequirement",
        "description": "Update an existing Address Requirement object.\n\nThis service is using the ID or a PropertyType-CountryID par as input for the finding of the\ncorrect address requirement we want to update.\nIf the address requirement is found the visibility and validation of this will be updated.",
        "operationId": "UpdateAddressRequirement",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Addresses.UpdateAddressRequirement"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateAddressRequirement",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetAddressRequirements": {
      "summary": "GetAddressRequirements",
      "description": "Get all available address requirements.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Addresses.GetAddressRequirements",
        "description": "Get all available address requirements.",
        "operationId": "GetAddressRequirements",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Addresses.GetAddressRequirements"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetAddressRequirements",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Addresses.GetAddressRequirementsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/AutocompleteAddress": {
      "summary": "AutocompleteAddress",
      "description": "Service for retrieving a list of suggested addresses",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Addresses.AutocompleteAddress",
        "description": "Service for retrieving a list of suggested addresses",
        "operationId": "AutocompleteAddress",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Addresses.AutocompleteAddress"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to AutocompleteAddress",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Addresses.AutocompleteAddressResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetAddressForZipCode": {
      "summary": "GetAddressForZipCode",
      "description": "Service for retrieving a `Address` by specifying a Zip Code and House Number.\n\nThis only works for addresses in the Netherlands, for a more generic approach look a the AutocompleteAddress service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Addresses.GetAddressForZipCode",
        "description": "Service for retrieving a `Address` by specifying a Zip Code and House Number.\n\nThis only works for addresses in the Netherlands, for a more generic approach look a the AutocompleteAddress service",
        "operationId": "GetAddressForZipCode",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Addresses.GetAddressForZipCode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetAddressForZipCode",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Addresses.GetAddressForZipCodeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetAutocompleteAddressByReference": {
      "summary": "GetAutocompleteAddressByReference",
      "description": "Service for retrieving address suggestion details by specifying a address suggestion retrieved from `AutocompleteAddress` service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Addresses.GetAutocompleteAddressByReference",
        "description": "Service for retrieving address suggestion details by specifying a address suggestion retrieved from `AutocompleteAddress` service",
        "operationId": "GetAutocompleteAddressByReference",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Addresses.GetAutocompleteAddressByReference"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetAutocompleteAddressByReference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Addresses.GetAutocompleteAddressByReferenceResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetCountrySubdivisions": {
      "summary": "GetCountrySubdivisions",
      "description": "Get the CountrySubdivisions\n\nOptionally the request can be filtered on countryid",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Addresses.GetCountrySubdivisions",
        "description": "Get the CountrySubdivisions\n\nOptionally the request can be filtered on countryid",
        "operationId": "GetCountrySubdivisions",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Addresses.GetCountrySubdivisions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetCountrySubdivisions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Addresses.GetCountrySubdivisionsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListCountries": {
      "summary": "ListCountries",
      "description": "Gets the full list of countries. When `FetchAll` is set to true, all the `Country` entries are returned, rather than just the ones limited by the `OrganizationUnitCountry` constraint (`false` or `null`, default).",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Addresses.ListCountries",
        "description": "Gets the full list of countries. When `FetchAll` is set to true, all the `Country` entries are returned, rather than just the ones limited by the `OrganizationUnitCountry` constraint (`false` or `null`, default).",
        "operationId": "ListCountries",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Addresses.ListCountries"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListCountries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Addresses.ListCountriesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateAddress": {
      "summary": "UpdateAddress",
      "description": "Update the addresses on a User\n\nThis is deprecated in favour of using the AddressBook services",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Addresses.UpdateAddress",
        "description": "Update the addresses on a User\n\nThis is deprecated in favour of using the AddressBook services",
        "operationId": "UpdateAddress",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Addresses.UpdateAddress"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateAddress",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/FeedTest": {
      "summary": "FeedTest",
      "description": "Do not use.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.FeedTest",
        "description": "Do not use.",
        "operationId": "FeedTest",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.FeedTest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to FeedTest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.FeedTestResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/PrintSecondChanceProductPriceLabel": {
      "summary": "PrintSecondChanceProductPriceLabel",
      "description": "The PrintSecondChanceProductPriceLabel service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.Products.PrintSecondChanceProductPriceLabel",
        "description": "The PrintSecondChanceProductPriceLabel service",
        "operationId": "PrintSecondChanceProductPriceLabel",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.Products.PrintSecondChanceProductPriceLabel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to PrintSecondChanceProductPriceLabel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CompleteReservationDeviationTask": {
      "summary": "CompleteReservationDeviationTask",
      "description": "The CompleteReservationDeviationTask service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.UserTaskTypes.StockReservation.Services.CompleteReservationDeviationTask",
        "description": "The CompleteReservationDeviationTask service",
        "operationId": "CompleteReservationDeviationTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.UserTaskTypes.StockReservation.Services.CompleteReservationDeviationTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CompleteReservationDeviationTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.UserTaskTypes.StockReservation.Services.CompleteReservationDeviationTaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/StartReservationDeviationTask": {
      "summary": "StartReservationDeviationTask",
      "description": "The StartReservationDeviationTask service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.UserTaskTypes.StockReservation.Services.StartReservationDeviationTask",
        "description": "The StartReservationDeviationTask service",
        "operationId": "StartReservationDeviationTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.UserTaskTypes.StockReservation.Services.StartReservationDeviationTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to StartReservationDeviationTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.UserTaskTypes.StockReservation.Services.StartReservationDeviationTaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CompleteStockMovementFollowUp": {
      "summary": "CompleteStockMovementFollowUp",
      "description": "Completes a Stock Movement Follow Up task, using the `WorkSet` returned by the `StartStockMovementFollowUp` service.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.StockMovementFollowUp.CompleteStockMovementFollowUp",
        "description": "Completes a Stock Movement Follow Up task, using the `WorkSet` returned by the `StartStockMovementFollowUp` service.",
        "operationId": "CompleteStockMovementFollowUp",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.StockMovementFollowUp.CompleteStockMovementFollowUp"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CompleteStockMovementFollowUp",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/StartStockMovementFollowUp": {
      "summary": "StartStockMovementFollowUp",
      "description": "Starts a Stock Movement Follow Up task. Proceed with the `CompleteStockMovementFollowUp` service when finished.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.StockMovementFollowUp.StartStockMovementFollowUp",
        "description": "Starts a Stock Movement Follow Up task. Proceed with the `CompleteStockMovementFollowUp` service when finished.",
        "operationId": "StartStockMovementFollowUp",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.StockMovementFollowUp.StartStockMovementFollowUp"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to StartStockMovementFollowUp",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.StockMovementFollowUp.StartStockMovementFollowUpResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/StartCompositeUserTask": {
      "summary": "StartCompositeUserTask",
      "description": "Starts a Composite User Task, returning child meta data.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.CompositeUserTask.Services.StartCompositeUserTask",
        "description": "Starts a Composite User Task, returning child meta data.",
        "operationId": "StartCompositeUserTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.CompositeUserTask.Services.StartCompositeUserTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to StartCompositeUserTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.CompositeUserTask.Services.StartCompositeUserTaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CompleteValueAddedLogisticTask": {
      "summary": "CompleteValueAddedLogisticTask",
      "description": "The CompleteValueAddedLogisticTask service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.ValueAddedLogistics.Services.CompleteValueAddedLogisticTask",
        "description": "The CompleteValueAddedLogisticTask service",
        "operationId": "CompleteValueAddedLogisticTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.ValueAddedLogistics.Services.CompleteValueAddedLogisticTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CompleteValueAddedLogisticTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetValueAddedLogisticTasks": {
      "summary": "GetValueAddedLogisticTasks",
      "description": "The GetValueAddedLogisticTasks service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.ValueAddedLogistics.Services.GetValueAddedLogisticTasks",
        "description": "The GetValueAddedLogisticTasks service",
        "operationId": "GetValueAddedLogisticTasks",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.ValueAddedLogistics.Services.GetValueAddedLogisticTasks"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetValueAddedLogisticTasks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Types.ValueAddedLogistics.Services.GetValueAddedLogisticTasksResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CompleteShipFromStoreTask": {
      "summary": "CompleteShipFromStoreTask",
      "description": "Completes the ShipFromOrder task, indicating that the shipment of the order has taken place.\n\nThe order will be shipped and the shop stock will be moved to Transit.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.ShipFromStore.Services.CompleteShipFromStoreTask",
        "description": "Completes the ShipFromOrder task, indicating that the shipment of the order has taken place.\n\nThe order will be shipped and the shop stock will be moved to Transit.",
        "operationId": "CompleteShipFromStoreTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.ShipFromStore.Services.CompleteShipFromStoreTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CompleteShipFromStoreTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Types.ShipFromStore.Services.CompleteShipFromStoreTaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetShipFromStoreTaskByBarcode": {
      "summary": "GetShipFromStoreTaskByBarcode",
      "description": "Gets an active ShipFromStore type User Task for your store, that contains a product with specified `Barcode`.\n\nUse the optional `DeterminationType` to indicate if you prefer the `Oldest`, `Smallest` or `Largest` task that contains your product.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.ShipFromStore.Services.GetShipFromStoreTaskByBarcode",
        "description": "Gets an active ShipFromStore type User Task for your store, that contains a product with specified `Barcode`.\n\nUse the optional `DeterminationType` to indicate if you prefer the `Oldest`, `Smallest` or `Largest` task that contains your product.",
        "operationId": "GetShipFromStoreTaskByBarcode",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.ShipFromStore.Services.GetShipFromStoreTaskByBarcode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetShipFromStoreTaskByBarcode",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Types.ShipFromStore.Services.GetShipFromStoreTaskByBarcodeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/PrintShipFromStoreTasks": {
      "summary": "PrintShipFromStoreTasks",
      "description": "Generates a combined pick list for given Ship From Store tasks, starting and assigning them all to the current user.\n\nThese tasks need to be ShipFromStore type with subtype Pick, or a CompositeUserTask type with such a task as first child.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.ShipFromStore.Services.PrintShipFromStoreTasks",
        "description": "Generates a combined pick list for given Ship From Store tasks, starting and assigning them all to the current user.\n\nThese tasks need to be ShipFromStore type with subtype Pick, or a CompositeUserTask type with such a task as first child.",
        "operationId": "PrintShipFromStoreTasks",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.ShipFromStore.Services.PrintShipFromStoreTasks"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to PrintShipFromStoreTasks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.ResourceResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/StartShipFromStoreTask": {
      "summary": "StartShipFromStoreTask",
      "description": "Starts a ShipFromStore task, identified by its UserTaskID.\n\nThe service returns the order that should be shipped from the user's current store as well as the OrderLines\nthat should be part of the shipment. Not necessarily all orderlines of the order should be shipped, so the\nOrderLineIDs returned by this service should be respected.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.ShipFromStore.Services.StartShipFromStoreTask",
        "description": "Starts a ShipFromStore task, identified by its UserTaskID.\n\nThe service returns the order that should be shipped from the user's current store as well as the OrderLines\nthat should be part of the shipment. Not necessarily all orderlines of the order should be shipped, so the\nOrderLineIDs returned by this service should be respected.",
        "operationId": "StartShipFromStoreTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.ShipFromStore.Services.StartShipFromStoreTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to StartShipFromStoreTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Types.ShipFromStore.Services.StartShipFromStoreTaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/AddTrackingCodeToReturnToSupplierShipment": {
      "summary": "AddTrackingCodeToReturnToSupplierShipment",
      "description": "Add a tracking code to the ReturnToSupplier task shipment.\nIf tracking code is already present, it will be overwritten.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.ReturnToSupplier.AddTrackingCodeToReturnToSupplierShipment",
        "description": "Add a tracking code to the ReturnToSupplier task shipment.\nIf tracking code is already present, it will be overwritten.",
        "operationId": "AddTrackingCodeToReturnToSupplierShipment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.ReturnToSupplier.AddTrackingCodeToReturnToSupplierShipment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to AddTrackingCodeToReturnToSupplierShipment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CompleteReturnToSupplierTask": {
      "summary": "CompleteReturnToSupplierTask",
      "description": "Completes the ReturnToSupplier task.\n\nWhen the setting 'AllowConcurrentReturnToSupplierTasks' is true, the 'FinalizeReturnToSupplierOrder' value is checked to determine what to do;\n - When 'FinalizeReturnToSupplierOrder' is set to true, the cycle will be completed and no new task will be created. The last task that was created will be deactivated.\n - When 'FinalizeReturnToSupplierOrder' is set to false, the current task and shipment will be closed. Other tasks will remain open.\n\nWhen the setting 'AllowConcurrentReturnToSupplierTasks' is false, the service will automatically finalize the cycle.\n\nWhen CompleteReturnToSupplierTask is called and there are no lines on the task shipment, the shipment will be removed.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.ReturnToSupplier.CompleteReturnToSupplierTask",
        "description": "Completes the ReturnToSupplier task.\n\nWhen the setting 'AllowConcurrentReturnToSupplierTasks' is true, the 'FinalizeReturnToSupplierOrder' value is checked to determine what to do;\n - When 'FinalizeReturnToSupplierOrder' is set to true, the cycle will be completed and no new task will be created. The last task that was created will be deactivated.\n - When 'FinalizeReturnToSupplierOrder' is set to false, the current task and shipment will be closed. Other tasks will remain open.\n\nWhen the setting 'AllowConcurrentReturnToSupplierTasks' is false, the service will automatically finalize the cycle.\n\nWhen CompleteReturnToSupplierTask is called and there are no lines on the task shipment, the shipment will be removed.",
        "operationId": "CompleteReturnToSupplierTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.ReturnToSupplier.CompleteReturnToSupplierTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CompleteReturnToSupplierTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListReturnToSupplierTaskOrderLines": {
      "summary": "ListReturnToSupplierTaskOrderLines",
      "description": "List available ReturnToSupplier order lines with quantities.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.ReturnToSupplier.ListReturnToSupplierTaskOrderLines",
        "description": "List available ReturnToSupplier order lines with quantities.",
        "operationId": "ListReturnToSupplierTaskOrderLines",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.ReturnToSupplier.ListReturnToSupplierTaskOrderLines"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListReturnToSupplierTaskOrderLines",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Types.ReturnToSupplier.ListReturnToSupplierTaskOrderLinesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListReturnToSupplierTaskShipmentLines": {
      "summary": "ListReturnToSupplierTaskShipmentLines",
      "description": "List lines for the tasks shipment with quantities.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.ReturnToSupplier.ListReturnToSupplierTaskShipmentLines",
        "description": "List lines for the tasks shipment with quantities.",
        "operationId": "ListReturnToSupplierTaskShipmentLines",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.ReturnToSupplier.ListReturnToSupplierTaskShipmentLines"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListReturnToSupplierTaskShipmentLines",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Types.ReturnToSupplier.ListReturnToSupplierTaskShipmentLinesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/PrintReturnToSupplierTaskShipment": {
      "summary": "PrintReturnToSupplierTaskShipment",
      "description": "Print the tasks shipment label.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.ReturnToSupplier.PrintReturnToSupplierTaskShipment",
        "description": "Print the tasks shipment label.",
        "operationId": "PrintReturnToSupplierTaskShipment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.ReturnToSupplier.PrintReturnToSupplierTaskShipment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to PrintReturnToSupplierTaskShipment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetLineForReturnToSupplierShipment": {
      "summary": "SetLineForReturnToSupplierShipment",
      "description": "Adds or removes a lines to/from the ReturnToSupplier tasks shipment.\n\nWhen 'Exclude' is enabled, all lines matching the given ProductID will be removed from the task shipment with a maximum of the given Quantity.\nWhen 'Exclude' is disabled, all lines from the ReturnToSupplier order matching the given ProductID will be added to the tasks shipment to the maximum of the given Quantity.\n\nOvershipment is not allowed.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.ReturnToSupplier.SetLineForReturnToSupplierShipment",
        "description": "Adds or removes a lines to/from the ReturnToSupplier tasks shipment.\n\nWhen 'Exclude' is enabled, all lines matching the given ProductID will be removed from the task shipment with a maximum of the given Quantity.\nWhen 'Exclude' is disabled, all lines from the ReturnToSupplier order matching the given ProductID will be added to the tasks shipment to the maximum of the given Quantity.\n\nOvershipment is not allowed.",
        "operationId": "SetLineForReturnToSupplierShipment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.ReturnToSupplier.SetLineForReturnToSupplierShipment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetLineForReturnToSupplierShipment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/StartReturnToSupplierTask": {
      "summary": "StartReturnToSupplierTask",
      "description": "Starts ReturnToSupplier task.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.ReturnToSupplier.StartReturnToSupplierTask",
        "description": "Starts ReturnToSupplier task.",
        "operationId": "StartReturnToSupplierTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.ReturnToSupplier.StartReturnToSupplierTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to StartReturnToSupplierTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Types.ReturnToSupplier.StartReturnToSupplierResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CompletePrintPriceLabelTask": {
      "summary": "CompletePrintPriceLabelTask",
      "description": "The CompletePrintPriceLabelTask service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.PrintPriceLabel.Services.CompletePrintPriceLabelTask",
        "description": "The CompletePrintPriceLabelTask service",
        "operationId": "CompletePrintPriceLabelTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.PrintPriceLabel.Services.CompletePrintPriceLabelTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CompletePrintPriceLabelTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreatePrintPriceLabelTask": {
      "summary": "CreatePrintPriceLabelTask",
      "description": "Creates a new Print Price Label task with specified products, or append these to existing tasks when applicable.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.PrintPriceLabel.Services.CreatePrintPriceLabelTask",
        "description": "Creates a new Print Price Label task with specified products, or append these to existing tasks when applicable.",
        "operationId": "CreatePrintPriceLabelTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.PrintPriceLabel.Services.CreatePrintPriceLabelTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreatePrintPriceLabelTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Types.PrintPriceLabel.Services.CreatePrintPriceLabelTaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/PrintPriceLabel": {
      "summary": "PrintPriceLabel",
      "description": "The PrintPriceLabel service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.PrintPriceLabel.Services.PrintPriceLabel",
        "description": "The PrintPriceLabel service",
        "operationId": "PrintPriceLabel",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.PrintPriceLabel.Services.PrintPriceLabel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to PrintPriceLabel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Types.PrintPriceLabel.Services.PrintPriceLabelResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/StartPrintPriceLabelTask": {
      "summary": "StartPrintPriceLabelTask",
      "description": "The StartPrintPriceLabelTask service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.PrintPriceLabel.Services.StartPrintPriceLabelTask",
        "description": "The StartPrintPriceLabelTask service",
        "operationId": "StartPrintPriceLabelTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.PrintPriceLabel.Services.StartPrintPriceLabelTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to StartPrintPriceLabelTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Types.PrintPriceLabel.Services.StartPrintPriceLabelTaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CompletePrintTask": {
      "summary": "CompletePrintTask",
      "description": "The CompletePrintTask service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.Print.Services.CompletePrintTask",
        "description": "The CompletePrintTask service",
        "operationId": "CompletePrintTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.Print.Services.CompletePrintTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CompletePrintTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreatePrintTask": {
      "summary": "CreatePrintTask",
      "description": "The CreatePrintTask service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.Print.Services.CreatePrintTask",
        "description": "The CreatePrintTask service",
        "operationId": "CreatePrintTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.Print.Services.CreatePrintTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreatePrintTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Types.Print.Services.CreatePrintTaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ProcessPrintTasks": {
      "summary": "ProcessPrintTasks",
      "description": "Processes the print tasks for each required ID.\n\nThis service does not throws an expeption in the case of mulptiple user task ids, but the output will be a dictionary containing\nan Error (EVA.Framework.Error) for every print task that encounters an issue. The UserTaskID will be the key in that specific Dictionary.\n\nIn the case of a single user task id, the service will behave exactly as the depracated ProcessPrintTask service did, throwing the encountered exception.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.Print.Services.ProcessPrintTasks",
        "description": "Processes the print tasks for each required ID.\n\nThis service does not throws an expeption in the case of mulptiple user task ids, but the output will be a dictionary containing\nan Error (EVA.Framework.Error) for every print task that encounters an issue. The UserTaskID will be the key in that specific Dictionary.\n\nIn the case of a single user task id, the service will behave exactly as the depracated ProcessPrintTask service did, throwing the encountered exception.",
        "operationId": "ProcessPrintTasks",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.Print.Services.ProcessPrintTasks"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ProcessPrintTasks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Types.Print.Services.ProcessPrintTasksResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/StartPrintTask": {
      "summary": "StartPrintTask",
      "description": "The StartPrintTask service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.Print.Services.StartPrintTask",
        "description": "The StartPrintTask service",
        "operationId": "StartPrintTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.Print.Services.StartPrintTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to StartPrintTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Types.Print.Services.StartPrintTaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CompleteCustomUserTask": {
      "summary": "CompleteCustomUserTask",
      "description": "Completes a custom usertask",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.Custom.Services.CompleteCustomUserTask",
        "description": "Completes a custom usertask",
        "operationId": "CompleteCustomUserTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.Custom.Services.CompleteCustomUserTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CompleteCustomUserTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateCustomUserTask": {
      "summary": "CreateCustomUserTask",
      "description": "Creates a new custom usertask",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.Custom.Services.CreateCustomUserTask",
        "description": "Creates a new custom usertask",
        "operationId": "CreateCustomUserTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.Custom.Services.CreateCustomUserTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateCustomUserTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Types.Custom.Services.CreateCustomUserTaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateCustomUserTaskType": {
      "summary": "CreateCustomUserTaskType",
      "description": "Creates a new custom usertask type.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.Custom.Services.CreateCustomUserTaskType",
        "description": "Creates a new custom usertask type.",
        "operationId": "CreateCustomUserTaskType",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.Custom.Services.CreateCustomUserTaskType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateCustomUserTaskType",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Types.Custom.Services.CreateCustomUserTaskTypeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListCustomUserTaskTypes": {
      "summary": "ListCustomUserTaskTypes",
      "description": "List all custom usertask types",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.Custom.Services.ListCustomUserTaskTypes",
        "description": "List all custom usertask types",
        "operationId": "ListCustomUserTaskTypes",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.Custom.Services.ListCustomUserTaskTypes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListCustomUserTaskTypes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Types.Custom.Services.ListCustomUserTaskTypesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateCustomUserTaskTemplate": {
      "summary": "CreateCustomUserTaskTemplate",
      "description": "Creates a new template for custom user tasks",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.Custom.Services.CreateCustomUserTaskTemplate",
        "description": "Creates a new template for custom user tasks",
        "operationId": "CreateCustomUserTaskTemplate",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.Custom.Services.CreateCustomUserTaskTemplate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateCustomUserTaskTemplate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Types.Custom.Services.CreateCustomUserTaskTemplateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteCustomUserTaskTemplate": {
      "summary": "DeleteCustomUserTaskTemplate",
      "description": "Deletes a specific custom usertask template",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.Custom.Services.DeleteCustomUserTaskTemplate",
        "description": "Deletes a specific custom usertask template",
        "operationId": "DeleteCustomUserTaskTemplate",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.Custom.Services.DeleteCustomUserTaskTemplate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteCustomUserTaskTemplate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateCustomUserTaskTemplate": {
      "summary": "UpdateCustomUserTaskTemplate",
      "description": "Updates a template for custom user tasks. If a property is not provided, it will be set to null.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.Custom.Services.UpdateCustomUserTaskTemplate",
        "description": "Updates a template for custom user tasks. If a property is not provided, it will be set to null.",
        "operationId": "UpdateCustomUserTaskTemplate",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.Custom.Services.UpdateCustomUserTaskTemplate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateCustomUserTaskTemplate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListCustomUserTaskTemplate": {
      "summary": "ListCustomUserTaskTemplate",
      "description": "Lists all of the custom usertask templates",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.Custom.Services.ListCustomUserTaskTemplate",
        "description": "Lists all of the custom usertask templates",
        "operationId": "ListCustomUserTaskTemplate",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.Custom.Services.ListCustomUserTaskTemplate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListCustomUserTaskTemplate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Types.Custom.Services.ListCustomUserTaskTemplateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetCustomUserTaskData": {
      "summary": "GetCustomUserTaskData",
      "description": "Retrieve the set values",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.Custom.Services.GetCustomUserTaskData",
        "description": "Retrieve the set values",
        "operationId": "GetCustomUserTaskData",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.Custom.Services.GetCustomUserTaskData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetCustomUserTaskData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Types.Custom.Services.GetCustomUserTaskDataResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/StartCustomUserTask": {
      "summary": "StartCustomUserTask",
      "description": "Starts a new custom usertask",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Types.Custom.Services.StartCustomUserTask",
        "description": "Starts a new custom usertask",
        "operationId": "StartCustomUserTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Types.Custom.Services.StartCustomUserTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to StartCustomUserTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Types.Custom.Services.StartCustomUserTaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeactivateUserTask": {
      "summary": "DeactivateUserTask",
      "description": "The DeactivateUserTask service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.DeactivateUserTask",
        "description": "The DeactivateUserTask service",
        "operationId": "DeactivateUserTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.DeactivateUserTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeactivateUserTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeactivateAllUserTasks": {
      "summary": "DeactivateAllUserTasks",
      "description": "Deactivates all active user tasks based on organization unit. Not supported on production environments!",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.DeactivateAllUserTasks",
        "description": "Deactivates all active user tasks based on organization unit. Not supported on production environments!",
        "operationId": "DeactivateAllUserTasks",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.DeactivateAllUserTasks"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeactivateAllUserTasks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetUserTaskCounts": {
      "summary": "GetUserTaskCounts",
      "description": "Return the total number of open tasks, and the count per task type.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.GetUserTaskCounts",
        "description": "Return the total number of open tasks, and the count per task type.",
        "operationId": "GetUserTaskCounts",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.GetUserTaskCounts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetUserTaskCounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.GetUserTaskCountsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetUserTaskDetails": {
      "summary": "GetUserTaskDetails",
      "description": "The GetUserTaskDetails service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.GetUserTaskDetails",
        "description": "The GetUserTaskDetails service",
        "operationId": "GetUserTaskDetails",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.GetUserTaskDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetUserTaskDetails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.GetUserTaskDetailsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListAvailableUserTasks": {
      "summary": "ListAvailableUserTasks",
      "description": "List the available UserTasks for the current user.\n\nThe response has a `Aggregations` property. This property contains the available filters for this set of UserTasks.\nTo apply such a filter it should added in the `Filters` property on the RequestMessage.\n\nExample response:\n```\n{\n...\n,\n  \"Aggregations\": {\n      \"ZonedCycleCountPreCount\": {\n        \"CycleCountZoneID\": [\n          {\n            \"Name\": \"Shelves\",\n            \"Value\": 10,\n            \"Count\": 1\n          },\n          {\n            \"Name\": \"Stockroom\",\n            \"Value\": 12,\n            \"Count\": 6\n          },\n          {\n            \"Name\": \"Store\",\n            \"Value\": 13,\n            \"Count\": 4\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\nTo apply a matching filter:\n```\n{\n  \"Filters\": {\n    \"ZonedCycleCountPreCount\": {\n      \"CycleCountZoneID\": [10]\n    }\n  }\n}\n```",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ListAvailableUserTasks",
        "description": "List the available UserTasks for the current user.\n\nThe response has a `Aggregations` property. This property contains the available filters for this set of UserTasks.\nTo apply such a filter it should added in the `Filters` property on the RequestMessage.\n\nExample response:\n```\n{\n...\n,\n  \"Aggregations\": {\n      \"ZonedCycleCountPreCount\": {\n        \"CycleCountZoneID\": [\n          {\n            \"Name\": \"Shelves\",\n            \"Value\": 10,\n            \"Count\": 1\n          },\n          {\n            \"Name\": \"Stockroom\",\n            \"Value\": 12,\n            \"Count\": 6\n          },\n          {\n            \"Name\": \"Store\",\n            \"Value\": 13,\n            \"Count\": 4\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\nTo apply a matching filter:\n```\n{\n  \"Filters\": {\n    \"ZonedCycleCountPreCount\": {\n      \"CycleCountZoneID\": [10]\n    }\n  }\n}\n```",
        "operationId": "ListAvailableUserTasks",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ListAvailableUserTasks"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListAvailableUserTasks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.ListAvailableUserTasksResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListTasksThatBlockPeriodClosing": {
      "summary": "ListTasksThatBlockPeriodClosing",
      "description": "Returns the current tasks that prevent the current organization units' financial period from closing.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ListTasksThatBlockPeriodClosing",
        "description": "Returns the current tasks that prevent the current organization units' financial period from closing.",
        "operationId": "ListTasksThatBlockPeriodClosing",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ListTasksThatBlockPeriodClosing"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListTasksThatBlockPeriodClosing",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.ListTasksThatBlockPeriodClosingResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListUserTasks": {
      "summary": "ListUserTasks",
      "description": "Returns a paged list of UserTasks.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ListUserTasks",
        "description": "Returns a paged list of UserTasks.",
        "operationId": "ListUserTasks",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ListUserTasks"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListUserTasks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.ListUserTasksResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetUserTaskNotCompletedReasons": {
      "summary": "GetUserTaskNotCompletedReasons",
      "description": "The GetUserTaskNotCompletedReasons service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.GetUserTaskNotCompletedReasons",
        "description": "The GetUserTaskNotCompletedReasons service",
        "operationId": "GetUserTaskNotCompletedReasons",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.GetUserTaskNotCompletedReasons"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetUserTaskNotCompletedReasons",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.GetUserTaskNotCompletedReasonsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateUserTaskNotCompletedReason": {
      "summary": "CreateUserTaskNotCompletedReason",
      "description": "The CreateUserTaskNotCompletedReason service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.CreateUserTaskNotCompletedReason",
        "description": "The CreateUserTaskNotCompletedReason service",
        "operationId": "CreateUserTaskNotCompletedReason",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.CreateUserTaskNotCompletedReason"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateUserTaskNotCompletedReason",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateUserTaskNotCompletedReason": {
      "summary": "UpdateUserTaskNotCompletedReason",
      "description": "The UpdateUserTaskNotCompletedReason service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.UpdateUserTaskNotCompletedReason",
        "description": "The UpdateUserTaskNotCompletedReason service",
        "operationId": "UpdateUserTaskNotCompletedReason",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.UpdateUserTaskNotCompletedReason"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateUserTaskNotCompletedReason",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteUserTaskNotCompletedReason": {
      "summary": "DeleteUserTaskNotCompletedReason",
      "description": "The DeleteUserTaskNotCompletedReason service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.DeleteUserTaskNotCompletedReason",
        "description": "The DeleteUserTaskNotCompletedReason service",
        "operationId": "DeleteUserTaskNotCompletedReason",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.DeleteUserTaskNotCompletedReason"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteUserTaskNotCompletedReason",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetUserTaskPriorities": {
      "summary": "GetUserTaskPriorities",
      "description": "Return all of the configured User Task Priority configurations.\n\nThese are used at real-time on the User Task details whenever fetched, translating the User Task `Priority` into a `PriorityDescription`. The\n`LanguageID` and `CountryID` filters are compared against the user context requesting this information, and the `UserTaskTypeID`, `UserTaskSubTypeID`\nand `Priority` are taken from the User Task itself. The `Priority` from the User Task will be compared against the `From` and `To` ranges defined,\nwhere the `From` priority is an *inclusive* lower bound, while `To` is the *exclusive* upper bound.\n\nThe `Description` will be used to describe the priority, but when left empty, will fall back to `Name`.\n\nAn example configuration could be as follows;\n\n```\nLanguage | From | To | Description\n---------|------|----|------------\n      NL |      |    | Standaard\n      NL |   10 |    | Spoed\n      DE |      | 10 | Unwichtig\n         |      |    | Default\n```\n\nA User Task with priority 9 for a Dutch employee would be labelled \"Standaard\", while for a German colleague this would be called \"Unwichtig\". A\nUser Task of priority 10 would be called \"Spoed\" in Dutch, but \"Default\" in German.\n\n:sunglasses: For added awesomeness, if you define overlapping priority ranges, we'll select the most narrow range for you.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.GetUserTaskPriorities",
        "description": "Return all of the configured User Task Priority configurations.\n\nThese are used at real-time on the User Task details whenever fetched, translating the User Task `Priority` into a `PriorityDescription`. The\n`LanguageID` and `CountryID` filters are compared against the user context requesting this information, and the `UserTaskTypeID`, `UserTaskSubTypeID`\nand `Priority` are taken from the User Task itself. The `Priority` from the User Task will be compared against the `From` and `To` ranges defined,\nwhere the `From` priority is an *inclusive* lower bound, while `To` is the *exclusive* upper bound.\n\nThe `Description` will be used to describe the priority, but when left empty, will fall back to `Name`.\n\nAn example configuration could be as follows;\n\n```\nLanguage | From | To | Description\n---------|------|----|------------\n      NL |      |    | Standaard\n      NL |   10 |    | Spoed\n      DE |      | 10 | Unwichtig\n         |      |    | Default\n```\n\nA User Task with priority 9 for a Dutch employee would be labelled \"Standaard\", while for a German colleague this would be called \"Unwichtig\". A\nUser Task of priority 10 would be called \"Spoed\" in Dutch, but \"Default\" in German.\n\n:sunglasses: For added awesomeness, if you define overlapping priority ranges, we'll select the most narrow range for you.",
        "operationId": "GetUserTaskPriorities",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.GetUserTaskPriorities"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetUserTaskPriorities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.GetUserTaskPrioritiesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateUserTaskPriority": {
      "summary": "CreateUserTaskPriority",
      "description": "Creates a new User Task Priority.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.CreateUserTaskPriority",
        "description": "Creates a new User Task Priority.",
        "operationId": "CreateUserTaskPriority",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.CreateUserTaskPriority"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateUserTaskPriority",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.CreateUserTaskPriorityResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateUserTaskPriority": {
      "summary": "UpdateUserTaskPriority",
      "description": "Updates an existing User Task Priority.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.UpdateUserTaskPriority",
        "description": "Updates an existing User Task Priority.",
        "operationId": "UpdateUserTaskPriority",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.UpdateUserTaskPriority"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateUserTaskPriority",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteUserTaskPriority": {
      "summary": "DeleteUserTaskPriority",
      "description": "Deletes a User Task Priority.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.DeleteUserTaskPriority",
        "description": "Deletes a User Task Priority.",
        "operationId": "DeleteUserTaskPriority",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.DeleteUserTaskPriority"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteUserTaskPriority",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateUserTaskTypeOrganizationUnitSet": {
      "summary": "CreateUserTaskTypeOrganizationUnitSet",
      "description": "The CreateUserTaskTypeOrganizationUnitSet service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.CreateUserTaskTypeOrganizationUnitSet",
        "description": "The CreateUserTaskTypeOrganizationUnitSet service",
        "operationId": "CreateUserTaskTypeOrganizationUnitSet",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.CreateUserTaskTypeOrganizationUnitSet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateUserTaskTypeOrganizationUnitSet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.UserTaskTypeOrganizationUnitSetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetUserTaskTypeOrganizationUnitSet": {
      "summary": "GetUserTaskTypeOrganizationUnitSet",
      "description": "The GetUserTaskTypeOrganizationUnitSet service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.GetUserTaskTypeOrganizationUnitSet",
        "description": "The GetUserTaskTypeOrganizationUnitSet service",
        "operationId": "GetUserTaskTypeOrganizationUnitSet",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.GetUserTaskTypeOrganizationUnitSet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetUserTaskTypeOrganizationUnitSet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.UserTaskTypeOrganizationUnitSetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateUserTaskTypeOrganizationUnitSet": {
      "summary": "UpdateUserTaskTypeOrganizationUnitSet",
      "description": "The UpdateUserTaskTypeOrganizationUnitSet service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.UpdateUserTaskTypeOrganizationUnitSet",
        "description": "The UpdateUserTaskTypeOrganizationUnitSet service",
        "operationId": "UpdateUserTaskTypeOrganizationUnitSet",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.UpdateUserTaskTypeOrganizationUnitSet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateUserTaskTypeOrganizationUnitSet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.UserTaskTypeOrganizationUnitSetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteUserTaskTypeOrganizationUnitSet": {
      "summary": "DeleteUserTaskTypeOrganizationUnitSet",
      "description": "The DeleteUserTaskTypeOrganizationUnitSet service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.DeleteUserTaskTypeOrganizationUnitSet",
        "description": "The DeleteUserTaskTypeOrganizationUnitSet service",
        "operationId": "DeleteUserTaskTypeOrganizationUnitSet",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.DeleteUserTaskTypeOrganizationUnitSet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteUserTaskTypeOrganizationUnitSet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListUserTaskTypeOrganizationUnitSets": {
      "summary": "ListUserTaskTypeOrganizationUnitSets",
      "description": "The ListUserTaskTypeOrganizationUnitSets service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ListUserTaskTypeOrganizationUnitSets",
        "description": "The ListUserTaskTypeOrganizationUnitSets service",
        "operationId": "ListUserTaskTypeOrganizationUnitSets",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ListUserTaskTypeOrganizationUnitSets"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListUserTaskTypeOrganizationUnitSets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.ListUserTaskTypeOrganizationUnitSetsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetUserTaskTypes": {
      "summary": "GetUserTaskTypes",
      "description": "The GetUserTaskTypes service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.GetUserTaskTypes",
        "description": "The GetUserTaskTypes service",
        "operationId": "GetUserTaskTypes",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.GetUserTaskTypes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetUserTaskTypes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.GetUserTaskTypesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateUserTaskType": {
      "summary": "UpdateUserTaskType",
      "description": "The UpdateUserTaskType service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.UpdateUserTaskType",
        "description": "The UpdateUserTaskType service",
        "operationId": "UpdateUserTaskType",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.UpdateUserTaskType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateUserTaskType",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetCycleCountSettings": {
      "summary": "SetCycleCountSettings",
      "description": "This service is used in combination with the `GetCycleCountSettings` to manage OrganizationUnit settings for CycleCounts.\nOptionally an OrganizationUnitID can be provided, but by default the settings are updated for the current OrganizationUnit.\n\n- GenerateCycleCountAfterNASC: After a NASC is created, a CycleCount will be generated\n- MaxCycleCountsPerShop: The max number of active cyclecounts per shop\n- MaxCycleCountsPerShopPerDay: The max number of cyclecounts to create per day per shop\n- PastDueProductsOnly: Generate only cyclecounts for products when the interval is expired\n- CycleCountDays: On which days cyclecounts should be generated\n- StockLabels: Which StockLabels should be counted",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.CycleCounts.SetCycleCountSettings",
        "description": "This service is used in combination with the `GetCycleCountSettings` to manage OrganizationUnit settings for CycleCounts.\nOptionally an OrganizationUnitID can be provided, but by default the settings are updated for the current OrganizationUnit.\n\n- GenerateCycleCountAfterNASC: After a NASC is created, a CycleCount will be generated\n- MaxCycleCountsPerShop: The max number of active cyclecounts per shop\n- MaxCycleCountsPerShopPerDay: The max number of cyclecounts to create per day per shop\n- PastDueProductsOnly: Generate only cyclecounts for products when the interval is expired\n- CycleCountDays: On which days cyclecounts should be generated\n- StockLabels: Which StockLabels should be counted",
        "operationId": "SetCycleCountSettings",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.CycleCounts.SetCycleCountSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetCycleCountSettings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetCycleCountSettings": {
      "summary": "GetCycleCountSettings",
      "description": "The GetCycleCountSettings service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.CycleCounts.GetCycleCountSettings",
        "description": "The GetCycleCountSettings service",
        "operationId": "GetCycleCountSettings",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.CycleCounts.GetCycleCountSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetCycleCountSettings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.CycleCounts.GetCycleCountSettingsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CompleteZonedCycleCountPreCount": {
      "summary": "CompleteZonedCycleCountPreCount",
      "description": "The CompleteZonedCycleCountPreCount service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.CompleteZonedCycleCountPreCount",
        "description": "The CompleteZonedCycleCountPreCount service",
        "operationId": "CompleteZonedCycleCountPreCount",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.CompleteZonedCycleCountPreCount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CompleteZonedCycleCountPreCount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CompleteZonedCycleCounts": {
      "summary": "CompleteZonedCycleCounts",
      "description": "The CompleteZonedCycleCounts service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.CompleteZonedCycleCounts",
        "description": "The CompleteZonedCycleCounts service",
        "operationId": "CompleteZonedCycleCounts",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.CompleteZonedCycleCounts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CompleteZonedCycleCounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CountStockLabelForZonedCycleCount": {
      "summary": "CountStockLabelForZonedCycleCount",
      "description": "The CountStockLabelForZonedCycleCount service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.CountStockLabelForZonedCycleCount",
        "description": "The CountStockLabelForZonedCycleCount service",
        "operationId": "CountStockLabelForZonedCycleCount",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.CountStockLabelForZonedCycleCount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CountStockLabelForZonedCycleCount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.CountStockLabelForZonedCycleCountResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateZonedCycleCount": {
      "summary": "CreateZonedCycleCount",
      "description": "Creates one cycle count for the requested Product and Organization Unit (with origin Manual)",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.CreateZonedCycleCount",
        "description": "Creates one cycle count for the requested Product and Organization Unit (with origin Manual)",
        "operationId": "CreateZonedCycleCount",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.CreateZonedCycleCount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateZonedCycleCount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateZonedCycleCounts": {
      "summary": "CreateZonedCycleCounts",
      "description": "Asynchronously creates cycle counts for all requested combinations of Products and Organization Units (with origin Manual)",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.CreateZonedCycleCounts",
        "description": "Asynchronously creates cycle counts for all requested combinations of Products and Organization Units (with origin Manual)",
        "operationId": "CreateZonedCycleCounts",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.CreateZonedCycleCounts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateZonedCycleCounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateZonedCycleCountsByQuery": {
      "summary": "CreateZonedCycleCountsByQuery",
      "description": "Asynchronously creates cycle counts for all requested combinations of (type Stock) Products and Organization Units that match specified filters (with origin Manual)",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.CreateZonedCycleCountsByQuery",
        "description": "Asynchronously creates cycle counts for all requested combinations of (type Stock) Products and Organization Units that match specified filters (with origin Manual)",
        "operationId": "CreateZonedCycleCountsByQuery",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.CreateZonedCycleCountsByQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateZonedCycleCountsByQuery",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetCycleCountOriginTypes": {
      "summary": "GetCycleCountOriginTypes",
      "description": "The GetCycleCountOriginTypes service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.GetCycleCountOriginTypes",
        "description": "The GetCycleCountOriginTypes service",
        "operationId": "GetCycleCountOriginTypes",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.GetCycleCountOriginTypes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetCycleCountOriginTypes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.GetCycleCountOriginTypesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateCycleCountOriginType": {
      "summary": "UpdateCycleCountOriginType",
      "description": "The UpdateCycleCountOriginType service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.UpdateCycleCountOriginType",
        "description": "The UpdateCycleCountOriginType service",
        "operationId": "UpdateCycleCountOriginType",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.UpdateCycleCountOriginType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateCycleCountOriginType",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateCycleCountZoneGroup": {
      "summary": "CreateCycleCountZoneGroup",
      "description": "Creates a new CycleCountZoneGroup.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.CreateCycleCountZoneGroup",
        "description": "Creates a new CycleCountZoneGroup.",
        "operationId": "CreateCycleCountZoneGroup",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.CreateCycleCountZoneGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateCycleCountZoneGroup",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.CreateCycleCountZoneGroupResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateCycleCountZoneGroup": {
      "summary": "UpdateCycleCountZoneGroup",
      "description": "Updates an existing CycleCountZoneGroup.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.UpdateCycleCountZoneGroup",
        "description": "Updates an existing CycleCountZoneGroup.",
        "operationId": "UpdateCycleCountZoneGroup",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.UpdateCycleCountZoneGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateCycleCountZoneGroup",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteCycleCountZoneGroup": {
      "summary": "DeleteCycleCountZoneGroup",
      "description": "Deletes a CycleCountZoneGroup by its ID",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.DeleteCycleCountZoneGroup",
        "description": "Deletes a CycleCountZoneGroup by its ID",
        "operationId": "DeleteCycleCountZoneGroup",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.DeleteCycleCountZoneGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteCycleCountZoneGroup",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListCycleCountZoneGroups": {
      "summary": "ListCycleCountZoneGroups",
      "description": "Gets all the CycleCountZoneGroups based on the given filter and returns a paged response.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.ListCycleCountZoneGroups",
        "description": "Gets all the CycleCountZoneGroups based on the given filter and returns a paged response.",
        "operationId": "ListCycleCountZoneGroups",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.ListCycleCountZoneGroups"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListCycleCountZoneGroups",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.ListCycleCountZoneGroupsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ValidateCycleCountZoneGroup": {
      "summary": "ValidateCycleCountZoneGroup",
      "description": "Before calling Create/UpdateCycleCountZone group you can call this service to perform some checks on the validity of the new zone group.\nCurrently it only returns warnings and calling it is not required before creating or updating the group, but it is recommended as it prevents confusing situations such as the same OrganizationUnit being part\nof multiple groups at the same time.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.ValidateCycleCountZoneGroup",
        "description": "Before calling Create/UpdateCycleCountZone group you can call this service to perform some checks on the validity of the new zone group.\nCurrently it only returns warnings and calling it is not required before creating or updating the group, but it is recommended as it prevents confusing situations such as the same OrganizationUnit being part\nof multiple groups at the same time.",
        "operationId": "ValidateCycleCountZoneGroup",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.ValidateCycleCountZoneGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ValidateCycleCountZoneGroup",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.ValidateCycleCountZoneGroupResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateCycleCountZone": {
      "summary": "CreateCycleCountZone",
      "description": "The CreateCycleCountZone service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.CreateCycleCountZone",
        "description": "The CreateCycleCountZone service",
        "operationId": "CreateCycleCountZone",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.CreateCycleCountZone"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateCycleCountZone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateCycleCountZone": {
      "summary": "UpdateCycleCountZone",
      "description": "The UpdateCycleCountZone service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.UpdateCycleCountZone",
        "description": "The UpdateCycleCountZone service",
        "operationId": "UpdateCycleCountZone",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.UpdateCycleCountZone"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateCycleCountZone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteCycleCountZone": {
      "summary": "DeleteCycleCountZone",
      "description": "The DeleteCycleCountZone service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.DeleteCycleCountZone",
        "description": "The DeleteCycleCountZone service",
        "operationId": "DeleteCycleCountZone",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.DeleteCycleCountZone"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteCycleCountZone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetUserWhoDeletedCycleCountZoneAndMakeItGreatAgain": {
      "summary": "GetUserWhoDeletedCycleCountZoneAndMakeItGreatAgain",
      "description": "The GetUserWhoDeletedCycleCountZoneAndMakeItGreatAgain service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.GetUserWhoDeletedCycleCountZoneAndMakeItGreatAgain",
        "description": "The GetUserWhoDeletedCycleCountZoneAndMakeItGreatAgain service",
        "operationId": "GetUserWhoDeletedCycleCountZoneAndMakeItGreatAgain",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.GetUserWhoDeletedCycleCountZoneAndMakeItGreatAgain"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetUserWhoDeletedCycleCountZoneAndMakeItGreatAgain",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.GetUserWhoDeletedCycleCountZoneAndMakeItGreatAgainResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetCycleCountZones": {
      "summary": "GetCycleCountZones",
      "description": "The GetCycleCountZones service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.GetCycleCountZones",
        "description": "The GetCycleCountZones service",
        "operationId": "GetCycleCountZones",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.GetCycleCountZones"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetCycleCountZones",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.GetCycleCountZonesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ReplaceCycleCountZonesForOrganizationUnit": {
      "summary": "ReplaceCycleCountZonesForOrganizationUnit",
      "description": "The ReplaceCycleCountZonesForOrganizationUnit service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.ReplaceCycleCountZonesForOrganizationUnit",
        "description": "The ReplaceCycleCountZonesForOrganizationUnit service",
        "operationId": "ReplaceCycleCountZonesForOrganizationUnit",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.ReplaceCycleCountZonesForOrganizationUnit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ReplaceCycleCountZonesForOrganizationUnit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListCycleZonesForOrganizationUnits": {
      "summary": "ListCycleZonesForOrganizationUnits",
      "description": "The ListCycleZonesForOrganizationUnits service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.ListCycleZonesForOrganizationUnits",
        "description": "The ListCycleZonesForOrganizationUnits service",
        "operationId": "ListCycleZonesForOrganizationUnits",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.ListCycleZonesForOrganizationUnits"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListCycleZonesForOrganizationUnits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.ListCycleZonesForOrganizationUnitsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeactivateZonedCycleCount": {
      "summary": "DeactivateZonedCycleCount",
      "description": "The DeactivateZonedCycleCount service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.DeactivateZonedCycleCount",
        "description": "The DeactivateZonedCycleCount service",
        "operationId": "DeactivateZonedCycleCount",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.DeactivateZonedCycleCount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeactivateZonedCycleCount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetStatusForZonedCycleCountPreCounts": {
      "summary": "GetStatusForZonedCycleCountPreCounts",
      "description": "Gets the status of the pre-counts of a cyclecount, if any. The input for this service is either the ID of the main count task (`ZonedCycleCountUserTaskID`)\nor the ID of a pre-count task (`PreCountUserTaskID`). If `PreCountUserTaskID` is specified, it returns the status of the sibling pre-counts.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.GetStatusForZonedCycleCountPreCounts",
        "description": "Gets the status of the pre-counts of a cyclecount, if any. The input for this service is either the ID of the main count task (`ZonedCycleCountUserTaskID`)\nor the ID of a pre-count task (`PreCountUserTaskID`). If `PreCountUserTaskID` is specified, it returns the status of the sibling pre-counts.",
        "operationId": "GetStatusForZonedCycleCountPreCounts",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.GetStatusForZonedCycleCountPreCounts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetStatusForZonedCycleCountPreCounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.GetStatusForZonedCycleCountPreCountsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetZonedCycleCountPreCount": {
      "summary": "GetZonedCycleCountPreCount",
      "description": "Returns a detailed view of a ZonedCycleCountPreCount by the ID of its UserTask.\n\nThe response contains:\n\n- Which StockLabels to count (`StockLabelsToCount`)\n- The product that needs to be counted (`Product`); this product contains all the fields in its `Content` object that were requested through the `IncludedFields` property on the request, or a default set of fields if not specified\n- Zone that needs to be counted (`CycleCountZone`)\n- List of stock labels to be counted (`StockLabelsToCount`)\n- List of required resource types (`RequiredResourceTypes`)",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.GetZonedCycleCountPreCount",
        "description": "Returns a detailed view of a ZonedCycleCountPreCount by the ID of its UserTask.\n\nThe response contains:\n\n- Which StockLabels to count (`StockLabelsToCount`)\n- The product that needs to be counted (`Product`); this product contains all the fields in its `Content` object that were requested through the `IncludedFields` property on the request, or a default set of fields if not specified\n- Zone that needs to be counted (`CycleCountZone`)\n- List of stock labels to be counted (`StockLabelsToCount`)\n- List of required resource types (`RequiredResourceTypes`)",
        "operationId": "GetZonedCycleCountPreCount",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.GetZonedCycleCountPreCount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetZonedCycleCountPreCount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.GetZonedCycleCountPreCountResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetZonedCycleCount": {
      "summary": "GetZonedCycleCount",
      "description": "Returns a detailed view of a ZonedCycleCount by the ID of its UserTask.\n\nThe response contains:\n\n- Which StockLabels to count (`StockLabelsToCount`)\n- The product that needs to be counted. This product contains all the fields in its `Content` object that were requested through the `IncludedFields` property on the request, or a default set of fields if not specified.\n- Which StockMutations have been created since the first pre-count (if any) per StockLabel (`StockMutationsSincePreCount`)\n- A list of all pre-counts, complete with the zone that needs to be counted, the user who did the count (if the count already happened) and a list of count results per StockLabel\n- A list of pre-counted quantityies per StockLabel (`PreCountedQuantities`)\n- A list of the total quantity of stock mutated per StockLabel (a summary of `StockMutationsSincePreCount`).\n- The current stock per StockLabel\n- ExpectedPreCountedQuantity: This is stored on the ZonedCyleCount the moment the last pre-count has been completed, and is a sum of the expected Stock at that moment.\n- PreCountedQuantity: The quantity that was actually counted in all pre-counts over all StockLabels. This is recorded when all pre-counts have been completed.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.GetZonedCycleCount",
        "description": "Returns a detailed view of a ZonedCycleCount by the ID of its UserTask.\n\nThe response contains:\n\n- Which StockLabels to count (`StockLabelsToCount`)\n- The product that needs to be counted. This product contains all the fields in its `Content` object that were requested through the `IncludedFields` property on the request, or a default set of fields if not specified.\n- Which StockMutations have been created since the first pre-count (if any) per StockLabel (`StockMutationsSincePreCount`)\n- A list of all pre-counts, complete with the zone that needs to be counted, the user who did the count (if the count already happened) and a list of count results per StockLabel\n- A list of pre-counted quantityies per StockLabel (`PreCountedQuantities`)\n- A list of the total quantity of stock mutated per StockLabel (a summary of `StockMutationsSincePreCount`).\n- The current stock per StockLabel\n- ExpectedPreCountedQuantity: This is stored on the ZonedCyleCount the moment the last pre-count has been completed, and is a sum of the expected Stock at that moment.\n- PreCountedQuantity: The quantity that was actually counted in all pre-counts over all StockLabels. This is recorded when all pre-counts have been completed.",
        "operationId": "GetZonedCycleCount",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.GetZonedCycleCount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetZonedCycleCount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.GetZonedCycleCountResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListZonedCycleCounts": {
      "summary": "ListZonedCycleCounts",
      "description": "The page size `Limit` has a maximum value of `250` for this service.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.ListZonedCycleCounts",
        "description": "The page size `Limit` has a maximum value of `250` for this service.",
        "operationId": "ListZonedCycleCounts",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.ListZonedCycleCounts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListZonedCycleCounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.ListZonedCycleCountsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ProduceZonedCycleCountHandout": {
      "summary": "ProduceZonedCycleCountHandout",
      "description": "",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.ProduceZonedCycleCountHandout",
        "description": "",
        "operationId": "ProduceZonedCycleCountHandout",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.ProduceZonedCycleCountHandout"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ProduceZonedCycleCountHandout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.ProduceZonedCycleCountHandoutResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/StartZonedCycleCountPreCount": {
      "summary": "StartZonedCycleCountPreCount",
      "description": "Starts a ZonedCycleCountPreCount by the ID of its UserTask.\n\nThe response contains:\n\n- Which StockLabels to count (`StockLabelsToCount`)\n- The product that needs to be counted (`Product`); this product contains all the fields in its `Content` object that were requested through the `IncludedFields` property on the request, or a default set of fields if not specified\n- Zone that needs to be counted (`CycleCountZone`)\n- List of stock labels to be counted (`StockLabelsToCount`)",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.StartZonedCycleCountPreCount",
        "description": "Starts a ZonedCycleCountPreCount by the ID of its UserTask.\n\nThe response contains:\n\n- Which StockLabels to count (`StockLabelsToCount`)\n- The product that needs to be counted (`Product`); this product contains all the fields in its `Content` object that were requested through the `IncludedFields` property on the request, or a default set of fields if not specified\n- Zone that needs to be counted (`CycleCountZone`)\n- List of stock labels to be counted (`StockLabelsToCount`)",
        "operationId": "StartZonedCycleCountPreCount",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.StartZonedCycleCountPreCount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to StartZonedCycleCountPreCount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.StartZonedCycleCountPreCountResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/StartZonedCycleCount": {
      "summary": "StartZonedCycleCount",
      "description": "The StartZonedCycleCount service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.StartZonedCycleCount",
        "description": "The StartZonedCycleCount service",
        "operationId": "StartZonedCycleCount",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.StartZonedCycleCount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to StartZonedCycleCount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.StartZonedCycleCountResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateZonedCycleCountSchedule": {
      "summary": "CreateZonedCycleCountSchedule",
      "description": "Creates a Zoned Cycle Count Schedule.\n\nIt is required to specify either a set `Date`, or a `CycleCountIntervalInDays`.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.CreateZonedCycleCountSchedule",
        "description": "Creates a Zoned Cycle Count Schedule.\n\nIt is required to specify either a set `Date`, or a `CycleCountIntervalInDays`.",
        "operationId": "CreateZonedCycleCountSchedule",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.CreateZonedCycleCountSchedule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateZonedCycleCountSchedule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.CreateZonedCycleCountScheduleResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListZonedCycleCountSchedules": {
      "summary": "ListZonedCycleCountSchedules",
      "description": "Lists the Zoned Cycle Count Schedules.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.ListZonedCycleCountSchedules",
        "description": "Lists the Zoned Cycle Count Schedules.",
        "operationId": "ListZonedCycleCountSchedules",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.ListZonedCycleCountSchedules"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListZonedCycleCountSchedules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.ListZonedCycleCountSchedulesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateZonedCycleCountSchedule": {
      "summary": "UpdateZonedCycleCountSchedule",
      "description": "Updates a Zoned Cycle Count Schedule.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.UpdateZonedCycleCountSchedule",
        "description": "Updates a Zoned Cycle Count Schedule.",
        "operationId": "UpdateZonedCycleCountSchedule",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.UpdateZonedCycleCountSchedule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateZonedCycleCountSchedule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteZonedCycleCountSchedule": {
      "summary": "DeleteZonedCycleCountSchedule",
      "description": "Deletes a Zoned Cycle Count Schedule.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ZonedCycleCounts.DeleteZonedCycleCountSchedule",
        "description": "Deletes a Zoned Cycle Count Schedule.",
        "operationId": "DeleteZonedCycleCountSchedule",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.DeleteZonedCycleCountSchedule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteZonedCycleCountSchedule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CompleteStockReservationTask": {
      "summary": "CompleteStockReservationTask",
      "description": "Complete a StockReservation task that has been started with the StartStockReservation(2) service\n\nThe service should be called with a line for each orderline that should be reserved. It is not required anymore to send a line for each item on a line.\n\nProvide each line with an OrderLineID and a QuantityTo(Cancel/Reserve/Order).",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.StockReservation.CompleteStockReservationTask",
        "description": "Complete a StockReservation task that has been started with the StartStockReservation(2) service\n\nThe service should be called with a line for each orderline that should be reserved. It is not required anymore to send a line for each item on a line.\n\nProvide each line with an OrderLineID and a QuantityTo(Cancel/Reserve/Order).",
        "operationId": "CompleteStockReservationTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.StockReservation.CompleteStockReservationTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CompleteStockReservationTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetStockReservationTask": {
      "summary": "GetStockReservationTask",
      "description": "Retrieve details on a Stock Reservation Task based on an OrderID.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.StockReservation.GetStockReservationTask",
        "description": "Retrieve details on a Stock Reservation Task based on an OrderID.",
        "operationId": "GetStockReservationTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.StockReservation.GetStockReservationTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetStockReservationTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.StockReservation.GetStockReservationTaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/PrintStockReservationReceipt": {
      "summary": "PrintStockReservationReceipt",
      "description": "Print the Reservation receipt for the given Order",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.StockReservation.PrintStockReservationReceipt",
        "description": "Print the Reservation receipt for the given Order",
        "operationId": "PrintStockReservationReceipt",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.StockReservation.PrintStockReservationReceipt"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to PrintStockReservationReceipt",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/StartStockReservation2": {
      "summary": "StartStockReservation2",
      "description": "Starts a user task of type Stock Reservation.\n\n- The task will return all required data for display purposes\n- When no lines are returned, the task is already completed or in progress by someone else\n- To complete the StockReservation task, use the `CompleteStockReservationTask` service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.StockReservation.StartStockReservation2",
        "description": "Starts a user task of type Stock Reservation.\n\n- The task will return all required data for display purposes\n- When no lines are returned, the task is already completed or in progress by someone else\n- To complete the StockReservation task, use the `CompleteStockReservationTask` service",
        "operationId": "StartStockReservation2",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.StockReservation.StartStockReservation2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to StartStockReservation2",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.StockReservation.StartStockReservationResponse2"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CompleteReservationCleanup": {
      "summary": "CompleteReservationCleanup",
      "description": "The CompleteReservationCleanup service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ReservationCleanup.CompleteReservationCleanup",
        "description": "The CompleteReservationCleanup service",
        "operationId": "CompleteReservationCleanup",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ReservationCleanup.CompleteReservationCleanup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CompleteReservationCleanup",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/StartReservationCleanup": {
      "summary": "StartReservationCleanup",
      "description": "The StartReservationCleanup service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ReservationCleanup.StartReservationCleanup",
        "description": "The StartReservationCleanup service",
        "operationId": "StartReservationCleanup",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ReservationCleanup.StartReservationCleanup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to StartReservationCleanup",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.ReservationCleanup.StartReservationCleanupResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CompleteStockReplenishment": {
      "summary": "CompleteStockReplenishment",
      "description": "Completes a Stock Replenishment task, using the UserTaskIDs from the `WorkSet` returned by the `StartStockReplenishment` service.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.StockReplenishment.CompleteStockReplenishment",
        "description": "Completes a Stock Replenishment task, using the UserTaskIDs from the `WorkSet` returned by the `StartStockReplenishment` service.",
        "operationId": "CompleteStockReplenishment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.StockReplenishment.CompleteStockReplenishment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CompleteStockReplenishment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateStockReplenishmentTask": {
      "summary": "CreateStockReplenishmentTask",
      "description": "Creates a new Stock Replenishment task.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.StockReplenishment.CreateStockReplenishmentTask",
        "description": "Creates a new Stock Replenishment task.",
        "operationId": "CreateStockReplenishmentTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.StockReplenishment.CreateStockReplenishmentTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateStockReplenishmentTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateStockReplenishmentTasks": {
      "summary": "CreateStockReplenishmentTasks",
      "description": "Creates new Stock Replenishment tasks in bulk, with `Products` being a key-value pair of integer product ID's and quantities.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.StockReplenishment.CreateStockReplenishmentTasks",
        "description": "Creates new Stock Replenishment tasks in bulk, with `Products` being a key-value pair of integer product ID's and quantities.",
        "operationId": "CreateStockReplenishmentTasks",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.StockReplenishment.CreateStockReplenishmentTasks"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateStockReplenishmentTasks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetStockReplenishmentTaskData": {
      "summary": "GetStockReplenishmentTaskData",
      "description": "Get the additional Stock Replenishment task data.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.StockReplenishment.GetStockReplenishmentTaskData",
        "description": "Get the additional Stock Replenishment task data.",
        "operationId": "GetStockReplenishmentTaskData",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.StockReplenishment.GetStockReplenishmentTaskData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetStockReplenishmentTaskData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.StockReplenishment.GetStockReplenishmentTaskDataResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetStockReplenishmentTaskZones": {
      "summary": "GetStockReplenishmentTaskZones",
      "description": "Get the configured zones for your current organization unit.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.StockReplenishment.GetStockReplenishmentTaskZones",
        "description": "Get the configured zones for your current organization unit.",
        "operationId": "GetStockReplenishmentTaskZones",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.StockReplenishment.GetStockReplenishmentTaskZones"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetStockReplenishmentTaskZones",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.StockReplenishment.GetStockReplenishmentTaskZonesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListStockReplenishmentTaskData": {
      "summary": "ListStockReplenishmentTaskData",
      "description": "Lists the additional Stock Replenishment task data.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.StockReplenishment.ListStockReplenishmentTaskData",
        "description": "Lists the additional Stock Replenishment task data.",
        "operationId": "ListStockReplenishmentTaskData",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.StockReplenishment.ListStockReplenishmentTaskData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListStockReplenishmentTaskData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.StockReplenishment.ListStockReplenishmentTaskDataResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/StartStockReplenishment": {
      "summary": "StartStockReplenishment",
      "description": "Starts one or more Stock Replenishment tasks, returning a workset. Pass this workset to the `CompleteStockReplenishment` service when all tasks are complete.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.StockReplenishment.StartStockReplenishment",
        "description": "Starts one or more Stock Replenishment tasks, returning a workset. Pass this workset to the `CompleteStockReplenishment` service when all tasks are complete.",
        "operationId": "StartStockReplenishment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.StockReplenishment.StartStockReplenishment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to StartStockReplenishment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.StockReplenishment.StartStockReplenishmentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateStockReplenishmentTaskData": {
      "summary": "UpdateStockReplenishmentTaskData",
      "description": "Updates Stock Replenishment task data.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.StockReplenishment.UpdateStockReplenishmentTaskData",
        "description": "Updates Stock Replenishment task data.",
        "operationId": "UpdateStockReplenishmentTaskData",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.StockReplenishment.UpdateStockReplenishmentTaskData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateStockReplenishmentTaskData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/StartSecondChanceProductRegistration": {
      "summary": "StartSecondChanceProductRegistration",
      "description": "The StartSecondChanceProductRegistration service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.SecondChanceProductRegistrationUserTask.StartSecondChanceProductRegistration",
        "description": "The StartSecondChanceProductRegistration service",
        "operationId": "StartSecondChanceProductRegistration",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.SecondChanceProductRegistrationUserTask.StartSecondChanceProductRegistration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to StartSecondChanceProductRegistration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.SecondChanceProductRegistrationUserTask.StartSecondChanceProductRegistrationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CancelSecondChanceProductRegistration": {
      "summary": "CancelSecondChanceProductRegistration",
      "description": "The CancelSecondChanceProductRegistration service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.SecondChanceProductRegistrationUserTask.CancelSecondChanceProductRegistration",
        "description": "The CancelSecondChanceProductRegistration service",
        "operationId": "CancelSecondChanceProductRegistration",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.SecondChanceProductRegistrationUserTask.CancelSecondChanceProductRegistration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CancelSecondChanceProductRegistration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CompleteSecondChanceProductRegistration": {
      "summary": "CompleteSecondChanceProductRegistration",
      "description": "The CompleteSecondChanceProductRegistration service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.SecondChanceProductRegistrationUserTask.CompleteSecondChanceProductRegistration",
        "description": "The CompleteSecondChanceProductRegistration service",
        "operationId": "CompleteSecondChanceProductRegistration",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.SecondChanceProductRegistrationUserTask.CompleteSecondChanceProductRegistration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CompleteSecondChanceProductRegistration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.SecondChanceProductRegistrationUserTask.CompleteSecondChanceProductRegistrationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/StartReceiveShipment": {
      "summary": "StartReceiveShipment",
      "description": "The StartReceiveShipment service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ReceiveShipment.StartReceiveShipment",
        "description": "The StartReceiveShipment service",
        "operationId": "StartReceiveShipment",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ReceiveShipment.StartReceiveShipment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to StartReceiveShipment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.ReceiveShipment.StartReceiveShipmentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CanProcessInitialCycleCount": {
      "summary": "CanProcessInitialCycleCount",
      "description": "The CanProcessInitialCycleCount service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.InitialCycleCounts.CanProcessInitialCycleCount",
        "description": "The CanProcessInitialCycleCount service",
        "operationId": "CanProcessInitialCycleCount",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.InitialCycleCounts.CanProcessInitialCycleCount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CanProcessInitialCycleCount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.InitialCycleCounts.CanProcessInitialCycleCountResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CountProductForInitialCycleCount": {
      "summary": "CountProductForInitialCycleCount",
      "description": "The CountProductForInitialCycleCount service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.InitialCycleCounts.CountProductForInitialCycleCount",
        "description": "The CountProductForInitialCycleCount service",
        "operationId": "CountProductForInitialCycleCount",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.InitialCycleCounts.CountProductForInitialCycleCount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CountProductForInitialCycleCount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateInitialCycleCount": {
      "summary": "CreateInitialCycleCount",
      "description": "The CreateInitialCycleCount service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.InitialCycleCounts.CreateInitialCycleCount",
        "description": "The CreateInitialCycleCount service",
        "operationId": "CreateInitialCycleCount",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.InitialCycleCounts.CreateInitialCycleCount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateInitialCycleCount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.InitialCycleCounts.CreateInitialCycleCountResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteInitialCycleCountResult": {
      "summary": "DeleteInitialCycleCountResult",
      "description": "The DeleteInitialCycleCountResult service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.InitialCycleCounts.DeleteInitialCycleCountResult",
        "description": "The DeleteInitialCycleCountResult service",
        "operationId": "DeleteInitialCycleCountResult",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.InitialCycleCounts.DeleteInitialCycleCountResult"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteInitialCycleCountResult",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetCurrentInitialCycleCount": {
      "summary": "GetCurrentInitialCycleCount",
      "description": "The GetCurrentInitialCycleCount service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.InitialCycleCounts.GetCurrentInitialCycleCount",
        "description": "The GetCurrentInitialCycleCount service",
        "operationId": "GetCurrentInitialCycleCount",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.InitialCycleCounts.GetCurrentInitialCycleCount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetCurrentInitialCycleCount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.InitialCycleCounts.GetCurrentInitialCycleCountResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetInitialCycleCountLabel": {
      "summary": "GetInitialCycleCountLabel",
      "description": "The GetInitialCycleCountLabel service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.InitialCycleCounts.GetInitialCycleCountLabel",
        "description": "The GetInitialCycleCountLabel service",
        "operationId": "GetInitialCycleCountLabel",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.InitialCycleCounts.GetInitialCycleCountLabel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetInitialCycleCountLabel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.InitialCycleCounts.GetInitialCycleCountLabelResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListInitialCycleCountLabels": {
      "summary": "ListInitialCycleCountLabels",
      "description": "The ListInitialCycleCountLabels service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.InitialCycleCounts.ListInitialCycleCountLabels",
        "description": "The ListInitialCycleCountLabels service",
        "operationId": "ListInitialCycleCountLabels",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.InitialCycleCounts.ListInitialCycleCountLabels"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListInitialCycleCountLabels",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.InitialCycleCounts.ListInitialCycleCountLabelsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListInitialCycleCountResults": {
      "summary": "ListInitialCycleCountResults",
      "description": "The ListInitialCycleCountResults service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.InitialCycleCounts.ListInitialCycleCountResults",
        "description": "The ListInitialCycleCountResults service",
        "operationId": "ListInitialCycleCountResults",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.InitialCycleCounts.ListInitialCycleCountResults"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListInitialCycleCountResults",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.InitialCycleCounts.ListInitialCycleCountResultsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/MissingProductForInitialCycleCount": {
      "summary": "MissingProductForInitialCycleCount",
      "description": "The MissingProductForInitialCycleCount service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.InitialCycleCounts.MissingProductForInitialCycleCount",
        "description": "The MissingProductForInitialCycleCount service",
        "operationId": "MissingProductForInitialCycleCount",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.InitialCycleCounts.MissingProductForInitialCycleCount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to MissingProductForInitialCycleCount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/PreCountInitialCycleCountLabel": {
      "summary": "PreCountInitialCycleCountLabel",
      "description": "The PreCountInitialCycleCountLabel service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.InitialCycleCounts.PreCountInitialCycleCountLabel",
        "description": "The PreCountInitialCycleCountLabel service",
        "operationId": "PreCountInitialCycleCountLabel",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.InitialCycleCounts.PreCountInitialCycleCountLabel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to PreCountInitialCycleCountLabel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ProcessInitialCycleCountResults": {
      "summary": "ProcessInitialCycleCountResults",
      "description": "The ProcessInitialCycleCountResults service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.InitialCycleCounts.ProcessInitialCycleCountResults",
        "description": "The ProcessInitialCycleCountResults service",
        "operationId": "ProcessInitialCycleCountResults",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.InitialCycleCounts.ProcessInitialCycleCountResults"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ProcessInitialCycleCountResults",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ProduceInitialCycleCountLabels": {
      "summary": "ProduceInitialCycleCountLabels",
      "description": "The ProduceInitialCycleCountLabels service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.InitialCycleCounts.ProduceInitialCycleCountLabels",
        "description": "The ProduceInitialCycleCountLabels service",
        "operationId": "ProduceInitialCycleCountLabels",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.InitialCycleCounts.ProduceInitialCycleCountLabels"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ProduceInitialCycleCountLabels",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.ResourceResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ValidatePreCount": {
      "summary": "ValidatePreCount",
      "description": "The ValidatePreCount service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.InitialCycleCounts.ValidatePreCount",
        "description": "The ValidatePreCount service",
        "operationId": "ValidatePreCount",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.InitialCycleCounts.ValidatePreCount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ValidatePreCount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.InitialCycleCounts.ValidatePreCountResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListFullStockCountLabelProducts": {
      "summary": "ListFullStockCountLabelProducts",
      "description": "Lists the products of specified full stock count label.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelProducts",
        "description": "Lists the products of specified full stock count label.",
        "operationId": "ListFullStockCountLabelProducts",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelProducts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListFullStockCountLabelProducts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelProductsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/RecountFullStockCountProduct": {
      "summary": "RecountFullStockCountProduct",
      "description": "Initiates a recount of the given FullStockCountProduct for the given FullStockCount. FullStockCount will not be completed.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.FullStockCountServices.RecountFullStockCountProduct",
        "description": "Initiates a recount of the given FullStockCountProduct for the given FullStockCount. FullStockCount will not be completed.",
        "operationId": "RecountFullStockCountProduct",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.RecountFullStockCountProduct"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to RecountFullStockCountProduct",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/AddProductToFullStockCountLabel": {
      "summary": "AddProductToFullStockCountLabel",
      "description": "Adds a product count result to specified Full Stock Count label. User task must be active and assigned to the current user.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.FullStockCountServices.AddProductToFullStockCountLabel",
        "description": "Adds a product count result to specified Full Stock Count label. User task must be active and assigned to the current user.",
        "operationId": "AddProductToFullStockCountLabel",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.AddProductToFullStockCountLabel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to AddProductToFullStockCountLabel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.AddProductToFullStockCountLabelResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/RecountFullStockCountLabel": {
      "summary": "RecountFullStockCountLabel",
      "description": "Initiates a recount of the given FullStockCountLabel. FullStockCount will not be completed.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.FullStockCountServices.RecountFullStockCountLabel",
        "description": "Initiates a recount of the given FullStockCountLabel. FullStockCount will not be completed.",
        "operationId": "RecountFullStockCountLabel",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.RecountFullStockCountLabel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to RecountFullStockCountLabel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.RecountFullStockCountLabelResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/StartFullStockCountLabel": {
      "summary": "StartFullStockCountLabel",
      "description": "Starts a Full Stock Count label task.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.FullStockCountServices.StartFullStockCountLabel",
        "description": "Starts a Full Stock Count label task.",
        "operationId": "StartFullStockCountLabel",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.StartFullStockCountLabel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to StartFullStockCountLabel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.StartFullStockCountLabelResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CancelFullStockCountLabel": {
      "summary": "CancelFullStockCountLabel",
      "description": "Cancel a specific Full Stock Count label.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.FullStockCountServices.CancelFullStockCountLabel",
        "description": "Cancel a specific Full Stock Count label.",
        "operationId": "CancelFullStockCountLabel",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.CancelFullStockCountLabel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CancelFullStockCountLabel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CompleteFullStockCountLabel": {
      "summary": "CompleteFullStockCountLabel",
      "description": "Completes a Full Stock Count label task. User task must be active and assigned to the current user.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.FullStockCountServices.CompleteFullStockCountLabel",
        "description": "Completes a Full Stock Count label task. User task must be active and assigned to the current user.",
        "operationId": "CompleteFullStockCountLabel",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.CompleteFullStockCountLabel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CompleteFullStockCountLabel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListFullStockCountLabels": {
      "summary": "ListFullStockCountLabels",
      "description": "Lists the Full Stock Count labels.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.FullStockCountServices.ListFullStockCountLabels",
        "description": "Lists the Full Stock Count labels.",
        "operationId": "ListFullStockCountLabels",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.ListFullStockCountLabels"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListFullStockCountLabels",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/PrintFullStockCountLabels": {
      "summary": "PrintFullStockCountLabels",
      "description": "Prints label(s) for specified Full Stock Count to specified station.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.FullStockCountServices.PrintFullStockCountLabels",
        "description": "Prints label(s) for specified Full Stock Count to specified station.",
        "operationId": "PrintFullStockCountLabels",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.PrintFullStockCountLabels"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to PrintFullStockCountLabels",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateFullStockCount": {
      "summary": "CreateFullStockCount",
      "description": "Initiate the Full Stock Count process for the current store. **Prevents basic store functionalities once started.**",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.FullStockCountServices.CreateFullStockCount",
        "description": "Initiate the Full Stock Count process for the current store. **Prevents basic store functionalities once started.**",
        "operationId": "CreateFullStockCount",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.CreateFullStockCount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateFullStockCount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.CreateFullStockCountResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/AddLabelToFullStockCount": {
      "summary": "AddLabelToFullStockCount",
      "description": "Adds a label to specified full stock count.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.FullStockCountServices.AddLabelToFullStockCount",
        "description": "Adds a label to specified full stock count.",
        "operationId": "AddLabelToFullStockCount",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.AddLabelToFullStockCount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to AddLabelToFullStockCount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.AddLabelToFullStockCountResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DownloadFullStockCountLabelUploadTemplate": {
      "summary": "DownloadFullStockCountLabelUploadTemplate",
      "description": "The DownloadFullStockCountLabelUploadTemplate service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.FullStockCountServices.DownloadFullStockCountLabelUploadTemplate",
        "description": "The DownloadFullStockCountLabelUploadTemplate service",
        "operationId": "DownloadFullStockCountLabelUploadTemplate",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.DownloadFullStockCountLabelUploadTemplate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DownloadFullStockCountLabelUploadTemplate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.ResourceResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UploadFullStockCountLabels": {
      "summary": "UploadFullStockCountLabels",
      "description": "Upload an excel with labels to the specified full stock count.\nCaution! The Name column can only be max 50 chars. Names larger then that will be rejected.\nCaution! This service will not change existing labels, but only add new ones. Duplicate detection is done on case insensitve Name in combination with StockLabel.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.FullStockCountServices.UploadFullStockCountLabels",
        "description": "Upload an excel with labels to the specified full stock count.\nCaution! The Name column can only be max 50 chars. Names larger then that will be rejected.\nCaution! This service will not change existing labels, but only add new ones. Duplicate detection is done on case insensitve Name in combination with StockLabel.",
        "operationId": "UploadFullStockCountLabels",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.UploadFullStockCountLabels"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UploadFullStockCountLabels",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.UploadFullStockCountLabelsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListFullStockCounts": {
      "summary": "ListFullStockCounts",
      "description": "Lists the full stock counts.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.FullStockCountServices.ListFullStockCounts",
        "description": "Lists the full stock counts.",
        "operationId": "ListFullStockCounts",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.ListFullStockCounts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListFullStockCounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.ListFullStockCountsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetFullStockCount": {
      "summary": "GetFullStockCount",
      "description": "Get a Full Stock count task with details.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.FullStockCountServices.GetFullStockCount",
        "description": "Get a Full Stock count task with details.",
        "operationId": "GetFullStockCount",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.GetFullStockCount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetFullStockCount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.GetFullStockCountResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/StartFullStockCount": {
      "summary": "StartFullStockCount",
      "description": "Starts a full stock count task. Requires it to be ready.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.FullStockCountServices.StartFullStockCount",
        "description": "Starts a full stock count task. Requires it to be ready.",
        "operationId": "StartFullStockCount",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.StartFullStockCount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to StartFullStockCount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.StartFullStockCountResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CancelFullStockCount": {
      "summary": "CancelFullStockCount",
      "description": "Cancel a full stock count, cancelling all related labels and their results.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.FullStockCountServices.CancelFullStockCount",
        "description": "Cancel a full stock count, cancelling all related labels and their results.",
        "operationId": "CancelFullStockCount",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.CancelFullStockCount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CancelFullStockCount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CompleteFullStockCount": {
      "summary": "CompleteFullStockCount",
      "description": "Completes a full stock count task. User task must be active and assigned to the current user.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.FullStockCountServices.CompleteFullStockCount",
        "description": "Completes a full stock count task. User task must be active and assigned to the current user.",
        "operationId": "CompleteFullStockCount",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.CompleteFullStockCount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CompleteFullStockCount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DownloadFullStockCountSummaryExcel": {
      "summary": "DownloadFullStockCountSummaryExcel",
      "description": "Exports the summary of specified Full Stock Count to Excel.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.FullStockCountServices.DownloadFullStockCountSummaryExcel",
        "description": "Exports the summary of specified Full Stock Count to Excel.",
        "operationId": "DownloadFullStockCountSummaryExcel",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.DownloadFullStockCountSummaryExcel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DownloadFullStockCountSummaryExcel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.ResourceResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DownloadFullStockCountSummaryPDF": {
      "summary": "DownloadFullStockCountSummaryPDF",
      "description": "Exports the summary of specified Full Stock Count to PDF.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.FullStockCountServices.DownloadFullStockCountSummaryPDF",
        "description": "Exports the summary of specified Full Stock Count to PDF.",
        "operationId": "DownloadFullStockCountSummaryPDF",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.DownloadFullStockCountSummaryPDF"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DownloadFullStockCountSummaryPDF",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.ResourceWithBlobIDResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListFullStockCountResult": {
      "summary": "ListFullStockCountResult",
      "description": "Lists the result of specified Full Stock Count.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.FullStockCountServices.ListFullStockCountResult",
        "description": "Lists the result of specified Full Stock Count.",
        "operationId": "ListFullStockCountResult",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.ListFullStockCountResult"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListFullStockCountResult",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.ListFullStockCountResultResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListFullStockCountSummary": {
      "summary": "ListFullStockCountSummary",
      "description": "Lists the summary of specified Full Stock Count.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.FullStockCountServices.ListFullStockCountSummary",
        "description": "Lists the summary of specified Full Stock Count.",
        "operationId": "ListFullStockCountSummary",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.ListFullStockCountSummary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListFullStockCountSummary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.UserTasks.FullStockCountUserTask.ListFullStockCountSummaryResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListFullStockCountLabelSummary": {
      "summary": "ListFullStockCountLabelSummary",
      "description": "Lists the summary of specified Full Stock Count.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelSummary",
        "description": "Lists the summary of specified Full Stock Count.",
        "operationId": "ListFullStockCountLabelSummary",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelSummary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListFullStockCountLabelSummary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelSummaryResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/RequestReindexUserSearchData": {
      "summary": "RequestReindexUserSearchData",
      "description": "The RequestReindexUserSearchData service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Users.Services.RequestReindexUserSearchData",
        "description": "The RequestReindexUserSearchData service",
        "operationId": "RequestReindexUserSearchData",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Users.Services.RequestReindexUserSearchData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to RequestReindexUserSearchData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/RequestReindexOrderSearchData": {
      "summary": "RequestReindexOrderSearchData",
      "description": "The RequestReindexOrderSearchData service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Orders.RequestReindexOrderSearchData",
        "description": "The RequestReindexOrderSearchData service",
        "operationId": "RequestReindexOrderSearchData",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Orders.RequestReindexOrderSearchData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to RequestReindexOrderSearchData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateCustomerReturn": {
      "summary": "CreateCustomerReturn",
      "description": "Create a return order from an existing sales order (`OrderID`).\n\nWhen a `TargetOrderID` has been specified, newly created lines are added to that specific order. When omitted, the lines are either added to the\nexisting, original order (in case that is still permitted) or a new order is created automatically.\n\nReturns information on the (newly created?) return order.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.CreateCustomerReturn",
        "description": "Create a return order from an existing sales order (`OrderID`).\n\nWhen a `TargetOrderID` has been specified, newly created lines are added to that specific order. When omitted, the lines are either added to the\nexisting, original order (in case that is still permitted) or a new order is created automatically.\n\nReturns information on the (newly created?) return order.",
        "operationId": "CreateCustomerReturn",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.CreateCustomerReturn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateCustomerReturn",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.SimpleShoppingCartResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateCustomerReturnWithoutOrder": {
      "summary": "CreateCustomerReturnWithoutOrder",
      "description": "Creates a return order for a set of products for which there is no original order in EVA.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.CreateCustomerReturnWithoutOrder",
        "description": "Creates a return order for a set of products for which there is no original order in EVA.",
        "operationId": "CreateCustomerReturnWithoutOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.CreateCustomerReturnWithoutOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateCustomerReturnWithoutOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.SimpleShoppingCartResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetCustomerReturn": {
      "summary": "GetCustomerReturn",
      "description": "Return the customer order return details originally set via `CreateCustomerReturn` or `CreateCustomerReturnWithoutOrder",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.GetCustomerReturn",
        "description": "Return the customer order return details originally set via `CreateCustomerReturn` or `CreateCustomerReturnWithoutOrder",
        "operationId": "GetCustomerReturn",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.GetCustomerReturn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetCustomerReturn",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.GetCustomerReturnResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetOrdersForReturnOrder": {
      "summary": "GetOrdersForReturnOrder",
      "description": "The GetOrdersForReturnOrder service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.GetOrdersForReturnOrder",
        "description": "The GetOrdersForReturnOrder service",
        "operationId": "GetOrdersForReturnOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.GetOrdersForReturnOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetOrdersForReturnOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.GetOrdersForReturnOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetReturnOrdersForOrder": {
      "summary": "GetReturnOrdersForOrder",
      "description": "The GetReturnOrdersForOrder service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.GetReturnOrdersForOrder",
        "description": "The GetReturnOrdersForOrder service",
        "operationId": "GetReturnOrdersForOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.GetReturnOrdersForOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetReturnOrdersForOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.GetReturnOrdersForOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ReceiveReturnOrder": {
      "summary": "ReceiveReturnOrder",
      "description": "Receive a customer return order",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ReceiveReturnOrder",
        "description": "Receive a customer return order",
        "operationId": "ReceiveReturnOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ReceiveReturnOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ReceiveReturnOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.ReceiveReturnOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/RefundOrder": {
      "summary": "RefundOrder",
      "description": "Triggers a refund request for the given Order.\n\nThe amount to refund is optional, if not specified it will be the amount available to refund on the order.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.RefundOrder",
        "description": "Triggers a refund request for the given Order.\n\nThe amount to refund is optional, if not specified it will be the amount available to refund on the order.",
        "operationId": "RefundOrder",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.RefundOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to RefundOrder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.RefundOrderResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ReturnOrderLines": {
      "summary": "ReturnOrderLines",
      "description": "The ReturnOrderLines service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ReturnOrderLines",
        "description": "The ReturnOrderLines service",
        "operationId": "ReturnOrderLines",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ReturnOrderLines"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ReturnOrderLines",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Orders.SimpleShoppingCartResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SendReturnMail": {
      "summary": "SendReturnMail",
      "description": "Sends a `ReturnMail` stencil to the customer of given return order, attaching order blobs of type `ReturnLabel` (3) and `ReturnForm` (4) if present.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.SendReturnMail",
        "description": "Sends a `ReturnMail` stencil to the customer of given return order, attaching order blobs of type `ReturnLabel` (3) and `ReturnForm` (4) if present.",
        "operationId": "SendReturnMail",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.SendReturnMail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SendReturnMail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SetReturnOrderRefundCorrection": {
      "summary": "SetReturnOrderRefundCorrection",
      "description": "The SetReturnOrderRefundCorrection service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.SetReturnOrderRefundCorrection",
        "description": "The SetReturnOrderRefundCorrection service",
        "operationId": "SetReturnOrderRefundCorrection",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.SetReturnOrderRefundCorrection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SetReturnOrderRefundCorrection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CompleteOrderInterventionTask": {
      "summary": "CompleteOrderInterventionTask",
      "description": "The CompleteOrderInterventionTask service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.OrderInterventionTasks.CompleteOrderInterventionTask",
        "description": "The CompleteOrderInterventionTask service",
        "operationId": "CompleteOrderInterventionTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.OrderInterventionTasks.CompleteOrderInterventionTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CompleteOrderInterventionTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListOrderInterventionTasks": {
      "summary": "ListOrderInterventionTasks",
      "description": "The ListOrderInterventionTasks service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.OrderInterventionTasks.ListOrderInterventionTasks",
        "description": "The ListOrderInterventionTasks service",
        "operationId": "ListOrderInterventionTasks",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.OrderInterventionTasks.ListOrderInterventionTasks"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListOrderInterventionTasks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.OrderInterventionTasks.ListOrderInterventionTasksResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/StartOrderInterventionTask": {
      "summary": "StartOrderInterventionTask",
      "description": "The StartOrderInterventionTask service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.OrderInterventionTasks.StartOrderInterventionTask",
        "description": "The StartOrderInterventionTask service",
        "operationId": "StartOrderInterventionTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.OrderInterventionTasks.StartOrderInterventionTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to StartOrderInterventionTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.OrderInterventionTasks.StartOrderInterventionTaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CompleteCustomerInteractionTask": {
      "summary": "CompleteCustomerInteractionTask",
      "description": "The CompleteCustomerInteractionTask service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.CustomerInteractionTasks.CompleteCustomerInteractionTask",
        "description": "The CompleteCustomerInteractionTask service",
        "operationId": "CompleteCustomerInteractionTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.CompleteCustomerInteractionTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CompleteCustomerInteractionTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetCustomerInteractionTaskByID": {
      "summary": "GetCustomerInteractionTaskByID",
      "description": "The GetCustomerInteractionTaskByID service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.CustomerInteractionTasks.GetCustomerInteractionTaskByID",
        "description": "The GetCustomerInteractionTaskByID service",
        "operationId": "GetCustomerInteractionTaskByID",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.GetCustomerInteractionTaskByID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetCustomerInteractionTaskByID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.GetCustomerInteractionTaskByIDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateCustomerInteractionTask": {
      "summary": "CreateCustomerInteractionTask",
      "description": "The CreateCustomerInteractionTask service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.CustomerInteractionTasks.CreateCustomerInteractionTask",
        "description": "The CreateCustomerInteractionTask service",
        "operationId": "CreateCustomerInteractionTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.CreateCustomerInteractionTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateCustomerInteractionTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.CreateCustomerInteractionTaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteCustomerInteractionTask": {
      "summary": "DeleteCustomerInteractionTask",
      "description": "The DeleteCustomerInteractionTask service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.CustomerInteractionTasks.DeleteCustomerInteractionTask",
        "description": "The DeleteCustomerInteractionTask service",
        "operationId": "DeleteCustomerInteractionTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.DeleteCustomerInteractionTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteCustomerInteractionTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListCustomerInteractionTasks": {
      "summary": "ListCustomerInteractionTasks",
      "description": "The ListCustomerInteractionTasks service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.CustomerInteractionTasks.ListCustomerInteractionTasks",
        "description": "The ListCustomerInteractionTasks service",
        "operationId": "ListCustomerInteractionTasks",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.ListCustomerInteractionTasks"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListCustomerInteractionTasks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.ListCustomerInteractionTasksResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetCustomerInteractionTaskTypeByID": {
      "summary": "GetCustomerInteractionTaskTypeByID",
      "description": "The GetCustomerInteractionTaskTypeByID service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.CustomerInteractionTasks.GetCustomerInteractionTaskTypeByID",
        "description": "The GetCustomerInteractionTaskTypeByID service",
        "operationId": "GetCustomerInteractionTaskTypeByID",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.GetCustomerInteractionTaskTypeByID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetCustomerInteractionTaskTypeByID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.GetCustomerInteractionTaskTypeByIDResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/CreateCustomerInteractionTaskType": {
      "summary": "CreateCustomerInteractionTaskType",
      "description": "The CreateCustomerInteractionTaskType service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.CustomerInteractionTasks.CreateCustomerInteractionTaskType",
        "description": "The CreateCustomerInteractionTaskType service",
        "operationId": "CreateCustomerInteractionTaskType",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.CreateCustomerInteractionTaskType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to CreateCustomerInteractionTaskType",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.CreateCustomerInteractionTaskTypeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/UpdateCustomerInteractionTaskType": {
      "summary": "UpdateCustomerInteractionTaskType",
      "description": "The UpdateCustomerInteractionTaskType service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.CustomerInteractionTasks.UpdateCustomerInteractionTaskType",
        "description": "The UpdateCustomerInteractionTaskType service",
        "operationId": "UpdateCustomerInteractionTaskType",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.UpdateCustomerInteractionTaskType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to UpdateCustomerInteractionTaskType",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DeleteCustomerInteractionTaskType": {
      "summary": "DeleteCustomerInteractionTaskType",
      "description": "The DeleteCustomerInteractionTaskType service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.CustomerInteractionTasks.DeleteCustomerInteractionTaskType",
        "description": "The DeleteCustomerInteractionTaskType service",
        "operationId": "DeleteCustomerInteractionTaskType",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.DeleteCustomerInteractionTaskType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DeleteCustomerInteractionTaskType",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GetCustomerInteractionTaskTypes": {
      "summary": "GetCustomerInteractionTaskTypes",
      "description": "The GetCustomerInteractionTaskTypes service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.CustomerInteractionTasks.GetCustomerInteractionTaskTypes",
        "description": "The GetCustomerInteractionTaskTypes service",
        "operationId": "GetCustomerInteractionTaskTypes",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.GetCustomerInteractionTaskTypes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GetCustomerInteractionTaskTypes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.GetCustomerInteractionTaskTypesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/DetachFromCustomerInteractionTask": {
      "summary": "DetachFromCustomerInteractionTask",
      "description": "The DetachFromCustomerInteractionTask service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.CustomerInteractionTasks.DetachFromCustomerInteractionTask",
        "description": "The DetachFromCustomerInteractionTask service",
        "operationId": "DetachFromCustomerInteractionTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.DetachFromCustomerInteractionTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to DetachFromCustomerInteractionTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/StartCustomerInteractionTask": {
      "summary": "StartCustomerInteractionTask",
      "description": "The StartCustomerInteractionTask service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.CustomerInteractionTasks.StartCustomerInteractionTask",
        "description": "The StartCustomerInteractionTask service",
        "operationId": "StartCustomerInteractionTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.StartCustomerInteractionTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to StartCustomerInteractionTask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.StartCustomerInteractionTaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ImAlive": {
      "summary": "ImAlive",
      "description": "The ImAlive service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ImAlive",
        "description": "The ImAlive service",
        "operationId": "ImAlive",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ImAlive"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ImAlive",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.EmptyResponseMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListOrganizationUnitsWithDeviceStatus": {
      "summary": "ListOrganizationUnitsWithDeviceStatus",
      "description": "The ListOrganizationUnitsWithDeviceStatus service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ListOrganizationUnitsWithDeviceStatus",
        "description": "The ListOrganizationUnitsWithDeviceStatus service",
        "operationId": "ListOrganizationUnitsWithDeviceStatus",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ListOrganizationUnitsWithDeviceStatus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListOrganizationUnitsWithDeviceStatus",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.ListOrganizationUnitsWithDeviceStatusResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/ListOrganizationUnitWithDeviceDetails": {
      "summary": "ListOrganizationUnitWithDeviceDetails",
      "description": "The ListOrganizationUnitWithDeviceDetails service",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.Services.ListOrganizationUnitWithDeviceDetails",
        "description": "The ListOrganizationUnitWithDeviceDetails service",
        "operationId": "ListOrganizationUnitWithDeviceDetails",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.Services.ListOrganizationUnitWithDeviceDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to ListOrganizationUnitWithDeviceDetails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.Services.ListOrganizationUnitWithDeviceDetailsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/SendMagicLink": {
      "summary": "SendMagicLink",
      "description": "Requests a magic login link, which will send an email to the user (if found).\n\nSubscribe to the `/magicLink` SignalR hub with `RequestToken` to catch the link event and use the `TemporaryToken` from there to continue login.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.MagicLink.SendMagicLink",
        "description": "Requests a magic login link, which will send an email to the user (if found).\n\nSubscribe to the `/magicLink` SignalR hub with `RequestToken` to catch the link event and use the `TemporaryToken` from there to continue login.",
        "operationId": "SendMagicLink",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.MagicLink.SendMagicLink"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to SendMagicLink",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.MagicLink.SendMagicLinkResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    },
    "/api/core/GenerateElevationBarcode": {
      "summary": "GenerateElevationBarcode",
      "description": "Generates an elevation barcode for user elevation, which can be scanned by a manager with sufficient rights to elevate the user's rights.\n\nThe returned `Barcode` you should show for a manager to scan, preferably as QR code through our `/barcode` endpoint.\n\nThe returned `RequestToken` is our little secret, which you will use to subscribe to the `/elevationBarcode` SignalR hub to listen for scan events. Once a successful\nscan event was triggered, this original `RequestToken` is then 'confirmed' and you can use it directly as elevation header for your original call. Keep it safe!\n\n:bulb: Optionally supply the `OrganizationUnitID`, `Functionality` and `Scope` of your original request, so we can check the manager rights directly from the scan\non his/her device. Omitting these here will fall back to the default security enforced from the user attempting to use the (confirmed) elevation token, which just gives\na nasty 403 on the employee's device.",
      "post": {
        "tags": [
          "Core"
        ],
        "summary": "EVA.Core.ElevationBarcode.GenerateElevationBarcode",
        "description": "Generates an elevation barcode for user elevation, which can be scanned by a manager with sufficient rights to elevate the user's rights.\n\nThe returned `Barcode` you should show for a manager to scan, preferably as QR code through our `/barcode` endpoint.\n\nThe returned `RequestToken` is our little secret, which you will use to subscribe to the `/elevationBarcode` SignalR hub to listen for scan events. Once a successful\nscan event was triggered, this original `RequestToken` is then 'confirmed' and you can use it directly as elevation header for your original call. Keep it safe!\n\n:bulb: Optionally supply the `OrganizationUnitID`, `Functionality` and `Scope` of your original request, so we can check the manager rights directly from the scan\non his/her device. Omitting these here will fall back to the default security enforced from the user attempting to use the (confirmed) elevation token, which just gives\na nasty 403 on the employee's device.",
        "operationId": "GenerateElevationBarcode",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EVA.Core.ElevationBarcode.GenerateElevationBarcode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a call to GenerateElevationBarcode",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EVA.Core.ElevationBarcode.GenerateElevationBarcodeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "eva-auth": [ ]
          }
        ]
      },
      "parameters": [
        {
          "name": "EVA-User-Agent",
          "in": "header",
          "required": true,
          "style": "simple",
          "schema": {
            "type": "string",
            "default": "eva-sdk-openapi"
          }
        }
      ]
    }
  },
  "components": {
    "schemas": {
      "Buckaroo.Gender": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Authentication.OpenID.OpenIDAuthenticateMessage": {
        "type": "object",
        "properties": {
          "IDToken": {
            "type": "string"
          },
          "Provider": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Blobs.Services.BlobDto": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Category": {
            "type": "string"
          },
          "ExpireDate": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "string",
            "format": "uuid"
          },
          "LocationType": {
            "type": "string"
          },
          "MimeType": {
            "type": "string"
          },
          "OriginalName": {
            "type": "string"
          },
          "Url": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.API.EnumDto": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string",
            "description": "Usually an internal & unchangable code - for display, use `Description`"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.API.FlagsEnumDto": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "IDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "Name": {
            "type": "string",
            "description": "Usually an internal & unchangable code - for display, use `Description`"
          },
          "Names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.API.GetApiDefinition": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.API.GetApiDefinitionResponse": {
        "type": "object",
        "properties": {
          "ApiDefinition": {
            "type": "object"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.API.GetAvailableServiceDetails": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.API.GetAvailableServiceDetailsResponse": {
        "required": [
          "AvailableOffline"
        ],
        "type": "object",
        "properties": {
          "AvailableOffline": {
            "type": "boolean"
          },
          "Deprecation": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Request": {
            "$ref": "#/components/schemas/EVA.Core.API.GetAvailableServiceDetailsResponse_TypeDefinition"
          },
          "Response": {
            "$ref": "#/components/schemas/EVA.Core.API.GetAvailableServiceDetailsResponse_TypeDefinition"
          },
          "Routes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.API.GetAvailableServiceDetailsResponse_Route"
            }
          },
          "Security": {
            "$ref": "#/components/schemas/EVA.Core.API.GetAvailableServiceDetailsResponse_SecurityInfo"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.API.GetAvailableServiceDetailsResponse_FunctionalityInfo": {
        "required": [
          "Scope"
        ],
        "type": "object",
        "properties": {
          "Functionality": {
            "type": "string"
          },
          "Scope": {
            "$ref": "#/components/schemas/EVA.Core.Security.FunctionalityScope"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.API.GetAvailableServiceDetailsResponse_Route": {
        "type": "object",
        "properties": {
          "Method": {
            "type": "string"
          },
          "Path": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.API.GetAvailableServiceDetailsResponse_SecurityInfo": {
        "required": [
          "AllowPublic",
          "RequiredUserType",
          "RequiresAuthentication"
        ],
        "type": "object",
        "properties": {
          "AllowPublic": {
            "type": "boolean"
          },
          "RequiredFunctionalities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.API.GetAvailableServiceDetailsResponse_FunctionalityInfo"
            }
          },
          "RequiredUserType": {
            "$ref": "#/components/schemas/EVA.Core.UserTypes"
          },
          "RequiresAuthentication": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.API.GetAvailableServiceDetailsResponse_TypeDefinition": {
        "required": [
          "Optional"
        ],
        "type": "object",
        "properties": {
          "Deprecation": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.API.GetAvailableServiceDetailsResponse_TypeDefinition"
            }
          },
          "Name": {
            "type": "string"
          },
          "Namespace": {
            "type": "string"
          },
          "Optional": {
            "type": "boolean"
          },
          "Type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.API.GetAvailableServices": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.API.GetAvailableServicesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.API.GetAvailableServicesResponse_Service"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.API.GetAvailableServicesResponse_Service": {
        "required": [
          "AvailableOffline",
          "AllowPublic",
          "RequiresElevation"
        ],
        "type": "object",
        "properties": {
          "AllowPublic": {
            "type": "boolean"
          },
          "AvailableOffline": {
            "type": "boolean"
          },
          "Functionality": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Namespace": {
            "type": "string"
          },
          "RequiresElevation": {
            "type": "boolean"
          },
          "Scope": {
            "$ref": "#/components/schemas/EVA.Core.Security.FunctionalityScope"
          },
          "Type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.AddressBookDto": {
        "required": [
          "DefaultBillingAddress",
          "ID",
          "DefaultShippingAddress",
          "DefaultPickupAddress",
          "Address"
        ],
        "type": "object",
        "properties": {
          "Address": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDto"
          },
          "DefaultBillingAddress": {
            "type": "boolean"
          },
          "DefaultPickupAddress": {
            "type": "boolean"
          },
          "DefaultShippingAddress": {
            "type": "boolean"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.AddressDataDto": {
        "required": [
          "CountryID"
        ],
        "type": "object",
        "properties": {
          "Address1": {
            "type": "string"
          },
          "Address2": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "CountryID": {
            "type": "string"
          },
          "District": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "HouseNumber": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "Latitude": {
            "type": "number"
          },
          "Longitude": {
            "type": "number"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "Region": {
            "type": "string"
          },
          "State": {
            "type": "string"
          },
          "Subdistrict": {
            "type": "string"
          },
          "ZipCode": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.AddressDto": {
        "required": [
          "ID",
          "CountryID"
        ],
        "type": "object",
        "properties": {
          "Address1": {
            "type": "string"
          },
          "Address2": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "CountryID": {
            "type": "string"
          },
          "District": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "HouseNumber": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "LastName": {
            "type": "string"
          },
          "Latitude": {
            "type": "number"
          },
          "Longitude": {
            "type": "number"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "Region": {
            "type": "string"
          },
          "State": {
            "type": "string"
          },
          "Subdistrict": {
            "type": "string"
          },
          "ZipCode": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.AddressRequirementDto": {
        "required": [
          "ID",
          "Visible"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "MaxLength": {
            "type": "integer"
          },
          "MinLength": {
            "type": "integer"
          },
          "PredefinedValues": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Validation": {
            "type": "string"
          },
          "Visible": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.VisibilityType"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.AddressSuggestion": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "string"
          },
          "Reference": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.AddressSuggestionDetails": {
        "required": [
          "UtcOffset",
          "IsValidCountry"
        ],
        "type": "object",
        "properties": {
          "City": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressSuggestionDetails_Component"
          },
          "Components": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Addresses.AddressSuggestionDetails_Component"
            }
          },
          "Country": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressSuggestionDetails_Component"
          },
          "District": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressSuggestionDetails_Component"
          },
          "Formatted": {
            "type": "string"
          },
          "Geometry": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressSuggestionDetails_GeometryDetails"
          },
          "HouseNumber": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressSuggestionDetails_Component"
          },
          "IsValidCountry": {
            "type": "boolean"
          },
          "PostalCode": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressSuggestionDetails_Component"
          },
          "Region": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressSuggestionDetails_Component"
          },
          "Street": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressSuggestionDetails_Component"
          },
          "Subdistrict": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressSuggestionDetails_Component"
          },
          "UtcOffset": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.AddressSuggestionDetails_Component": {
        "type": "object",
        "properties": {
          "LongName": {
            "type": "string"
          },
          "ShortName": {
            "type": "string"
          },
          "Types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.AddressSuggestionDetails_GeometryDetails": {
        "type": "object",
        "properties": {
          "Location": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.GeometryLocation"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.AutocompleteAddress": {
        "required": [
          "Query"
        ],
        "type": "object",
        "properties": {
          "Query": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.AutocompleteAddressResponse": {
        "required": [
          "Result"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Addresses.AddressSuggestion"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.CountryDto": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.CountrySubdivisionDto": {
        "required": [
          "ID",
          "Name",
          "CountryID"
        ],
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "ID": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.CreateAddressBookItem": {
        "required": [
          "UseAsDefaultPickupAddress",
          "UseAsDefaultBillingAddress",
          "UseAsDefaultShippingAddress",
          "Address"
        ],
        "type": "object",
        "properties": {
          "Address": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDataDto"
          },
          "Description": {
            "type": "string"
          },
          "UseAsDefaultBillingAddress": {
            "type": "boolean"
          },
          "UseAsDefaultPickupAddress": {
            "type": "boolean"
          },
          "UseAsDefaultShippingAddress": {
            "type": "boolean"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.DeleteAddressBookItem": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.GeometryLocation": {
        "required": [
          "Longitude",
          "Latitude"
        ],
        "type": "object",
        "properties": {
          "Latitude": {
            "type": "number"
          },
          "Longitude": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.GetAddressForZipCode": {
        "required": [
          "HouseNumber",
          "ZipCode"
        ],
        "type": "object",
        "properties": {
          "HouseNumber": {
            "type": "string"
          },
          "ZipCode": {
            "type": "string",
            "description": "Expected format: 9999ZZ"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.GetAddressForZipCodeResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDataDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.GetAddressRequirements": {
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.GetAddressRequirementsResponse": {
        "type": "object",
        "properties": {
          "AddressRequirements": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.Addresses.AddressRequirementDto"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.GetAutocompleteAddressByReference": {
        "required": [
          "Suggestion"
        ],
        "type": "object",
        "properties": {
          "Suggestion": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressSuggestion"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.GetAutocompleteAddressByReferenceResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressSuggestionDetails"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.GetCountrySubdivisions": {
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.GetCountrySubdivisionsResponse": {
        "required": [
          "CountrySubdivisions"
        ],
        "type": "object",
        "properties": {
          "CountrySubdivisions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Addresses.CountrySubdivisionDto"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.ListAddressBook": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Addresses.ListAddressBookFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.ListAddressBookFilter": {
        "type": "object",
        "properties": {
          "AddressID": {
            "type": "integer"
          },
          "DefaultBillingAddress": {
            "type": "boolean"
          },
          "DefaultPickupAddress": {
            "type": "boolean"
          },
          "DefaultShippingAddress": {
            "type": "boolean"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.ListAddressBookResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Addresses.AddressBookDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.ListCountries": {
        "required": [
          "FetchAll"
        ],
        "type": "object",
        "properties": {
          "FetchAll": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.ListCountriesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Addresses.CountryDto"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.SetDefaultBillingAddress": {
        "required": [
          "AddressBookID"
        ],
        "type": "object",
        "properties": {
          "AddressBookID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.SetDefaultPickupAddress": {
        "required": [
          "AddressBookID"
        ],
        "type": "object",
        "properties": {
          "AddressBookID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.SetDefaultShippingAddress": {
        "required": [
          "AddressBookID"
        ],
        "type": "object",
        "properties": {
          "AddressBookID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.UpdateAddress": {
        "required": [
          "UserID",
          "BillToShipping"
        ],
        "type": "object",
        "properties": {
          "BillToAddress": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDataDto"
          },
          "BillToShipping": {
            "type": "boolean"
          },
          "ShipToAddress": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDataDto"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.UpdateAddressBookItem": {
        "required": [
          "UseAsDefaultPickupAddress",
          "ID",
          "UseAsDefaultBillingAddress",
          "UseAsDefaultShippingAddress",
          "Address"
        ],
        "type": "object",
        "properties": {
          "Address": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDataDto"
          },
          "Description": {
            "type": "object"
          },
          "ID": {
            "type": "integer"
          },
          "UseAsDefaultBillingAddress": {
            "type": "boolean"
          },
          "UseAsDefaultPickupAddress": {
            "type": "boolean"
          },
          "UseAsDefaultShippingAddress": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Addresses.UpdateAddressRequirement": {
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "MaxLength": {
            "type": "object"
          },
          "MinLength": {
            "type": "object"
          },
          "PredefinedValues": {
            "type": "object"
          },
          "PropertyType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.PropertyType"
          },
          "Validation": {
            "type": "object"
          },
          "Visibility": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Airport.AddBoardingPassToOrder": {
        "required": [
          "Barcode",
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "Barcode": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Airport.CreateFlight": {
        "type": "object",
        "properties": {
          "Flight": {
            "$ref": "#/components/schemas/EVA.Core.Airport.FlightDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Airport.CreateFlightResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Airport.DeleteFlight": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Airport.DownloadFlightsFileTemplate": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Airport.FlightDto": {
        "required": [
          "ToDate",
          "FromDate",
          "ID",
          "DestinationCode",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "AirlineCompanyCode": {
            "type": "string"
          },
          "DestinationAirportCode": {
            "type": "string"
          },
          "DestinationCode": {
            "type": "integer"
          },
          "FlightNumber": {
            "type": "string"
          },
          "FromDate": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "ToDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Airport.GetBoardingPass": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Airport.GetBoardingPassResponse": {
        "required": [
          "CheckinSequence",
          "Status",
          "FlightNumber",
          "JulianDate",
          "NumberOfLegs"
        ],
        "type": "object",
        "properties": {
          "AirlineCompanyCode": {
            "type": "string"
          },
          "Cabin": {
            "type": "string"
          },
          "CheckinSequence": {
            "type": "integer"
          },
          "Data": {
            "type": "string"
          },
          "DepartingAirportCode": {
            "type": "string"
          },
          "DestinationAirportCode": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "FlightNumber": {
            "type": "integer"
          },
          "Format": {
            "type": "string"
          },
          "JulianDate": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Name": {
            "type": "string"
          },
          "NumberOfLegs": {
            "type": "integer"
          },
          "OperatingCarrierPNRCode": {
            "type": "string"
          },
          "Seat": {
            "type": "string"
          },
          "Status": {
            "type": "integer"
          },
          "Type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Airport.GetFlight": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Airport.GetFlightResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Flight": {
            "$ref": "#/components/schemas/EVA.Core.Airport.FlightDto"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Airport.ImportFlights": {
        "required": [
          "Data",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "Data": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Airport.ListFlights": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Airport.ListFlightsFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Airport.ListFlightsFilter": {
        "type": "object",
        "properties": {
          "AirlineCompanyCode": {
            "type": "string"
          },
          "DestinationAirportCode": {
            "type": "string"
          },
          "FlightNumber": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Airport.ListFlightsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Airport.FlightDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Airport.UpdateFlight": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "AirlineCompanyCode": {
            "type": "object"
          },
          "DestinationAirportCode": {
            "type": "object"
          },
          "DestinationCode": {
            "type": "object"
          },
          "FlightNumber": {
            "type": "object"
          },
          "FromDate": {
            "type": "object"
          },
          "ID": {
            "type": "integer"
          },
          "OrganizationUnitID": {
            "type": "object"
          },
          "ToDate": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Applications.ApplicationDto": {
        "required": [
          "ID",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "AssetsBaseUrl": {
            "type": "string"
          },
          "AuthenticationToken": {
            "type": "string"
          },
          "BaseUrl": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "RequiredUserTypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Applications.GetApplicationConfiguration": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Applications.GetApplicationConfigurationResponse": {
        "type": "object",
        "properties": {
          "Configuration": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Applications.GetCurrentApplication": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Applications.GetCurrentApplicationResponse": {
        "required": [
          "ID",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Name": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "RequiredUserTypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Applications.ListApplications": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Applications.ListApplicationsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Applications.ApplicationDto"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Auditing.AuditChainTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Auditing.Components.AuditingVatNumberValidationResult": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Auditing.CreateAuditChainConfiguration": {
        "required": [
          "AuditChainType"
        ],
        "type": "object",
        "properties": {
          "AuditChainType": {
            "$ref": "#/components/schemas/EVA.Core.Auditing.AuditChainTypes"
          },
          "CompanyID": {
            "type": "integer"
          },
          "CountryID": {
            "type": "string"
          },
          "DesiredIdentifier": {
            "type": "string"
          },
          "DesiredPrefix": {
            "type": "string"
          },
          "DesiredStartSequenceNumber": {
            "type": "integer"
          },
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Auditing.DeleteAuditChainConfiguration": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Auditing.DownloadFinancialPeriodAudits": {
        "required": [
          "FiscalYear",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "FiscalMonth": {
            "type": "integer"
          },
          "FiscalYear": {
            "type": "integer"
          },
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Auditing.GetAuditChainConfigurations": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Auditing.GetAuditChainConfigurationsResponse": {
        "type": "object",
        "properties": {
          "Configurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Auditing.GetAuditChainConfigurationsResponse_AuditChainConfiguration"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Auditing.GetAuditChainConfigurationsResponse_AuditChainConfiguration": {
        "required": [
          "AuditChainType",
          "ID",
          "CreationTime"
        ],
        "type": "object",
        "properties": {
          "AuditChainType": {
            "$ref": "#/components/schemas/EVA.Core.Auditing.AuditChainTypes"
          },
          "CompanyID": {
            "type": "integer"
          },
          "CompanyName": {
            "type": "string"
          },
          "CountryID": {
            "type": "string"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "DesiredIdentifier": {
            "type": "string"
          },
          "DesiredPrefix": {
            "type": "string"
          },
          "DesiredStartSequenceNumber": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "LastModificationTime": {
            "type": "string",
            "format": "date-time"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "OrganizationUnitName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Auditing.GetElectronicInvoiceData": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Auditing.GetElectronicInvoiceDataResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "RecipientCode": {
            "type": "string"
          },
          "RecipientEmail": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Auditing.GetLotteryNumber": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Auditing.GetLotteryNumberResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "LotteryNumber": {
            "type": "string"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Auditing.InvoiceOutputType": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Auditing.ListEventLedger": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.ScrollablePageConfig_1_EVA.Core.EventLedger.EventLedgerFilters"
          },
          "Query": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Auditing.ListEventLedgerResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.ScrollablePagedResult_1_EVA.Core.EventLedger.EventLedgerDocument"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Auditing.ListFinancialPeriodAudits": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Finance.ListAuditsFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Auditing.ListFinancialPeriodAuditsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Finance.FinancialPeriodAuditDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Auditing.Models.Address": {
        "required": [
          "Type"
        ],
        "type": "object",
        "properties": {
          "Address1": {
            "type": "string"
          },
          "Address2": {
            "type": "string"
          },
          "Addressee": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          },
          "Number": {
            "type": "string"
          },
          "PostalCode": {
            "type": "string"
          },
          "Region": {
            "type": "string"
          },
          "State": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.Auditing.Models.AddressType"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Auditing.Models.AddressType": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Auditing.Models.Billable": {
        "type": "object",
        "properties": {
          "Address": {
            "$ref": "#/components/schemas/EVA.Core.Auditing.Models.Address"
          },
          "AuditingFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "BIC": {
            "type": "string"
          },
          "BankAccount": {
            "type": "string"
          },
          "Email": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "RegistrationNumber": {
            "type": "string"
          },
          "SystemID": {
            "type": "string"
          },
          "TaxCountryRegion": {
            "type": "string"
          },
          "TaxOfficeNumber": {
            "type": "string"
          },
          "TaxRegistrationNumber": {
            "type": "string"
          },
          "WasteDisposalNumber": {
            "type": "string"
          },
          "Website": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Auditing.Models.TerminalReportType": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Auditing.SetElectronicInvoiceData": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "RecipientCode": {
            "type": "string"
          },
          "RecipientEmail": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Auditing.SetLotteryNumber": {
        "required": [
          "LotteryNumber",
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "LotteryNumber": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Auditing.UpdateAuditChainConfiguration": {
        "required": [
          "AuditChainType",
          "ID"
        ],
        "type": "object",
        "properties": {
          "AuditChainType": {
            "$ref": "#/components/schemas/EVA.Core.Auditing.AuditChainTypes"
          },
          "CompanyID": {
            "type": "integer"
          },
          "CountryID": {
            "type": "string"
          },
          "DesiredIdentifier": {
            "type": "string"
          },
          "DesiredPrefix": {
            "type": "string"
          },
          "DesiredStartSequenceNumber": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Auditing.ValidateVatNumber": {
        "required": [
          "VatNumber"
        ],
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "VatNumber": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Auditing.ValidateVatNumberResponse": {
        "required": [
          "Success"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Success": {
            "$ref": "#/components/schemas/EVA.Core.Auditing.Components.AuditingVatNumberValidationResult"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Authentication.CreatePasskey": {
        "required": [
          "UserID",
          "Signature",
          "Challenge",
          "PublicKey"
        ],
        "type": "object",
        "properties": {
          "Challenge": {
            "type": "string"
          },
          "PublicKey": {
            "type": "string"
          },
          "Signature": {
            "type": "string"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Authentication.DeletePasskey": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Authentication.DeletePasskeyForUser": {
        "required": [
          "UserID"
        ],
        "type": "object",
        "properties": {
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Authentication.DisableAllTwoFactorAuthentication": {
        "required": [
          "UserID"
        ],
        "type": "object",
        "properties": {
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Authentication.DisableTwoFactorAuthentication": {
        "required": [
          "TwoFactorAuthenticator"
        ],
        "type": "object",
        "properties": {
          "TwoFactorAuthenticator": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Authentication.EnableTwoFactorAuthentication": {
        "required": [
          "TwoFactorAuthenticator"
        ],
        "type": "object",
        "properties": {
          "TwoFactorAuthenticationToken": {
            "type": "string"
          },
          "TwoFactorAuthenticator": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Authentication.EnableTwoFactorAuthenticationResponse": {
        "required": [
          "Status"
        ],
        "type": "object",
        "properties": {
          "Data": {
            "type": "object"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.Security.TwoFactor.TwoFactorAuthenticatorStatus"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Authentication.GenerateTemporaryElevationCode": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Authentication.GenerateTemporaryElevationCodeResponse": {
        "required": [
          "Code",
          "ValidBefore"
        ],
        "type": "object",
        "properties": {
          "Code": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ValidBefore": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Authentication.GetAuthorizationStructure": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Authentication.GetAuthorizationStructureResponse": {
        "required": [
          "Roles"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Authentication.RoleWithFunctionalitiesAndOrganizationUnits"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Authentication.GetAvailableTwoFactorAuthenticators": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Authentication.GetAvailableTwoFactorAuthenticatorsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Security.TwoFactor.TwoFactorAuthenticatorData"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Authentication.GetPasskey": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Authentication.GetPasskeyChallenge": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Authentication.GetPasskeyChallengeResponse": {
        "required": [
          "EnvironmentID",
          "Challenge"
        ],
        "type": "object",
        "properties": {
          "Challenge": {
            "type": "string"
          },
          "EnvironmentID": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Authentication.GetPasskeyResponse": {
        "required": [
          "IsEnabled"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "IsEnabled": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Authentication.GetPasskeySetupChallenge": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Authentication.GetPasskeySetupChallengeResponse": {
        "required": [
          "UserID",
          "EnvironmentID",
          "Challenge"
        ],
        "type": "object",
        "properties": {
          "Challenge": {
            "type": "string"
          },
          "EnvironmentID": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Authentication.Login": {
        "required": [
          "PublicLogin",
          "TwoFactorRememberMe",
          "SelectFirstOrganizationUnit"
        ],
        "type": "object",
        "properties": {
          "AsEmployee": {
            "type": "boolean",
            "description": "When set, the (non)-employees will be explicity filtered. Used primarily when Customers and Employees are split, but can also be used to make sure no Customers can login."
          },
          "AuthenticationToken": {
            "type": "string",
            "description": "The current authenticationtoken, can be used to select the same OrganizationUnit when logging in onto a website with an anonymous token.\nOr can be used when switching to another OrganizationUnit, no other properties are required in that case."
          },
          "Context": {
            "type": "string",
            "description": "Defines the context where the Login is done, can be used to alter some properties automatically when logging in."
          },
          "CustomAuthenticateData": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EVA.Core.Security.Passkey.PasskeyAuthenticateMessage"
              },
              {
                "$ref": "#/components/schemas/EVA.Authentication.OpenID.OpenIDAuthenticateMessage"
              }
            ],
            "description": "When using a custom authenticator, the data goes here."
          },
          "CustomAuthenticatorType": {
            "type": "string",
            "description": "When using a custom authenticator, the type goes here."
          },
          "IdentificationCode": {
            "type": "string",
            "description": "The employee IdentificationCode used to login by QR or PIN"
          },
          "LanguageID": {
            "type": "string",
            "description": "The preferred Language for the session"
          },
          "OrganizationUnitID": {
            "type": "integer",
            "description": "Used to login to a specific OrganizationUnit"
          },
          "Password": {
            "type": "string",
            "description": "The password associated with the Username"
          },
          "PublicLogin": {
            "type": "boolean",
            "description": "No subnet check, but requests are only allowed to services with the AllowPublic attribute"
          },
          "SelectFirstOrganizationUnit": {
            "type": "boolean",
            "description": "Login on the first OrganizationUnit in the tree where the user has the Login functionality"
          },
          "TwoFactorAuthenticationToken": {
            "type": "string",
            "description": "The two-factor authenticator confirmation token"
          },
          "TwoFactorAuthenticator": {
            "type": "string",
            "description": "The two-factor authenticator code that granted the confirmation token"
          },
          "TwoFactorRememberMe": {
            "type": "boolean",
            "description": "If a successful two-factor authentication should be remembered on this IP address"
          },
          "UserType": {
            "$ref": "#/components/schemas/EVA.Core.UserTypes"
          },
          "Username": {
            "type": "string",
            "description": "Primary identifier of the user, can be an EmailAddress or Nickname"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Authentication.LoginResponse": {
        "required": [
          "Authentication",
          "IsCustomAuthenticateResult"
        ],
        "type": "object",
        "properties": {
          "Authentication": {
            "$ref": "#/components/schemas/EVA.Core.Enumerations.AuthenticationResults"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "FailureReason": {
            "$ref": "#/components/schemas/EVA.Core.Enumerations.AuthenticationFailureReasons"
          },
          "IsCustomAuthenticateResult": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrganizationUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Authentication.LoginResponse_OrganizationUnitModel"
            }
          },
          "TwoFactorAuthenticators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Security.TwoFactor.TwoFactorAuthenticatorData"
            },
            "description": "The available two-factor authenticators, returned when the Authentication result is NeedsTwoFactorAuthentication, for use in a sequential Login call"
          },
          "User": {
            "$ref": "#/components/schemas/EVA.Core.Users.LoggedInUserDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Authentication.LoginResponse_OrganizationUnitModel": {
        "required": [
          "Type",
          "ID",
          "Status"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "CountryID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "ParentID": {
            "type": "integer"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrganizationUnitStatus"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnitTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Authentication.Logout": {
        "required": [
          "ClockOut",
          "ExpireAllSessions"
        ],
        "type": "object",
        "properties": {
          "ClockOut": {
            "type": "boolean"
          },
          "ExpireAllSessions": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Authentication.LogoutResponse": {
        "required": [
          "LogoutSuccesful"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "LogoutSuccesful": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Authentication.Ping": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Authentication.RoleWithFunctionalitiesAndOrganizationUnits": {
        "required": [
          "RoleName",
          "RoleID"
        ],
        "type": "object",
        "properties": {
          "ElevationFunctionalities": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.Security.FunctionalityScope"
            }
          },
          "OrganizationUnitIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "RoleID": {
            "type": "integer"
          },
          "RoleName": {
            "type": "string"
          },
          "ScopedFunctionalities": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.Security.FunctionalityScope"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Authentication.ValidateIdentificationPin": {
        "required": [
          "Pin"
        ],
        "type": "object",
        "properties": {
          "Pin": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Authentication.ValidateIdentificationPinResponse": {
        "required": [
          "IsValid"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "IsValid": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Authentication.ValidateToken": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Availability.ProductBundleAvailabilityCalculationMethods": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Barcodes.ParseBarcode": {
        "type": "object",
        "properties": {
          "Barcode": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Barcodes.ParseBarcodeResponse": {
        "type": "object",
        "properties": {
          "Actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Barcodes.ParseBarcodeResponse_Action"
            }
          },
          "Data": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Type": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Barcodes.ParseBarcodeResponse_Action": {
        "required": [
          "Sequence"
        ],
        "type": "object",
        "properties": {
          "Parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "Sequence": {
            "type": "integer"
          },
          "Type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Blobs.AttachBlobToOrder": {
        "required": [
          "BlobID",
          "Name"
        ],
        "type": "object",
        "properties": {
          "BlobID": {
            "type": "string",
            "format": "uuid"
          },
          "InvoiceID": {
            "type": "integer",
            "description": "Optional link the blob to an Invoice of the Order"
          },
          "Name": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer",
            "description": "Required when `OrderLineID` is omitted"
          },
          "OrderLineID": {
            "type": "integer",
            "description": "Required when `OrderID` is omitted"
          },
          "ShipmentID": {
            "type": "integer",
            "description": "Optional link the blob to a Shipment of the Order"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderBlobTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Blobs.FinancialPeriodBlobDto": {
        "required": [
          "BlobID",
          "FinancialPeriodID"
        ],
        "type": "object",
        "properties": {
          "BlobID": {
            "type": "string",
            "format": "uuid"
          },
          "FinancialPeriodID": {
            "type": "integer"
          },
          "MimeType": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Blobs.ListBlobsForFinancialPeriod": {
        "required": [
          "FinancialPeriodID"
        ],
        "type": "object",
        "properties": {
          "FinancialPeriodID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Blobs.ListBlobsForFinancialPeriodResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Blobs.FinancialPeriodBlobDto"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Blobs.ListBlobsForOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "InvoiceID": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          },
          "ShipmentID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Blobs.ListBlobsForOrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Blobs.OrderBlobDto"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Blobs.OrderBlobDto": {
        "required": [
          "Type",
          "OrderID",
          "CreationTime",
          "BlobID"
        ],
        "type": "object",
        "properties": {
          "BlobID": {
            "type": "string",
            "format": "uuid"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "InvoiceID": {
            "type": "integer"
          },
          "MimeType": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "OrganizationUnitBackendID": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer",
            "description": "Optional OrganizationUnit based on Shipment.OrganizationUnit or Invoice.OrganizationUnit"
          },
          "OrganizationUnitName": {
            "type": "string"
          },
          "ShipmentID": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderBlobTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Blobs.StoreAndAttachBlobToOrder": {
        "required": [
          "Data",
          "MimeType",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Category": {
            "type": "string"
          },
          "Data": {
            "type": "string"
          },
          "InvoiceID": {
            "type": "integer",
            "description": "Optional link the blob to an Invoice of the Order"
          },
          "MimeType": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer",
            "description": "Required when `OrderLineID` is omitted"
          },
          "OrderLineID": {
            "type": "integer",
            "description": "Required when `OrderID` is omitted"
          },
          "OriginalName": {
            "type": "string"
          },
          "ShipmentID": {
            "type": "integer",
            "description": "Optional link the blob to a Shipment of the Order"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderBlobTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Blobs.StoreAndAttachBlobToOrderResponse": {
        "required": [
          "Guid"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Url": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Caching.FlushCache": {
        "required": [
          "Pattern"
        ],
        "type": "object",
        "properties": {
          "Pattern": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Cart.GetShoppingCart": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "AdditionalOrderDataOptions": {
            "$ref": "#/components/schemas/EVA.Core.Orders.AdditionalOrderDataOptions"
          },
          "IncludeAllPayments": {
            "type": "boolean",
            "description": "By default only confirmed payments are returned, enabling this flag will return all PaymentTransactions"
          },
          "OrderID": {
            "type": "integer"
          },
          "ProductProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Cart.GetShoppingCartInfo": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Cart.GetShoppingCartInfoResponse": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "CurrencyID": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Cart.RecoverShoppingCart": {
        "type": "object",
        "properties": {
          "ReminderToken": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Companies.CompanyDto": {
        "type": "object",
        "properties": {
          "AccountHolderName": {
            "type": "string"
          },
          "BIC": {
            "type": "string"
          },
          "ContactEmailAddress": {
            "type": "string"
          },
          "ContactPhoneNumber": {
            "type": "string"
          },
          "EstablishedDate": {
            "type": "string",
            "format": "date-time"
          },
          "IBAN": {
            "type": "string"
          },
          "InvoiceAddress": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDto"
          },
          "InvoiceEmailAddress": {
            "type": "string"
          },
          "LegalForm": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.LegalForms"
          },
          "LogoID": {
            "type": "string",
            "format": "uuid"
          },
          "Name": {
            "type": "string"
          },
          "RegistrationCity": {
            "type": "string"
          },
          "RegistrationCountryID": {
            "type": "string"
          },
          "RegistrationNumber": {
            "type": "string"
          },
          "VatNumber": {
            "type": "string"
          },
          "VisitorsAddress": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.CompositeUserTask.Services.StartCompositeUserTask": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.CompositeUserTask.Services.StartCompositeUserTaskResponse": {
        "required": [
          "ID",
          "Tasks"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.CompositeUserTask.Services.StartCompositeUserTaskResponse_CompositeUserTaskSubTask"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.CompositeUserTask.Services.StartCompositeUserTaskResponse_CompositeUserTaskSubTask": {
        "required": [
          "Type",
          "Sequence",
          "IsActive",
          "ID",
          "IsCompleted"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "IsActive": {
            "type": "boolean"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "Sequence": {
            "type": "integer"
          },
          "SubType": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.UserTasks.Dto.UserTaskTypeDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.CreateResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Currencies.GetAvailableCurrencies": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Currencies.GetAvailableCurrenciesResponse": {
        "type": "object",
        "properties": {
          "Currencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.CurrencyDto"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Currencies.GetCurrency": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Currencies.GetCurrencyResponse": {
        "required": [
          "Precision"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "string"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Name": {
            "type": "string"
          },
          "Precision": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Currencies.ListCurrencies": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Currencies.ListCurrenciesFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Currencies.ListCurrenciesFilter": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Currencies.ListCurrenciesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.DataModels.CurrencyDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.CustomFields.CustomFieldResponse": {
        "required": [
          "DataTypeID",
          "IsEditableByUser",
          "IsArray",
          "CustomFieldID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "CustomFieldID": {
            "type": "integer"
          },
          "DataType": {
            "type": "string"
          },
          "DataTypeID": {
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "IsArray": {
            "type": "boolean"
          },
          "IsEditableByUser": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          },
          "Options": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldOptions"
          },
          "Value": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.CustomerInteractions.CustomerInteractionTaskPriorities": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.CustomerInteractions.CustomerInteractionWorkSet": {
        "required": [
          "TypeID",
          "UserTaskID",
          "Priority",
          "CustomerID"
        ],
        "type": "object",
        "properties": {
          "Customer": {
            "$ref": "#/components/schemas/EVA.Core.CustomerInteractions.CustomerInteractionWorkSet_CustomerDto"
          },
          "CustomerID": {
            "type": "integer"
          },
          "Priority": {
            "$ref": "#/components/schemas/EVA.Core.CustomerInteractions.CustomerInteractionTaskPriorities"
          },
          "TypeID": {
            "type": "integer"
          },
          "TypeName": {
            "type": "string"
          },
          "UserTask": {
            "$ref": "#/components/schemas/EVA.Core.UserTasks.Dto.UserTaskDto"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.CustomerInteractions.CustomerInteractionWorkSet_CustomerDto": {
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "PhoneNumber": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.DataModels.BorrowedState": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.CashCorrectionTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.CashDepositStatus": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.CashExpenseAmountTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.CashJournalTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.CashTransactionLedgerTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.ConnectionType": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.ControlDocumentTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.CostPriceCalculationMethod": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.CurrencyDto": {
        "required": [
          "Precision"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Precision": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.DataModels.CustomFieldByBackendValue": {
        "required": [
          "BackendID"
        ],
        "type": "object",
        "properties": {
          "ArrayValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldValue"
            },
            "description": "Used for multiple values"
          },
          "BackendID": {
            "type": "string"
          },
          "BlobValue": {
            "type": "string",
            "description": "Used for datatype Blob",
            "format": "uuid"
          },
          "BoolValue": {
            "type": "boolean",
            "description": "Used for datatype Bool"
          },
          "DateTimeValue": {
            "type": "string",
            "description": "Used for datatype DateTime and Date",
            "format": "date-time"
          },
          "NumberValue": {
            "type": "number",
            "description": "Used for datatype Integer and Decimal"
          },
          "StringValue": {
            "type": "string",
            "description": "Used for datatype String, Text and Enum"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.DataModels.CustomFieldData": {
        "type": "object",
        "properties": {
          "Values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldValue"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.DataModels.CustomFieldFilterConditionResult": {
        "required": [
          "CustomFieldId",
          "Matches",
          "CurrentValuePresent"
        ],
        "type": "object",
        "properties": {
          "CurrentValue": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldValue"
          },
          "CurrentValuePresent": {
            "type": "boolean"
          },
          "CustomFieldId": {
            "type": "integer"
          },
          "ExpectedValue": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldValue"
          },
          "Matches": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.DataModels.CustomFieldFilterResult": {
        "required": [
          "FilterType",
          "Matches"
        ],
        "type": "object",
        "properties": {
          "ConditionResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldFilterConditionResult"
            }
          },
          "FilterResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldFilterResult"
            }
          },
          "FilterType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldFilterType"
          },
          "Matches": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.DataModels.CustomFieldFilterType": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.CustomFieldKeyValue": {
        "required": [
          "CustomFieldID"
        ],
        "type": "object",
        "properties": {
          "ArrayValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldValue"
            },
            "description": "Used for multiple values"
          },
          "BlobValue": {
            "type": "string",
            "description": "Used for datatype Blob",
            "format": "uuid"
          },
          "BoolValue": {
            "type": "boolean",
            "description": "Used for datatype Bool"
          },
          "CustomFieldID": {
            "type": "integer",
            "description": "Identifier for the custom field"
          },
          "DateTimeValue": {
            "type": "string",
            "description": "Used for datatype DateTime and Date",
            "format": "date-time"
          },
          "NumberValue": {
            "type": "number",
            "description": "Used for datatype Integer and Decimal"
          },
          "StringValue": {
            "type": "string",
            "description": "Used for datatype String, Text and Enum"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.DataModels.CustomFieldOptions": {
        "type": "object",
        "properties": {
          "DefaultValue": {
            "type": "string"
          },
          "EnumValues": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "IsArray": {
            "type": "boolean"
          },
          "IsRequired": {
            "type": "boolean"
          },
          "MaximumDate": {
            "type": "string",
            "format": "date-time"
          },
          "MaximumLength": {
            "type": "integer"
          },
          "MaximumValue": {
            "type": "number"
          },
          "MinimumDate": {
            "type": "string",
            "format": "date-time"
          },
          "MinimumLength": {
            "type": "integer"
          },
          "MinimumValue": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.DataModels.CustomFieldValue": {
        "type": "object",
        "properties": {
          "ArrayValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldValue"
            },
            "description": "Used for multiple values"
          },
          "BlobValue": {
            "type": "string",
            "description": "Used for datatype Blob",
            "format": "uuid"
          },
          "BoolValue": {
            "type": "boolean",
            "description": "Used for datatype Bool"
          },
          "DateTimeValue": {
            "type": "string",
            "description": "Used for datatype DateTime and Date",
            "format": "date-time"
          },
          "NumberValue": {
            "type": "number",
            "description": "Used for datatype Integer and Decimal"
          },
          "StringValue": {
            "type": "string",
            "description": "Used for datatype String, Text and Enum"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.DataModels.DiscountAppliesTo": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.DiscountTriggers": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.EventExportConfigurationConfig": {
        "type": "object",
        "properties": {
          "Authorization": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.EventExportConfigurationConfigAuthorization"
          },
          "ExcludeOrganizationUnits": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "ExcludedMessageTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.EventExportConfigurationTarget"
            }
          },
          "IncludeOrganizationUnits": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "MessageTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.EventExportConfigurationTarget"
            }
          },
          "ResponseMode": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.EventExportConfigurationResponseMode"
          },
          "ScriptID": {
            "type": "integer"
          },
          "TimeoutSeconds": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.DataModels.EventExportConfigurationConfigAuthorization": {
        "type": "object",
        "properties": {
          "StaticBearerToken": {
            "type": "string",
            "description": "This will result in a authorization header that looks like: `Authorization: Bearer TOKEN`"
          },
          "StaticUnschemedToken": {
            "type": "string",
            "description": "This will result in a authorization header that looks like: `Authorization: TOKEN`. Use this only when the other options are not sufficient."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.DataModels.EventExportConfigurationResponseMode": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.EventExportConfigurationStatus": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.EventExportConfigurationTarget": {
        "required": [
          "TargetID"
        ],
        "type": "object",
        "properties": {
          "EventType": {
            "type": "string"
          },
          "TargetID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.DataModels.ExternalModificationStatuses": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.FinancialEventStatuses": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.FinancialEventTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.FinancialPeriodAuditStatus": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.FinancialPeriodExportTrigger": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.FinancialPeriodStatus": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.FinancialReportingPeriodTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.FullStockCountLabelState": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.FullStockCountType": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.IdentificationTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.InitialCycleCountLabelStatus": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.InitialCycleCountStatus": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.InvoiceCalculationMethod": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.InvoiceDisputeTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.InvoiceStatuses": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.InvoiceTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.LegalForms": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.MessageQueueErrorStatuses": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.MessageTemplateDestinations": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.OrderBlobTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.OrderExportStatuses": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.OrderInterventionWorkSet": {
        "required": [
          "OrderID",
          "UserTaskID",
          "OrderInterventionTaskID"
        ],
        "type": "object",
        "properties": {
          "Comment": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderInterventionTaskID": {
            "type": "integer"
          },
          "Reason": {
            "type": "string"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.DataModels.OrderLineAvailabilityStatus": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.OrderLineCommitmentStatus": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.OrderLineTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.OrderProperties": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.OrderStatus": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.OrderTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.OrganizationUnitStatus": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.OrganizationUnitSupplierTargets": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.PaymentCashJournalMethod": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.PaymentStatuses": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.PaymentTypeCaptureMoment": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.PhoneNumberTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.PrintTaskType": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.ProductBundleLineTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.ProductBundleTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.ProductPromisedDeliveryStatuses": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.ProductRelationDirection": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.ProductStatus": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.ProductStructureDefinition": {
        "type": "object",
        "properties": {
          "Children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.ProductStructureDefinition"
            }
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.Search.FilterModel"
            }
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.DataModels.ProductTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.PropertyType": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.QuickBuyType": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.ReservationCleanupTaskLineTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.ReservationCleanupTaskTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.ShipmentLineDeliveryTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.ShipmentReceiveMethods": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.ShipmentStatuses": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.ShippingMethodDeliveryTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.StockRelationType": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.StockReplenishmentType": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.SubscriptionStatus": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.TaxRateCategory": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.TransputJobStatuses": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.UserAccountType": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.VisibilityType": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.ZonedCycleCountResultStatus": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.ZonedCycleCountResultTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DataModels.ZonedCycleCountScheduleProductSearchFilterModel": {
        "required": [
          "Negation",
          "ExactMatch"
        ],
        "type": "object",
        "properties": {
          "ExactMatch": {
            "type": "boolean"
          },
          "From": {
            "type": "string"
          },
          "IncludeMissing": {
            "type": "boolean"
          },
          "Negation": {
            "type": "boolean"
          },
          "To": {
            "type": "string"
          },
          "Values": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.DataModels.ZonedCycleCountScheduleProductSearchModel": {
        "type": "object",
        "properties": {
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.ZonedCycleCountScheduleProductSearchFilterModel"
            }
          },
          "Query": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Dates.RegularOpeningHours": {
        "required": [
          "OpeningTime",
          "ClosingTime",
          "Closed",
          "DayOfWeek"
        ],
        "type": "object",
        "properties": {
          "Closed": {
            "type": "boolean"
          },
          "ClosingTime": {
            "type": "string"
          },
          "DayOfWeek": {
            "$ref": "#/components/schemas/EVA.Core.DayOfWeek"
          },
          "OpeningTime": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Dates.WeekOpeningsDto": {
        "required": [
          "OpeningTime",
          "Date",
          "ClosingTime",
          "Closed",
          "DayOfWeek"
        ],
        "type": "object",
        "properties": {
          "Closed": {
            "type": "boolean"
          },
          "ClosingTime": {
            "type": "string"
          },
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "DayOfWeek": {
            "$ref": "#/components/schemas/EVA.Core.DayOfWeek"
          },
          "OpeningTime": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.DayOfWeek": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DaysOfWeek": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Devices.Dto.DeviceDto": {
        "required": [
          "TypeID",
          "ID"
        ],
        "type": "object",
        "properties": {
          "Address": {
            "type": "string"
          },
          "AssemblyName": {
            "type": "string"
          },
          "BackendID": {
            "type": "string"
          },
          "Data": {
            "type": "object"
          },
          "GlobalID": {
            "type": "string",
            "format": "uuid"
          },
          "HardwareID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "NetworkName": {
            "type": "string"
          },
          "OrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.Dto.OrganizationUnitDto"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "StationID": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.API.FlagsEnumDto"
          },
          "TypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Devices.Dto.StationDto": {
        "required": [
          "HasCustomerFacingDisplay",
          "HasPinDevice",
          "ID",
          "HasPrinterDevice",
          "HasThermalPrinterDevice",
          "HasCashDrawerDevice",
          "IsPointOfSale",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Barcode": {
            "type": "string"
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.CustomFields.CustomFieldResponse"
            }
          },
          "Devices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Devices.Dto.DeviceDto"
            }
          },
          "FiscalSystemID": {
            "type": "string"
          },
          "GlobalID": {
            "type": "string",
            "format": "uuid"
          },
          "HasCashDrawerDevice": {
            "type": "boolean"
          },
          "HasCustomerFacingDisplay": {
            "type": "boolean"
          },
          "HasPinDevice": {
            "type": "boolean"
          },
          "HasPrinterDevice": {
            "type": "boolean"
          },
          "HasThermalPrinterDevice": {
            "type": "boolean"
          },
          "ID": {
            "type": "integer"
          },
          "IsPointOfSale": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          },
          "OrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.Dto.OrganizationUnitDto"
          },
          "OrganizationUnitDescription": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Devices.ListDevicesFilter": {
        "type": "object",
        "properties": {
          "Address": {
            "type": "string"
          },
          "BackendID": {
            "type": "string"
          },
          "DeviceIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "HardwareID": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "NetworkName": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "PrinterTypeID": {
            "type": "integer"
          },
          "StationID": {
            "type": "integer"
          },
          "TypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Devices.ListDevicesModel": {
        "required": [
          "Type",
          "TypeID",
          "ID",
          "ConnectionType",
          "CashLimit",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Address": {
            "type": "string"
          },
          "AssemblyName": {
            "type": "string"
          },
          "BackendID": {
            "type": "string"
          },
          "CashLimit": {
            "type": "number"
          },
          "ConnectionType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ConnectionType"
          },
          "Data": {
            "type": "object"
          },
          "HardwareID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "NetworkName": {
            "type": "string"
          },
          "OrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Devices.ListDevicesModel_OrganizationUnitModel"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "PrinterType": {
            "$ref": "#/components/schemas/EVA.Core.Devices.ListDevicesModel_PrinterTypeModel"
          },
          "PrinterTypeID": {
            "type": "integer"
          },
          "Station": {
            "$ref": "#/components/schemas/EVA.Core.Devices.ListDevicesModel_StationModel"
          },
          "StationID": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.API.FlagsEnumDto"
          },
          "TypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Devices.ListDevicesModel_OrganizationUnitModel": {
        "required": [
          "ID",
          "Name"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Devices.ListDevicesModel_PrinterTypeModel": {
        "required": [
          "ID",
          "PaperWidth",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "PaperWidth": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Devices.ListDevicesModel_StationModel": {
        "required": [
          "ID",
          "Name"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "OrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Devices.ListDevicesModel_OrganizationUnitModel"
          },
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Devices.ListStationsFilter": {
        "required": [
          "IncludeDeleted"
        ],
        "type": "object",
        "properties": {
          "DeviceTypeID": {
            "type": "integer"
          },
          "IncludeDeleted": {
            "type": "boolean"
          },
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.DisableDiscountOnOrder": {
        "required": [
          "OrderID",
          "DiscountID"
        ],
        "type": "object",
        "properties": {
          "DiscountID": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.DisableDiscountTriggersOnOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "DiscountTrigger": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.DiscountTriggers"
            }
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.EnableDisabledDiscountOnOrder": {
        "required": [
          "OrderID",
          "DiscountID"
        ],
        "type": "object",
        "properties": {
          "DiscountID": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.EnableDiscountTriggersOnOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "DiscountTrigger": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.DiscountTriggers"
            }
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.GetOrderDiscountInfo": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.GetOrderDiscountInfoResponse": {
        "type": "object",
        "properties": {
          "Discounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Discounts.GetOrderDiscountInfoResponse_DiscountInfo"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrderLineDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Discounts.GetOrderDiscountInfoResponse_OrderLineDiscount"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.GetOrderDiscountInfoResponse_CouponInfo": {
        "required": [
          "ID",
          "DiscountOrderLineID"
        ],
        "type": "object",
        "properties": {
          "Code": {
            "type": "string"
          },
          "DiscountOrderLineID": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.GetOrderDiscountInfoResponse_DiscountInfo": {
        "required": [
          "NeedsReason",
          "IsDisabled",
          "ID",
          "TotalDiscountAmount"
        ],
        "type": "object",
        "properties": {
          "AppliedToOrderLines": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The OrderLineID's on which the discount is applied."
          },
          "BackendID": {
            "type": "string"
          },
          "Coupons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Discounts.GetOrderDiscountInfoResponse_CouponInfo"
            }
          },
          "Description": {
            "type": "string"
          },
          "DiscountOrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The OrderLineID's of the discount lines."
          },
          "ID": {
            "type": "integer"
          },
          "IsDisabled": {
            "type": "boolean",
            "description": "If the discount is disabled with the DisableDiscountOnOrder service"
          },
          "Manuals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Discounts.GetOrderDiscountInfoResponse_ManualInfo"
            }
          },
          "MarketingDescription": {
            "type": "string"
          },
          "NeedsReason": {
            "type": "boolean",
            "description": "If the manual discount needs a reason to apply it."
          },
          "TotalDiscountAmount": {
            "type": "number"
          },
          "Type": {
            "type": "string",
            "description": "Discount type: Default/System/Coupon/Bundle/Manual"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.GetOrderDiscountInfoResponse_ManualInfo": {
        "required": [
          "DiscountOrderLineID",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "DiscountOrderLineID": {
            "type": "integer"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Discounts.OrderLineWithQuantity"
            },
            "description": "If the manual discount is applied to a subset of lines, this will contain those lines. If empty, the discount is applied to the order."
          },
          "Reason": {
            "type": "string",
            "description": "Reason for the manual discount"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.GetOrderDiscountInfoResponse_OrderLineDiscount": {
        "required": [
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "Details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Discounts.GetOrderDiscountInfoResponse_OrderLineDiscountDetail"
            }
          },
          "OrderLineID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.GetOrderDiscountInfoResponse_OrderLineDiscountDetail": {
        "required": [
          "DiscountID",
          "DiscountAmount"
        ],
        "type": "object",
        "properties": {
          "DiscountAmount": {
            "type": "number"
          },
          "DiscountID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.GetPickProductDiscountOptionsForOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.GetPickProductDiscountOptionsForOrderLine": {
        "required": [
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.GetPickProductDiscountOptionsForOrderLineResponse": {
        "required": [
          "BaseAmount"
        ],
        "type": "object",
        "properties": {
          "BaseAmount": {
            "type": "number"
          },
          "CurrentSelection": {
            "type": "integer"
          },
          "CurrentTier": {
            "type": "string",
            "format": "uuid"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Options": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "Tiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Discounts.PickProductTierOptions"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.GetPickProductDiscountOptionsForOrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OptionsPerLine": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.Discounts.GetPickProductDiscountOptionsForOrderResponse_PickProductDiscountOptions"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.GetPickProductDiscountOptionsForOrderResponse_PickProductDiscountOptions": {
        "required": [
          "BaseAmount"
        ],
        "type": "object",
        "properties": {
          "BaseAmount": {
            "type": "number"
          },
          "CurrentSelection": {
            "type": "integer"
          },
          "CurrentTier": {
            "type": "string",
            "format": "uuid"
          },
          "Options": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "Tiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Discounts.PickProductTierOptions"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.ListDisabledDiscountTriggersOnOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.ListDisabledDiscountTriggersOnOrderResponse": {
        "type": "object",
        "properties": {
          "DisabledDiscountTriggers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.DiscountTriggers"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.ListDisabledDiscountsOnOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.ListDisabledDiscountsOnOrderResponse": {
        "type": "object",
        "properties": {
          "DisabledDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Discounts.ListDisabledDiscountsOnOrderResponse_Item"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.ListDisabledDiscountsOnOrderResponse_Item": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "CampaignName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "MarketingDescription": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.ListDiscountCouponHandlers": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Discounts.ListDiscountCouponHandlersResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Handlers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.ListManualDiscounts": {
        "type": "object",
        "properties": {
          "DiscountAppliesTo": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.DiscountAppliesTo"
          },
          "OrderType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.ListManualDiscountsResponse": {
        "required": [
          "Result"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Discounts.ListManualDiscountsResponse_ManualDiscountDto"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.ListManualDiscountsResponse_ManualDiscountDto": {
        "required": [
          "Type",
          "NeedsReason",
          "ID",
          "AppliesTo"
        ],
        "type": "object",
        "properties": {
          "AppliesTo": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.DiscountAppliesTo"
          },
          "BackendID": {
            "type": "string"
          },
          "CurrencyID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "FixedAmount": {
            "type": "number"
          },
          "ID": {
            "type": "integer"
          },
          "MarketingDescription": {
            "type": "string"
          },
          "MaxAmount": {
            "type": "number"
          },
          "NeedsReason": {
            "type": "boolean"
          },
          "Type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.OrderLineWithQuantity": {
        "required": [
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.PickProductTierOptions": {
        "required": [
          "From",
          "ID",
          "Difference",
          "Prompt",
          "IsCurrentTier"
        ],
        "type": "object",
        "properties": {
          "DefaultProductID": {
            "type": "integer"
          },
          "Description": {
            "type": "string"
          },
          "Difference": {
            "type": "number"
          },
          "From": {
            "type": "number"
          },
          "ID": {
            "type": "string",
            "format": "uuid"
          },
          "IsCurrentTier": {
            "type": "boolean"
          },
          "ProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "Prompt": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.PotentialDiscountDto": {
        "required": [
          "ID",
          "IsAlreadyApplied"
        ],
        "type": "object",
        "properties": {
          "ActionProperties": {
            "type": "object"
          },
          "AmountMissing": {
            "type": "number"
          },
          "BackendID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "IsAlreadyApplied": {
            "type": "boolean"
          },
          "MarketingDescription": {
            "type": "string"
          },
          "ProductID": {
            "type": "integer"
          },
          "SecondaryProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.PrefigureDiscountResult": {
        "required": [
          "RequiresCustomerCustomData",
          "RequiresCoupon",
          "CouponPresent",
          "DiscountID",
          "RequirementsMet",
          "RequiresMinimumAmount",
          "RequiresCustomer",
          "IsAlreadyApplied"
        ],
        "type": "object",
        "properties": {
          "ActionData": {
            "type": "object"
          },
          "ActionResult": {
            "$ref": "#/components/schemas/EVA.Core.Discounts.PrefigureDiscountResult_DataResult"
          },
          "ActionType": {
            "type": "string"
          },
          "BackendID": {
            "type": "string"
          },
          "ConditionsResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Discounts.PrefigureDiscountResult_DataResult"
            }
          },
          "CouponPresent": {
            "type": "boolean"
          },
          "Description": {
            "type": "string"
          },
          "DiscountID": {
            "type": "integer"
          },
          "EligibleProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "IsAlreadyApplied": {
            "type": "boolean"
          },
          "MarketingDescription": {
            "type": "string"
          },
          "RequirementsMet": {
            "type": "boolean"
          },
          "RequiresCoupon": {
            "type": "boolean"
          },
          "RequiresCustomer": {
            "type": "boolean"
          },
          "RequiresCustomerCustomData": {
            "type": "boolean"
          },
          "RequiresMinimumAmount": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.PrefigureDiscountResult_DataResult": {
        "required": [
          "RequiresCustomerCustomData",
          "RequirementsMet",
          "RequiresMinimumAmount",
          "RequiresCustomer"
        ],
        "type": "object",
        "properties": {
          "CustomerFilterResult": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldFilterResult"
          },
          "OrderAmountMissing": {
            "type": "number"
          },
          "OrderAmountMissingForNextTier": {
            "type": "number"
          },
          "ProductSetResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Discounts.PrefigureDiscountResult_ProductSetResult"
            }
          },
          "RequirementsMet": {
            "type": "boolean"
          },
          "RequiresCustomer": {
            "type": "boolean"
          },
          "RequiresCustomerCustomData": {
            "type": "boolean"
          },
          "RequiresMinimumAmount": {
            "type": "boolean"
          },
          "TypeName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.PrefigureDiscountResult_ProductSetResult": {
        "type": "object",
        "properties": {
          "ProductAmountMissing": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Discounts.PrefigureDiscountResult_ProductWithAmount"
            }
          },
          "ProductAmountMissingForNextTier": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Discounts.PrefigureDiscountResult_ProductWithAmount"
            }
          },
          "ProductQuantityMissing": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Discounts.PrefigureDiscountResult_ProductWithQuantity"
            }
          },
          "ProductQuantityMissingForNextTier": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Discounts.PrefigureDiscountResult_ProductWithQuantity"
            }
          },
          "ProductSet": {
            "$ref": "#/components/schemas/EVA.Core.Discounts.ProductSet"
          },
          "SetAmountMissing": {
            "type": "number"
          },
          "SetAmountMissingForNextTier": {
            "type": "number"
          },
          "SetQuantityMissing": {
            "type": "integer"
          },
          "SetQuantityMissingForNextTier": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.PrefigureDiscountResult_ProductWithAmount": {
        "required": [
          "ProductID",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.PrefigureDiscountResult_ProductWithQuantity": {
        "required": [
          "ProductID",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "ProductID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.PrefigureDiscounts": {
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "ProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "ProductSearch": {
            "$ref": "#/components/schemas/EVA.Core.Products.SearchProducts"
          },
          "ProductSearchID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.PrefigureDiscountsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Discounts.PrefigureDiscountResult"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.ProductSet": {
        "required": [
          "IsDiscountableProductSet"
        ],
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "DiscountableQuantityOfProducts": {
            "type": "integer"
          },
          "Filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Discounts.ProductSet_Filter"
            }
          },
          "ID": {
            "type": "string",
            "format": "uuid"
          },
          "IsDiscountableProductSet": {
            "type": "boolean"
          },
          "LanguageID": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "ProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "ProductSearchID": {
            "type": "integer"
          },
          "RequiredProductAmount": {
            "type": "number"
          },
          "RequiredQuantityOfProducts": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.ProductSet_Filter": {
        "required": [
          "ExactMatch",
          "Exclude"
        ],
        "type": "object",
        "properties": {
          "ExactMatch": {
            "type": "boolean"
          },
          "Exclude": {
            "type": "boolean"
          },
          "From": {
            "type": "string"
          },
          "PropertyName": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "Values": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Discounts.SetPickProductDiscountOptionsForOrderLine": {
        "required": [
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "Selection": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.DocumentStore.GetDocumentStoreCategories": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.DocumentStore.GetDocumentStoreCategoriesResponse": {
        "type": "object",
        "properties": {
          "Categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.DocumentStore.GetDocumentStoreDocument": {
        "type": "object",
        "properties": {
          "CategoryID": {
            "type": "string",
            "description": "@The category of the document, see `GetDocumentStoreCategories`"
          },
          "PartitionKey": {
            "type": "string",
            "description": "@The partition key of the document"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.DocumentStore.GetDocumentStoreDocumentResponse": {
        "type": "object",
        "properties": {
          "Data": {
            "type": "object"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.DocumentStore.SearchDocumentStore": {
        "type": "object",
        "properties": {
          "CategoryID": {
            "type": "string",
            "description": "@The category of the document, see `GetDocumentStoreCategories`"
          },
          "From": {
            "type": "string",
            "format": "date-time"
          },
          "To": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.DocumentStore.SearchDocumentStoreResponse": {
        "type": "object",
        "properties": {
          "Documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DocumentStore.SearchDocumentStoreResponse_SearchDocumentStoreResponseResult"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.DocumentStore.SearchDocumentStoreResponse_SearchDocumentStoreResponseResult": {
        "required": [
          "CreatedByID",
          "CreationTime"
        ],
        "type": "object",
        "properties": {
          "CreatedByID": {
            "type": "integer"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Id": {
            "type": "string"
          },
          "MimeType": {
            "type": "string"
          },
          "PartitionKey": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ElevationBarcode.GenerateElevationBarcode": {
        "type": "object",
        "properties": {
          "Functionality": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "Scope": {
            "$ref": "#/components/schemas/EVA.Core.Security.FunctionalityScope"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ElevationBarcode.GenerateElevationBarcodeResponse": {
        "type": "object",
        "properties": {
          "Barcode": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "RequestToken": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EmptyResponseMessage": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Enumerations.AuthenticationFailureReasons": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Enumerations.AuthenticationResults": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Enumerations.LineActionTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Enums.GetEnumValues": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Enums.GetEnumValuesResponse": {
        "required": [
          "IsFlags"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "IsFlags": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Enums.GetEnumValuesResponse_EnumValue"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Enums.GetEnumValuesResponse_EnumValue": {
        "required": [
          "Value"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Value": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Error": {
        "type": "object",
        "properties": {
          "Identifier": {
            "type": "string"
          },
          "Message": {
            "type": "string"
          },
          "MessageArguments": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "Prefix": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventExportConfigurations.CreateEventExportConfiguration": {
        "required": [
          "Endpoint",
          "Status",
          "Name",
          "Config"
        ],
        "type": "object",
        "properties": {
          "Config": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.EventExportConfigurationConfig"
          },
          "Endpoint": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.EventExportConfigurationStatus"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventExportConfigurations.CreateEventExportConfigurationResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventExportConfigurations.DeleteEventExportConfiguration": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventExportConfigurations.GetEventExportConfiguration": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventExportConfigurations.GetEventExportConfigurationResponse": {
        "required": [
          "ID",
          "Status"
        ],
        "type": "object",
        "properties": {
          "Config": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.EventExportConfigurationConfig"
          },
          "Endpoint": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ErrorReason": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Name": {
            "type": "string"
          },
          "SecretKey1": {
            "type": "string"
          },
          "SecretKey2": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.EventExportConfigurationStatus"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventExportConfigurations.GetEventExportConfigurations": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.EventExportConfigurations.GetEventExportConfigurationsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.EventExportConfigurations.GetEventExportConfigurationsResponse_Item"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventExportConfigurations.GetEventExportConfigurationsResponse_Item": {
        "required": [
          "ID",
          "Status"
        ],
        "type": "object",
        "properties": {
          "Config": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.EventExportConfigurationConfig"
          },
          "Endpoint": {
            "type": "string"
          },
          "ErrorReason": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "SecretKey1": {
            "type": "string"
          },
          "SecretKey2": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.EventExportConfigurationStatus"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventExportConfigurations.GetEventExportTargetTypes": {
        "required": [
          "EventTarget"
        ],
        "type": "object",
        "properties": {
          "EventTarget": {
            "$ref": "#/components/schemas/EVA.Core.Events.EventExportTarget"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventExportConfigurations.GetEventExportTargetTypesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "EventTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventExportConfigurations.RotateEventExportConfigurationKey": {
        "required": [
          "KeyID",
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "KeyID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventExportConfigurations.UpdateEventExportConfiguration": {
        "required": [
          "ID",
          "Endpoint",
          "Status",
          "Name",
          "Config"
        ],
        "type": "object",
        "properties": {
          "Config": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.EventExportConfigurationConfig"
          },
          "Endpoint": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.EventExportConfigurationStatus"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument": {
        "required": [
          "CreationTime"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "Attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_AttachmentDocument"
            }
          },
          "Auditing": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_AuditingDocument"
          },
          "AuthenticationResponse": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_AuthenticationResponseDocument"
          },
          "BackendType": {
            "type": "string"
          },
          "BlobID": {
            "type": "string",
            "format": "uuid"
          },
          "CashCorrection": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_CashCorrectionDocument"
          },
          "CashDeposit": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_CashDepositDocument"
          },
          "CashExpense": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_CashExpenseDocument"
          },
          "CashMovement": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_CashMovementDocument"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "CurrentUser": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_CurrentUserDocument"
          },
          "DailyTotals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_DailyTotalDocument"
            }
          },
          "Data": {
            "type": "object"
          },
          "Description": {
            "type": "string"
          },
          "Device": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_DeviceDocument"
          },
          "Discount": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_DiscountDocument"
          },
          "ExecutionContext": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_ExecutionContextDocument"
          },
          "FinancialPeriod": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_FinancialPeriodDocument"
          },
          "FinancialPeriodAudit": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_FinancialPeriodAuditDocument"
          },
          "FinancialReportingPeriod": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_FinancialReportingPeriodDocument"
          },
          "ID": {
            "type": "string"
          },
          "Invoice": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_InvoiceDocument"
          },
          "IpAddress": {
            "type": "string"
          },
          "MessageTemplate": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_MessageTemplateDocument"
          },
          "Order": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_OrderDocument"
          },
          "OrderLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_OrderLineDocument"
            }
          },
          "OrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_OrganizationUnitDocument"
          },
          "PartitionKey": {
            "type": "string"
          },
          "PaymentTransaction": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_PaymentTransactionDocument"
          },
          "Role": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_RoleDocument"
          },
          "Station": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_StationDocument"
          },
          "TenantID": {
            "type": "string"
          },
          "TerminalReport": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_TerminalReportDocument"
          },
          "Type": {
            "type": "string"
          },
          "User": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_UserDocument"
          },
          "UserTask": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_UserTaskDocument"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_AttachmentDocument": {
        "required": [
          "BlobID"
        ],
        "type": "object",
        "properties": {
          "BlobID": {
            "type": "string",
            "format": "uuid"
          },
          "Category": {
            "type": "string"
          },
          "MimeType": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_AuditingDocument": {
        "required": [
          "ChainID",
          "CumulativeTotalTaxes",
          "Version"
        ],
        "type": "object",
        "properties": {
          "ChainID": {
            "type": "integer"
          },
          "CumulativeTotalTaxes": {
            "type": "number"
          },
          "KeyBlobID": {
            "type": "string",
            "format": "uuid"
          },
          "PreviousSequenceNumber": {
            "type": "integer"
          },
          "PreviousSignature": {
            "type": "string"
          },
          "SequenceNumber": {
            "type": "integer"
          },
          "Signature": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "Version": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_AuthenticationResponseDocument": {
        "required": [
          "Result"
        ],
        "type": "object",
        "properties": {
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.Enumerations.AuthenticationResults"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_CashCorrectionDocument": {
        "required": [
          "CreatedByID",
          "ID",
          "Amount",
          "FinancialPeriodID"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "CreatedByID": {
            "type": "integer"
          },
          "DeviceID": {
            "type": "integer"
          },
          "FinancialPeriodID": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "Reason": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_CashCorrectionReasonDocument"
          },
          "Remark": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_CashCorrectionReasonDocument": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_CashDepositDocument": {
        "required": [
          "ID",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "CurrencyID": {
            "type": "string"
          },
          "Details": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_CashDepositDocument_CashDepositDetails"
          },
          "ID": {
            "type": "integer"
          },
          "Number": {
            "type": "string"
          },
          "SignatureBlobID": {
            "type": "string",
            "format": "uuid"
          },
          "Status": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_CashDepositDocument_CashDepositDetails": {
        "type": "object",
        "properties": {
          "BankNotes": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "Coins": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_CashExpenseDocument": {
        "required": [
          "ID",
          "TaxRate",
          "TaxCodeID",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "BlobID": {
            "type": "string",
            "format": "uuid"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "SignatureBlobID": {
            "type": "string",
            "format": "uuid"
          },
          "TaxCodeID": {
            "type": "integer"
          },
          "TaxRate": {
            "type": "number"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_CashExpenseDocument_CashExpenseType"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_CashExpenseDocument_CashExpenseType": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_CashMovementDocument": {
        "required": [
          "ID",
          "SourceDeviceID",
          "DestinationDeviceID",
          "Amount",
          "FinancialPeriodID"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "CurrencyID": {
            "type": "string"
          },
          "DestinationDeviceID": {
            "type": "integer"
          },
          "FinancialPeriodID": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "PaymentTypeID": {
            "type": "integer"
          },
          "SourceDeviceID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_CurrentUserDocument": {
        "required": [
          "Type",
          "ID",
          "ApplicationID",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "ApplicationID": {
            "type": "integer"
          },
          "CountryID": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "FullName": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "LanguageID": {
            "type": "string"
          },
          "OrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_OrganizationUnitDocument"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "StationID": {
            "type": "integer"
          },
          "TimeZone": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.UserTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_DailyTotalDocument": {
        "required": [
          "ExpectedTotal",
          "ExternalTotal"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ExpectedTotal": {
            "type": "number"
          },
          "ExternalTotal": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_DeviceDocument": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "EcrID": {
            "type": "string"
          },
          "GlobalID": {
            "type": "string",
            "format": "uuid"
          },
          "HardwareID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "IpAddress": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "OpenCashDrawerReason": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_DeviceDocument_OpenCashDrawerReasonDocument"
          },
          "ProxyID": {
            "type": "string"
          },
          "StationID": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_DeviceDocument_DeviceTypeDocument"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_DeviceDocument_DeviceTypeDocument": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "IDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "Name": {
            "type": "string"
          },
          "Names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_DeviceDocument_OpenCashDrawerReasonDocument": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_DiscountDocument": {
        "required": [
          "Trigger"
        ],
        "type": "object",
        "properties": {
          "ActionData": {
            "type": "object"
          },
          "ActionType": {
            "type": "string"
          },
          "Trigger": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.DiscountTriggers"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_ExecutionContextDocument": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "UserAgent": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_FinancialPeriodAuditDocument": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_FinancialPeriodDocument": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_FinancialReportingPeriodDocument": {
        "required": [
          "Type",
          "StartDate",
          "ID",
          "EndDate"
        ],
        "type": "object",
        "properties": {
          "EndDate": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer"
          },
          "StartDate": {
            "type": "string",
            "format": "date-time"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.FinancialReportingPeriodTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_InvoiceDataDocument": {
        "type": "object",
        "properties": {
          "Data": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_InvoiceDocument": {
        "required": [
          "TotalAmount",
          "ID"
        ],
        "type": "object",
        "properties": {
          "FiscalID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "InvoiceData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_InvoiceDataDocument"
            }
          },
          "InvoiceNumber": {
            "type": "string"
          },
          "ReferencedInvoiceID": {
            "type": "integer"
          },
          "TotalAmount": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_MessageTemplateDocument": {
        "required": [
          "ID",
          "DestinationID"
        ],
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "DestinationID": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "LanguageID": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_OrderDocument": {
        "required": [
          "Type",
          "HasReturns",
          "IsShipped",
          "ID",
          "IsInvoiced",
          "IsCompleted",
          "IsPaid"
        ],
        "type": "object",
        "properties": {
          "CurrencyID": {
            "type": "string"
          },
          "Customer": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_OrderDocument_CustomerDocument"
          },
          "HasReturns": {
            "type": "boolean"
          },
          "ID": {
            "type": "integer"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "IsInvoiced": {
            "type": "boolean"
          },
          "IsPaid": {
            "type": "boolean"
          },
          "IsShipped": {
            "type": "boolean"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_OrderDocument_CustomerDocument": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_OrderLineDocument": {
        "required": [
          "ID",
          "QuantityInvoiced",
          "TaxRate",
          "QuantityShipped",
          "UnitPrice",
          "TotalQuantityToShip"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "QuantityInvoiced": {
            "type": "integer"
          },
          "QuantityShipped": {
            "type": "integer"
          },
          "TaxRate": {
            "type": "number"
          },
          "TotalQuantityToShip": {
            "type": "integer"
          },
          "UnitPrice": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_OrganizationUnitDocument": {
        "required": [
          "Type",
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnitTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_PaymentTransactionDocument": {
        "required": [
          "ID",
          "Status",
          "PaidAmount",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "AmountToRefund": {
            "type": "number"
          },
          "BackendID": {
            "type": "string"
          },
          "CurrencyID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "PaidAmount": {
            "type": "number"
          },
          "PaymentMethod": {
            "type": "string"
          },
          "RefundedAmount": {
            "type": "number"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.PaymentStatuses"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_PaymentTransactionDocument_PaymentTypeDocument"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_PaymentTransactionDocument_PaymentTypeDocument": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_RoleDocument": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_StationDocument": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_TerminalReportDocument": {
        "required": [
          "Type",
          "GrandTotal",
          "ReturnCount",
          "GrandTotalCash",
          "ReceiptsPrinted",
          "TotalDiscounts",
          "DiscountCount",
          "GrandTotalReturns",
          "Date",
          "TotalCopyReceiptsAmount",
          "CashDrawerOpenings",
          "CopyReceiptsPrinted",
          "GrandTotalNet",
          "Change",
          "TotalReturnsAmount"
        ],
        "type": "object",
        "properties": {
          "CashDrawerOpenings": {
            "type": "integer"
          },
          "Change": {
            "type": "number"
          },
          "Company": {
            "$ref": "#/components/schemas/EVA.Core.Auditing.Models.Billable"
          },
          "CopyReceiptsPrinted": {
            "type": "integer"
          },
          "CreditTaxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_TerminalReportDocument_Tax"
            }
          },
          "CurrencyID": {
            "type": "string"
          },
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "DebitTaxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_TerminalReportDocument_Tax"
            }
          },
          "DiscountCount": {
            "type": "integer"
          },
          "GrandTotal": {
            "type": "number"
          },
          "GrandTotalCash": {
            "type": "number"
          },
          "GrandTotalNet": {
            "type": "number"
          },
          "GrandTotalReturns": {
            "type": "number"
          },
          "Number": {
            "type": "string"
          },
          "Payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_TerminalReportDocument_Payment"
            }
          },
          "PaymentsPerUser": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_TerminalReportDocument_PaymentPerUser"
            }
          },
          "ProductGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_TerminalReportDocument_ProductGroup"
            }
          },
          "ReceiptsPrinted": {
            "type": "integer"
          },
          "ReturnCount": {
            "type": "integer"
          },
          "Supplier": {
            "$ref": "#/components/schemas/EVA.Core.Auditing.Models.Billable"
          },
          "Taxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_TerminalReportDocument_Tax"
            }
          },
          "TotalCopyReceiptsAmount": {
            "type": "number"
          },
          "TotalDiscounts": {
            "type": "number"
          },
          "TotalReturnsAmount": {
            "type": "number"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.Auditing.Models.TerminalReportType"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_TerminalReportDocument_Payment": {
        "required": [
          "Count",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "Count": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_TerminalReportDocument_Payment_Metadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_TerminalReportDocument_Payment_Metadata": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Code": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_TerminalReportDocument_PaymentPerUser": {
        "required": [
          "UserID",
          "Count",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "Count": {
            "type": "integer"
          },
          "Description": {
            "type": "string"
          },
          "EmployeeNumber": {
            "type": "string"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_TerminalReportDocument_ProductGroup": {
        "required": [
          "Count",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "Code": {
            "type": "string"
          },
          "Count": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_TerminalReportDocument_Tax": {
        "required": [
          "Base",
          "Rate",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "Base": {
            "type": "number"
          },
          "Code": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Rate": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_UserDocument": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_UserTaskDocument": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "CompletionTime": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "StartTime": {
            "type": "string",
            "format": "date-time"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument_UserTaskDocument_UserTaskTypeDocument"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerDocument_UserTaskDocument_UserTaskTypeDocument": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerFilters": {
        "required": [
          "OnlyAuditedDocuments"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerFilters_AmountFilter"
          },
          "DeviceID": {
            "type": "integer"
          },
          "EmailAddress": {
            "type": "string"
          },
          "FinancialPeriodIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "FirstName": {
            "type": "string"
          },
          "FromDate": {
            "type": "string",
            "format": "date-time"
          },
          "FullName": {
            "type": "string"
          },
          "IDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "OnlyAuditedDocuments": {
            "type": "boolean"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "ToDate": {
            "type": "string",
            "format": "date-time"
          },
          "Types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "UserIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.EventLedger.EventLedgerFilters_AmountFilter": {
        "type": "object",
        "properties": {
          "EqualTo": {
            "type": "number"
          },
          "GreaterThan": {
            "type": "number"
          },
          "LessThan": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Events.EventExportTarget": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.FeedTest": {
        "required": [
          "BufferSize",
          "TotalItems",
          "DoBenchmark",
          "FlushEveryItems"
        ],
        "type": "object",
        "properties": {
          "BenchCount": {
            "type": "integer"
          },
          "BufferSize": {
            "type": "integer"
          },
          "BufferStream": {
            "type": "boolean"
          },
          "DoBenchmark": {
            "type": "boolean"
          },
          "FlushEveryItems": {
            "type": "integer"
          },
          "SequentialScan": {
            "type": "boolean"
          },
          "TotalItems": {
            "type": "integer"
          },
          "WriteThrough": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.FeedTestResponse": {
        "required": [
          "MBytesPending",
          "MBytesCommitted"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "MBytesCommitted": {
            "type": "number"
          },
          "MBytesPending": {
            "type": "number"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Feeds.FeedSubscriptionDto": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "WebhookUrl": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Feeds.ListFeedSubscriptions": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Feeds.ListFeedSubscriptionsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Feeds.FeedSubscriptionDto"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Feeds.SubscribeToFeed": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "WebhookUrl": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Feeds.SubscribeToFeedResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Feeds.UnsubscribeFromFeed": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.AccountSummary": {
        "required": [
          "AccountID",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "AccountID": {
            "type": "integer"
          },
          "Amount": {
            "type": "number"
          },
          "Name": {
            "type": "string"
          },
          "ObjectAccount": {
            "type": "string"
          },
          "Subsidiary": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Cash.CashJournalDetailsModel": {
        "required": [
          "Type",
          "OpeningTime",
          "ID",
          "OpeningAmount",
          "OpenCashJournalsCount",
          "ExpectedClosingAmount"
        ],
        "type": "object",
        "properties": {
          "CashTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.Cash.CashJournalDetailsModel_CashTransactionLedger"
            }
          },
          "ClosingAmount": {
            "type": "number"
          },
          "ClosingDenominations": {
            "$ref": "#/components/schemas/EVA.Core.Finance.Cash.CashJournalDetailsModel_CashDenominations"
          },
          "ClosingTime": {
            "type": "string",
            "format": "date-time"
          },
          "Corrections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.Cash.CashJournalDetailsModel_CashCorrection"
            }
          },
          "CurrencyID": {
            "type": "string"
          },
          "Deposits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.Cash.CashJournalDetailsModel_CashDeposit"
            }
          },
          "Device": {
            "$ref": "#/components/schemas/EVA.Core.Finance.Cash.CashJournalDetailsModel_CashDevice"
          },
          "ExpectedClosingAmount": {
            "type": "number"
          },
          "Expenses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.Cash.CashJournalDetailsModel_CashExpense"
            }
          },
          "ID": {
            "type": "integer"
          },
          "OpenCashJournalsCount": {
            "type": "integer"
          },
          "OpeningAmount": {
            "type": "number"
          },
          "OpeningDenominations": {
            "$ref": "#/components/schemas/EVA.Core.Finance.Cash.CashJournalDetailsModel_CashDenominations"
          },
          "OpeningDeviation": {
            "type": "number"
          },
          "OpeningTime": {
            "type": "string",
            "format": "date-time"
          },
          "PaymentType": {
            "$ref": "#/components/schemas/EVA.Core.Finance.Cash.CashJournalDetailsModel_PaymentTypeDto"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.CashJournalTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Cash.CashJournalDetailsModel_CashCorrection": {
        "required": [
          "Type",
          "ID",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "CashTransactionLedger": {
            "$ref": "#/components/schemas/EVA.Core.Finance.Cash.CashJournalDetailsModel_CashTransactionLedger"
          },
          "ID": {
            "type": "integer"
          },
          "Remark": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.CashCorrectionTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Cash.CashJournalDetailsModel_CashDenominations": {
        "type": "object",
        "properties": {
          "BankNotes": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "Coins": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Cash.CashJournalDetailsModel_CashDeposit": {
        "required": [
          "ID",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "CashTransactionLedger": {
            "$ref": "#/components/schemas/EVA.Core.Finance.Cash.CashJournalDetailsModel_CashTransactionLedger"
          },
          "ID": {
            "type": "integer"
          },
          "Number": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Cash.CashJournalDetailsModel_CashDevice": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Station": {
            "$ref": "#/components/schemas/EVA.Core.Finance.Cash.CashJournalDetailsModel_Station"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.API.FlagsEnumDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Cash.CashJournalDetailsModel_CashExpense": {
        "required": [
          "ID",
          "CreationTime",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "BlobID": {
            "type": "string",
            "format": "uuid"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "TaxCode": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Cash.CashJournalDetailsModel_CashTransactionLedger": {
        "required": [
          "Type",
          "ID",
          "CreationTime",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Denominations": {
            "$ref": "#/components/schemas/EVA.Core.Finance.Cash.CashJournalDetailsModel_CashDenominations"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.CashTransactionLedgerTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Cash.CashJournalDetailsModel_PaymentTypeDto": {
        "required": [
          "ID",
          "CashJournalMethod"
        ],
        "type": "object",
        "properties": {
          "CashJournalMethod": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.PaymentCashJournalMethod"
          },
          "Code": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Cash.CashJournalDetailsModel_Station": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Cash.ListCashDepositsFilter": {
        "type": "object",
        "properties": {
          "DeviceID": {
            "type": "integer"
          },
          "FinancialPeriodID": {
            "type": "integer"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "StatusID": {
            "type": "integer"
          },
          "Statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.CashDepositStatus"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Cash.ListCashDepositsItem": {
        "required": [
          "DeviceID",
          "DeviceName",
          "ID",
          "CreationTime",
          "Status",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "BankNotes": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "Coins": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "CurrencyID": {
            "type": "string"
          },
          "DeviceID": {
            "type": "integer"
          },
          "DeviceName": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Number": {
            "type": "string"
          },
          "PaymentTypeID": {
            "type": "integer"
          },
          "PaymentTypeName": {
            "type": "string"
          },
          "SignatureBlobID": {
            "type": "string",
            "format": "uuid"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.CashDepositStatus"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.CashJournalTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Cash.ListCashExpensesFilter": {
        "type": "object",
        "properties": {
          "DeviceID": {
            "type": "integer"
          },
          "FinancialPeriodID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Cash.ListCashExpensesItem": {
        "required": [
          "ID",
          "CreationTime",
          "CashTransactionLedgerID",
          "Amount",
          "CashJournalID"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "BlobID": {
            "type": "string",
            "format": "uuid"
          },
          "CashJournalID": {
            "type": "integer"
          },
          "CashTransactionLedgerID": {
            "type": "integer"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "CurrencyID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Device": {
            "$ref": "#/components/schemas/EVA.Core.Finance.Cash.ListCashExpensesItem_ExpenseDevice"
          },
          "ID": {
            "type": "integer"
          },
          "SignatureBlobID": {
            "type": "string",
            "format": "uuid"
          },
          "TaxCode": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.Finance.Cash.ListCashExpensesItem_ExpenseType"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Cash.ListCashExpensesItem_ExpenseDevice": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Station": {
            "$ref": "#/components/schemas/EVA.Core.Finance.Cash.ListCashExpensesItem_ExpenseStation"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.API.FlagsEnumDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Cash.ListCashExpensesItem_ExpenseStation": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Cash.ListCashExpensesItem_ExpenseType": {
        "required": [
          "ID",
          "AmountType"
        ],
        "type": "object",
        "properties": {
          "AmountType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.CashExpenseAmountTypes"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string",
            "description": "Usually an internal & unchangable code - for display, use `Description`"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Cash.ListCashTransactionLedgerFilter": {
        "type": "object",
        "properties": {
          "CashJournalID": {
            "type": "integer"
          },
          "CurrencyID": {
            "type": "string",
            "format": "date-time"
          },
          "DeviceID": {
            "type": "integer"
          },
          "FinancialPeriodID": {
            "type": "integer"
          },
          "FromDate": {
            "type": "string",
            "format": "date-time"
          },
          "PaymentTypeID": {
            "type": "integer"
          },
          "ToDate": {
            "type": "string",
            "format": "date-time"
          },
          "Types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.CashTransactionLedgerTypes"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Cash.ListCashTransactionLedgerGroup": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "string",
            "format": "uuid"
          },
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.Cash.ListCashTransactionLedgerItem"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Cash.ListCashTransactionLedgerItem": {
        "required": [
          "Type",
          "DeviceTypeID",
          "PaymentTypeID",
          "ID",
          "CreationTime",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "BankNotes": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "Coins": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "CurrencyID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Details": {
            "type": "string"
          },
          "DeviceName": {
            "type": "string"
          },
          "DeviceTypeID": {
            "type": "integer"
          },
          "GroupID": {
            "type": "string",
            "format": "uuid"
          },
          "ID": {
            "type": "integer"
          },
          "PaymentTypeID": {
            "type": "integer"
          },
          "PaymentTypeName": {
            "type": "string"
          },
          "StationName": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.CashTransactionLedgerTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.CashCorrectionReason.CreateCashCorrectionReason": {
        "required": [
          "Sequence",
          "Name"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Sequence": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.CashCorrectionReason.CreateCashCorrectionReasonResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.CashCorrectionReason.DeleteCashCorrectionReason": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.CashCorrectionReason.GetCashCorrectionReason": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.CashCorrectionReason.GetCashCorrectionReasonResponse": {
        "required": [
          "Sequence",
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Name": {
            "type": "string"
          },
          "Sequence": {
            "type": "integer"
          },
          "TranslatedName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.CashCorrectionReason.GetCashCorrectionReasons": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Finance.CashCorrectionReason.GetCashCorrectionReasonsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Reasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.CashCorrectionReason.GetCashCorrectionReasonsResponse_CashCorrectionReasonData"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.CashCorrectionReason.GetCashCorrectionReasonsResponse_CashCorrectionReasonData": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.CashCorrectionReason.UpdateCashCorrectionReason": {
        "required": [
          "Sequence",
          "ID",
          "Name"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "object"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "object"
          },
          "Sequence": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.CloseFinancialPeriod": {
        "type": "object",
        "properties": {
          "ClosingImpedimentTypesToIgnore": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "If there is an impediment to closing the period and it allows being ignored then passing the name of the impediment type in this collection will not block closing the period on that impediment. Also see `GetFinancialPeriodClosingImpediments`."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.CompleteCloseCashJournal": {
        "required": [
          "TotalAmount",
          "DeviceID",
          "PaymentTypeID",
          "ForceValidation",
          "CurrencyID"
        ],
        "type": "object",
        "properties": {
          "BankNotes": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "Coins": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "Corrections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.CompleteCloseCashJournal_CashCorrection"
            }
          },
          "CurrencyID": {
            "type": "string"
          },
          "Data": {
            "type": "object"
          },
          "DeviceID": {
            "type": "integer"
          },
          "ForceValidation": {
            "type": "boolean"
          },
          "PaymentTypeID": {
            "type": "integer"
          },
          "PendingCashDeposits": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "TotalAmount": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.CompleteCloseCashJournal_CashCorrection": {
        "required": [
          "Description",
          "Amount",
          "ReasonID"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "Description": {
            "type": "string"
          },
          "ReasonID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.CompleteOpenCashJournal": {
        "required": [
          "TotalAmount",
          "DeviceID",
          "PaymentTypeID",
          "ForceValidation",
          "CurrencyID"
        ],
        "type": "object",
        "properties": {
          "BankNotes": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "Coins": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "CurrencyID": {
            "type": "string"
          },
          "DeviceID": {
            "type": "integer"
          },
          "ForceValidation": {
            "type": "boolean"
          },
          "OpeningDeviationCorrection": {
            "$ref": "#/components/schemas/EVA.Core.Finance.CompleteOpenCashJournal_CashCorrection"
          },
          "PaymentTypeID": {
            "type": "integer"
          },
          "PendingCashDeposits": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "TotalAmount": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.CompleteOpenCashJournal_CashCorrection": {
        "required": [
          "Description",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "Description": {
            "type": "string"
          },
          "ReasonID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.CreateCashDeposit": {
        "required": [
          "TotalAmount",
          "DeviceID",
          "PaymentTypeID",
          "Coins",
          "DelayDropOff",
          "BankNotes",
          "CurrencyID"
        ],
        "type": "object",
        "properties": {
          "BankNotes": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "Coins": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "CurrencyID": {
            "type": "string"
          },
          "DelayDropOff": {
            "type": "boolean",
            "description": "When set to `true`, the cash deposit remains on this device awaiting manual drop-off; see `DropOffCashDeposit` service"
          },
          "DeviceID": {
            "type": "integer"
          },
          "Number": {
            "type": "string",
            "description": "Required for monetary deposits"
          },
          "PaymentTypeID": {
            "type": "integer"
          },
          "SignatureBlobID": {
            "type": "string",
            "description": "Optional image of the signature",
            "format": "uuid"
          },
          "TotalAmount": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.CreateCashExpense": {
        "required": [
          "DeviceID",
          "TypeID",
          "Description",
          "TaxCodeID",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "BlobID": {
            "type": "string",
            "description": "Optional image of the receipt",
            "format": "uuid"
          },
          "Description": {
            "type": "string"
          },
          "DeviceID": {
            "type": "integer"
          },
          "SignatureBlobID": {
            "type": "string",
            "description": "Optional image of the signature",
            "format": "uuid"
          },
          "TaxCodeID": {
            "type": "integer"
          },
          "TypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.DeleteCashDeposit": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.DeleteCashExpense": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.DownloadFinancialPeriodDeposit": {
        "required": [
          "FinancialPeriodID"
        ],
        "type": "object",
        "properties": {
          "FinancialPeriodID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.DropOffCashDeposit": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Dto.FinancialPeriodDto": {
        "required": [
          "ID",
          "Status",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "ClosingTime": {
            "type": "string",
            "format": "date-time"
          },
          "CostPriceCurrencyID": {
            "type": "string"
          },
          "CurrencyID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "OpeningTime": {
            "type": "string",
            "format": "date-time"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.FinancialPeriodStatus"
          },
          "UserFullName": {
            "type": "string"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Dto.GeneralLedgerDto": {
        "required": [
          "ID",
          "CreationTime",
          "AccountingID",
          "Amount",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "AccountName": {
            "type": "string"
          },
          "AccountObjectAccount": {
            "type": "string"
          },
          "AccountingID": {
            "type": "integer"
          },
          "Amount": {
            "type": "number"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "CurrencyID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.Dto.OrganizationUnitDto"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "PaymentTransaction": {
            "$ref": "#/components/schemas/EVA.Core.Payments.Dto.PaymentTransactionDto"
          },
          "PaymentTransactionID": {
            "type": "integer"
          },
          "Remark": {
            "type": "string"
          },
          "StockMutation": {
            "$ref": "#/components/schemas/EVA.Core.StockMutations.StockMutationDto"
          },
          "StockMutationID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Dto.TaxAmount": {
        "required": [
          "Base",
          "Rate",
          "Total",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Amount of tax for this rate"
          },
          "Base": {
            "type": "number",
            "description": "TotalAmount that has this rate"
          },
          "Rate": {
            "type": "number"
          },
          "Total": {
            "type": "number",
            "description": "TotalAmount including the tax (Base + Amount)"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.FinancialPeriodAuditBlobDto": {
        "required": [
          "CreationTime",
          "BlobID"
        ],
        "type": "object",
        "properties": {
          "BlobID": {
            "type": "string",
            "format": "uuid"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.FinancialPeriodAuditDto": {
        "required": [
          "CreatedByID",
          "IsPreview",
          "StatusID",
          "ID",
          "CreationTime",
          "Status",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "Blobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.FinancialPeriodAuditBlobDto"
            }
          },
          "CreatedByFirstName": {
            "type": "string"
          },
          "CreatedByID": {
            "type": "integer"
          },
          "CreatedByLastName": {
            "type": "string"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "FiscalMonth": {
            "type": "integer"
          },
          "FiscalYear": {
            "type": "integer"
          },
          "From": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer"
          },
          "IsPreview": {
            "type": "boolean"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "OrganizationUnitName": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.FinancialPeriodAuditStatus"
          },
          "StatusID": {
            "type": "integer"
          },
          "To": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetAvailableCashAmountForDevice": {
        "required": [
          "DeviceID"
        ],
        "type": "object",
        "properties": {
          "CurrencyID": {
            "type": "string",
            "description": "Will be required!"
          },
          "DeviceID": {
            "type": "integer"
          },
          "PaymentTypeID": {
            "type": "integer",
            "description": "Will be required!"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetAvailableCashAmountForDeviceResponse": {
        "required": [
          "ValidateSafeBalance",
          "Amount",
          "CurrencyID"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "CurrencyID": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ValidateSafeBalance": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCashCorrection": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCashCorrectionResponse": {
        "required": [
          "Type",
          "ID",
          "CreationTime",
          "Amount",
          "FinancialPeriodID"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Device": {
            "$ref": "#/components/schemas/EVA.Core.Finance.GetCashCorrectionResponse_CorrectionDevice"
          },
          "DeviceID": {
            "type": "integer"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "FinancialPeriodID": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Remark": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.CashCorrectionTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCashCorrectionResponse_CorrectionDevice": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Station": {
            "$ref": "#/components/schemas/EVA.Core.Finance.GetCashCorrectionResponse_CorrectionStation"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.API.FlagsEnumDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCashCorrectionResponse_CorrectionStation": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCashDeposit": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Number": {
            "type": "string",
            "description": "Get a cash deposit by number, for the current organization unit"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCashDepositResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.Finance.GetCashDepositResponse_CashDepositSummary"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCashDepositResponse_CashDepositSummary": {
        "required": [
          "CreationTime",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "CurrencyID": {
            "type": "string"
          },
          "Number": {
            "type": "string"
          },
          "SignatureUrl": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCashExpense": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCashExpenseResponse": {
        "required": [
          "ID",
          "CreationTime",
          "CashTransactionLedgerID",
          "Amount",
          "CashJournalID"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "BlobID": {
            "type": "string",
            "format": "uuid"
          },
          "CashJournalID": {
            "type": "integer"
          },
          "CashTransactionLedgerID": {
            "type": "integer"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string"
          },
          "Device": {
            "$ref": "#/components/schemas/EVA.Core.Finance.GetCashExpenseResponse_ExpenseDevice"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "SignatureBlobID": {
            "type": "string",
            "format": "uuid"
          },
          "TaxCode": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.Finance.GetCashExpenseResponse_ExpenseType"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCashExpenseResponse_ExpenseDevice": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Station": {
            "$ref": "#/components/schemas/EVA.Core.Finance.GetCashExpenseResponse_ExpenseStation"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.API.FlagsEnumDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCashExpenseResponse_ExpenseStation": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCashExpenseResponse_ExpenseType": {
        "required": [
          "ID",
          "AmountType"
        ],
        "type": "object",
        "properties": {
          "AmountType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.CashExpenseAmountTypes"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string",
            "description": "Usually an internal & unchangable code - for display, use `Description`"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCashExpenseTypes": {
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCashExpenseTypesResponse": {
        "required": [
          "CashExpenseTypes"
        ],
        "type": "object",
        "properties": {
          "CashExpenseTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.GetCashExpenseTypesResponse_CashExpenseTypeDto"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCashExpenseTypesResponse_CashExpenseTypeDto": {
        "required": [
          "ID",
          "AmountType",
          "Name"
        ],
        "type": "object",
        "properties": {
          "AmountType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.CashExpenseAmountTypes"
          },
          "BackendID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "LedgerClassID": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "OrganizationUnitSet": {
            "$ref": "#/components/schemas/EVA.Core.Finance.GetCashExpenseTypesResponse_CashExpenseTypeDto_CashExpenseTypeOrganizationUnitSet"
          },
          "TaxCodeID": {
            "type": "integer"
          },
          "TaxCodeName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCashExpenseTypesResponse_CashExpenseTypeDto_CashExpenseTypeOrganizationUnitSet": {
        "required": [
          "ID",
          "Name"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCashJournalDenominations": {
        "required": [
          "DeviceID"
        ],
        "type": "object",
        "properties": {
          "DeviceID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCashJournalDenominationsResponse": {
        "type": "object",
        "properties": {
          "CashJournalDenominations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.GetCashJournalDenominationsResponse_CashJournalDenomination"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCashJournalDenominationsResponse_CashJournalDenomination": {
        "type": "object",
        "properties": {
          "AvailableBankNotes": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "AvailableCoins": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "CurrencyID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCashMovement": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCashMovementResponse": {
        "required": [
          "ID",
          "SourceDeviceID",
          "DestinationDeviceID",
          "Amount",
          "FinancialPeriodID"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "CurrencyID": {
            "type": "string"
          },
          "DestinationDevice": {
            "$ref": "#/components/schemas/EVA.Core.Finance.GetCashMovementResponse_MovementDevice"
          },
          "DestinationDeviceID": {
            "type": "integer"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "FinancialPeriodID": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "PaymentTypeID": {
            "type": "integer"
          },
          "SourceDevice": {
            "$ref": "#/components/schemas/EVA.Core.Finance.GetCashMovementResponse_MovementDevice"
          },
          "SourceDeviceID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCashMovementResponse_MovementDevice": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Station": {
            "$ref": "#/components/schemas/EVA.Core.Finance.GetCashMovementResponse_MovementStation"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.API.FlagsEnumDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCashMovementResponse_MovementStation": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCurrentCashJournals": {
        "required": [
          "DeviceID"
        ],
        "type": "object",
        "properties": {
          "DeviceID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCurrentCashJournalsResponse": {
        "type": "object",
        "properties": {
          "CashJournals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.GetCurrentCashJournalsResponse_CashJournal"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCurrentCashJournalsResponse_CashJournal": {
        "required": [
          "Type",
          "DeviceID"
        ],
        "type": "object",
        "properties": {
          "CurrencyID": {
            "type": "string"
          },
          "DeviceID": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "OpeningAmount": {
            "type": "number"
          },
          "OpeningTime": {
            "type": "string",
            "format": "date-time"
          },
          "PaymentType": {
            "$ref": "#/components/schemas/EVA.Core.Finance.GetCurrentCashJournalsResponse_PaymentTypeDto"
          },
          "PreviousCashJournal": {
            "$ref": "#/components/schemas/EVA.Core.Finance.GetCurrentCashJournalsResponse_PreviousCashJournal"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.CashJournalTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCurrentCashJournalsResponse_PaymentTypeDto": {
        "required": [
          "ID",
          "CashJournalMethod"
        ],
        "type": "object",
        "properties": {
          "CashJournalMethod": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.PaymentCashJournalMethod"
          },
          "Code": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCurrentCashJournalsResponse_PreviousCashJournal": {
        "required": [
          "OpeningTime",
          "ID",
          "OpeningAmount"
        ],
        "type": "object",
        "properties": {
          "ClosingAmount": {
            "type": "number"
          },
          "ClosingTime": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer"
          },
          "OpeningAmount": {
            "type": "number"
          },
          "OpeningTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCurrentFinancialPeriodSummary": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetCurrentFinancialPeriodSummaryResponse": {
        "required": [
          "FinancialPeriodStatus",
          "FinancialPeriodID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "FinancialPeriodID": {
            "type": "integer"
          },
          "FinancialPeriodStatus": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.FinancialPeriodStatus"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetFinancialPeriodAccountsSummary": {
        "required": [
          "FinancialPeriodID"
        ],
        "type": "object",
        "properties": {
          "FinancialPeriodID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetFinancialPeriodAccountsSummaryResponse": {
        "type": "object",
        "properties": {
          "Accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.AccountSummary"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetFinancialPeriodCashJournalDeviceSummary": {
        "required": [
          "FinancialPeriodID"
        ],
        "type": "object",
        "properties": {
          "FinancialPeriodID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetFinancialPeriodCashJournalDeviceSummaryResponse": {
        "type": "object",
        "properties": {
          "Devices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.GetFinancialPeriodCashJournalDeviceSummaryResponse_DeviceSummary"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetFinancialPeriodCashJournalDeviceSummaryResponse_DeviceSummary": {
        "required": [
          "DeviceName",
          "ID",
          "Status"
        ],
        "type": "object",
        "properties": {
          "DeviceName": {
            "type": "string"
          },
          "DeviceType": {
            "$ref": "#/components/schemas/EVA.Core.API.FlagsEnumDto"
          },
          "ID": {
            "type": "integer"
          },
          "StationName": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.Finance.Periods.DeviceStatus"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetFinancialPeriodClosingImpediments": {
        "required": [
          "FinancialPeriodID"
        ],
        "type": "object",
        "properties": {
          "FinancialPeriodID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetFinancialPeriodClosingImpedimentsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Impediments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.Periods.FinancialPeriodClosingImpediment"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetFinancialPeriodClosingStockInformation": {
        "required": [
          "ProductID",
          "FinancialPeriodID"
        ],
        "type": "object",
        "properties": {
          "FinancialPeriodID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetFinancialPeriodClosingStockInformationResponse": {
        "type": "object",
        "properties": {
          "CurrentStock": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.GetFinancialPeriodClosingStockInformationResponse_CurrentStockForLabel"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "PendingShipmentLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.GetFinancialPeriodClosingStockInformationResponse_PendingShipmentLine"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetFinancialPeriodClosingStockInformationResponse_CurrentStockForLabel": {
        "required": [
          "QuantityOnHand",
          "StockLabelID"
        ],
        "type": "object",
        "properties": {
          "QuantityOnHand": {
            "type": "integer"
          },
          "StockLabelID": {
            "type": "integer"
          },
          "StockLabelName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetFinancialPeriodClosingStockInformationResponse_PendingShipmentLine": {
        "required": [
          "ProductID",
          "QuantityDelivered",
          "ShipmentID",
          "QuantityShipped",
          "ShipmentLineID"
        ],
        "type": "object",
        "properties": {
          "ProductID": {
            "type": "integer"
          },
          "QuantityDelivered": {
            "type": "integer"
          },
          "QuantityShipped": {
            "type": "integer"
          },
          "ReceiveShipmentUserTaskID": {
            "type": "integer"
          },
          "ShipmentBackendID": {
            "type": "string"
          },
          "ShipmentID": {
            "type": "integer"
          },
          "ShipmentLineID": {
            "type": "integer"
          },
          "TrackingCode": {
            "type": "string"
          },
          "TrackingLink": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetFinancialPeriodDetails": {
        "required": [
          "FinancialPeriodID"
        ],
        "type": "object",
        "properties": {
          "FinancialPeriodID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetFinancialPeriodDetailsResponse": {
        "type": "object",
        "properties": {
          "Details": {
            "$ref": "#/components/schemas/EVA.Core.Finance.Periods.FinancialPeriodDetailsDto"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetFinancialPeriodExportDocuments": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetFinancialPeriodExportDocumentsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "RequestDocuments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.TransputJobs.TransputJobDocument"
            }
          },
          "ResponseDocuments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.TransputJobs.TransputJobDocument"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetFinancialPeriodInformation": {
        "type": "object",
        "properties": {
          "FinancialPeriodID": {
            "type": "integer",
            "description": "If left null, defaults to the current period of the logged in user."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetFinancialPeriodInformationResponse": {
        "required": [
          "TotalRevenue",
          "CreationTime",
          "Status",
          "ShouldHaveBeenClosed",
          "FinancialPeriodID"
        ],
        "type": "object",
        "properties": {
          "CashJournals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.Cash.CashJournalDetailsModel"
            }
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ExpectedClosingTime": {
            "type": "string",
            "format": "date-time"
          },
          "FinancialPeriodID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Finance.GetFinancialPeriodInformationResponse_FinancialPeriodOrganizationUnit"
          },
          "PCIQuestionAnswer": {
            "type": "boolean"
          },
          "PaymentTypeSummaries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.GetFinancialPeriodInformationResponse_PaymentTypeSummary"
            }
          },
          "ShouldHaveBeenClosed": {
            "type": "boolean"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.FinancialPeriodStatus"
          },
          "TotalRevenue": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetFinancialPeriodInformationResponse_FinancialPeriodOrganizationUnit": {
        "required": [
          "ID",
          "Name"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetFinancialPeriodInformationResponse_PaymentType": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetFinancialPeriodInformationResponse_PaymentTypeSummary": {
        "required": [
          "TotalPaidAmount"
        ],
        "type": "object",
        "properties": {
          "TotalPaidAmount": {
            "type": "number"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.Finance.GetFinancialPeriodInformationResponse_PaymentType"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetUnprocessedFinancialEventsCount": {
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Finance.ListFinancialEventsFilter"
          },
          "FinancialPeriodID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.GetUnprocessedFinancialEventsCountResponse": {
        "required": [
          "Count"
        ],
        "type": "object",
        "properties": {
          "Count": {
            "type": "integer"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListAuditsFilter": {
        "type": "object",
        "properties": {
          "FiscalMonth": {
            "type": "integer"
          },
          "FiscalYear": {
            "type": "integer"
          },
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListBookings": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListBookingsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Finance.Dto.GeneralLedgerDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListCashDeposits": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Finance.Cash.ListCashDepositsFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListCashDepositsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Finance.Cash.ListCashDepositsItem"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListCashExpenses": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Finance.Cash.ListCashExpensesFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListCashExpensesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Finance.Cash.ListCashExpensesItem"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListCashTransactionLedger": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Finance.Cash.ListCashTransactionLedgerFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListCashTransactionLedgerGroups": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Finance.Cash.ListCashTransactionLedgerFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListCashTransactionLedgerGroupsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Finance.Cash.ListCashTransactionLedgerGroup"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListCashTransactionLedgerResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Finance.Cash.ListCashTransactionLedgerItem"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListFinancialEventRow": {
        "required": [
          "Type",
          "TypeID",
          "StatusID",
          "ID",
          "Status",
          "Amount",
          "FinancialPeriodID",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "CurrencyID": {
            "type": "string"
          },
          "ExchangeRate": {
            "type": "number"
          },
          "FinancialPeriodID": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "OrganizationUnitName": {
            "type": "string"
          },
          "ProcessingError": {
            "type": "string"
          },
          "ProductID": {
            "type": "integer"
          },
          "Remark": {
            "type": "string"
          },
          "ShipmentID": {
            "type": "integer"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.FinancialEventStatuses"
          },
          "StatusID": {
            "type": "integer"
          },
          "StockMutationID": {
            "type": "integer"
          },
          "TaxCodeID": {
            "type": "integer"
          },
          "TaxRate": {
            "type": "number"
          },
          "TaxRateCategory": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.TaxRateCategory"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.FinancialEventTypes"
          },
          "TypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListFinancialEvents": {
        "type": "object",
        "properties": {
          "InitialPageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageTokenConfig_1_EVA.Core.Finance.ListFinancialEventsFilter"
          },
          "PageToken": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListFinancialEventsFilter": {
        "type": "object",
        "properties": {
          "FinancialPeriodID": {
            "type": "integer"
          },
          "FromDate": {
            "type": "string",
            "format": "date-time"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.FinancialEventStatuses"
          },
          "StatusID": {
            "type": "integer"
          },
          "ToDate": {
            "type": "string",
            "format": "date-time"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.FinancialEventTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListFinancialEventsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "NextPageToken": {
            "type": "string"
          },
          "PreviousPageToken": {
            "type": "string"
          },
          "Results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.ListFinancialEventRow"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListFinancialPeriodExports2": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Finance.ListFinancialPeriodExports2Filter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListFinancialPeriodExports2Filter": {
        "type": "object",
        "properties": {
          "FinancialPeriodID": {
            "type": "integer"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.TransputJobStatuses"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListFinancialPeriodExports2Response": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Finance.ListFinancialPeriodExports2Response_FinancialPeriodExport"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListFinancialPeriodExports2Response_FinancialPeriodExport": {
        "required": [
          "ID",
          "CreationTime",
          "Trigger",
          "Status",
          "FinancialPeriodID"
        ],
        "type": "object",
        "properties": {
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "FinancialPeriodID": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "LastModificationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Name": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.TransputJobStatuses"
          },
          "Trigger": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.FinancialPeriodExportTrigger"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListFinancialPeriods": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Finance.ListFinancialPeriodsFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListFinancialPeriods2": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Finance.ListFinancialPeriodsFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListFinancialPeriodsFilter": {
        "type": "object",
        "properties": {
          "ClosingTimeFrom": {
            "type": "string",
            "format": "date-time"
          },
          "ClosingTimeTo": {
            "type": "string",
            "format": "date-time"
          },
          "OpeningTimeFrom": {
            "type": "string",
            "format": "date-time"
          },
          "OpeningTimeTo": {
            "type": "string",
            "format": "date-time"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "OrganizationUnitIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "Status": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.FinancialPeriodStatus"
            },
            "description": "Filter on the FinancialPeriodStatuses"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListFinancialPeriodsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Finance.Dto.FinancialPeriodDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListGeneralLedgerEntries": {
        "type": "object",
        "properties": {
          "InitialPageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageTokenConfig_1_EVA.Core.Finance.ListGeneralLedgersFilter"
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Finance.ListGeneralLedgersFilter"
          },
          "PageToken": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListGeneralLedgerEntriesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "NextPageToken": {
            "type": "string"
          },
          "PreviousPageToken": {
            "type": "string"
          },
          "Results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.ListGeneralLedgerEntriesResponse_GeneralLedgerEntry"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListGeneralLedgerEntriesResponse_GeneralLedgerEntry": {
        "required": [
          "ID",
          "CreationTime",
          "Amount",
          "FinancialPeriodID",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "AccountName": {
            "type": "string"
          },
          "AccountObjectAccount": {
            "type": "string"
          },
          "Amount": {
            "type": "number"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "CurrencyID": {
            "type": "string"
          },
          "FinancialEventID": {
            "type": "integer"
          },
          "FinancialPeriodID": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "Offset1": {
            "type": "string"
          },
          "Offset2": {
            "type": "string"
          },
          "Offset3": {
            "type": "string"
          },
          "Offset4": {
            "type": "string"
          },
          "Offset5": {
            "type": "string"
          },
          "Offset6": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Finance.ListGeneralLedgerEntriesResponse_OrganizationUnit"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "PaymentTransactionID": {
            "type": "integer"
          },
          "Remark": {
            "type": "string"
          },
          "StockMutationID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListGeneralLedgerEntriesResponse_OrganizationUnit": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListGeneralLedgers": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Finance.ListGeneralLedgersFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListGeneralLedgersFilter": {
        "type": "object",
        "properties": {
          "AccountID": {
            "type": "integer"
          },
          "Amount": {
            "type": "number"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "FinancialPeriodID": {
            "type": "integer"
          },
          "FromDate": {
            "type": "string",
            "format": "date-time"
          },
          "InvoiceID": {
            "type": "integer"
          },
          "IsProcessed": {
            "type": "boolean"
          },
          "ObjectAccount": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "ToDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListGeneralLedgersResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Finance.ListGeneralLedgersResponse_GeneralLedger"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListGeneralLedgersResponse_GeneralLedger": {
        "required": [
          "ID",
          "CreationTime",
          "Amount",
          "FinancialPeriodID",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "AccountName": {
            "type": "string"
          },
          "AccountObjectAccount": {
            "type": "string"
          },
          "Amount": {
            "type": "number"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "CurrencyID": {
            "type": "string"
          },
          "FinancialEventID": {
            "type": "integer"
          },
          "FinancialPeriodID": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "Offset1": {
            "type": "string"
          },
          "Offset2": {
            "type": "string"
          },
          "Offset3": {
            "type": "string"
          },
          "Offset4": {
            "type": "string"
          },
          "Offset5": {
            "type": "string"
          },
          "Offset6": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Finance.ListGeneralLedgersResponse_OrganizationUnit"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "PaymentTransactionID": {
            "type": "integer"
          },
          "Remark": {
            "type": "string"
          },
          "StockMutationID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ListGeneralLedgersResponse_OrganizationUnit": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.MoveCash": {
        "required": [
          "SourceDeviceID",
          "DestinationDeviceID"
        ],
        "type": "object",
        "properties": {
          "BankNotes": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "Coins": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "CurrencyID": {
            "type": "string",
            "description": "Will be required!"
          },
          "DestinationDeviceID": {
            "type": "integer"
          },
          "PaymentTypeID": {
            "type": "integer",
            "description": "Will be required!"
          },
          "SourceDeviceID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.OpenFinancialPeriod": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Finance.Periods.CashCorrectionDto": {
        "required": [
          "Type",
          "DeviceID",
          "DeviceTypeID",
          "ID",
          "CreationTime",
          "Amount",
          "CashJournalID"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "CashJournalID": {
            "type": "integer"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "DeviceID": {
            "type": "integer"
          },
          "DeviceName": {
            "type": "string"
          },
          "DeviceTypeID": {
            "type": "integer"
          },
          "DeviceTypeName": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Remark": {
            "type": "string"
          },
          "StationID": {
            "type": "integer"
          },
          "StationName": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.CashCorrectionTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Periods.CashDepositDto": {
        "required": [
          "ID",
          "Total",
          "CashJournalID"
        ],
        "type": "object",
        "properties": {
          "CashJournalID": {
            "type": "integer"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.Periods.CashDepositLineDto"
            }
          },
          "Number": {
            "type": "string"
          },
          "Total": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Periods.CashDepositLineDto": {
        "required": [
          "Quantity",
          "Currency"
        ],
        "type": "object",
        "properties": {
          "Currency": {
            "type": "number"
          },
          "Quantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Periods.CashJournalDto": {
        "required": [
          "Type",
          "DeviceID",
          "CreatedByID",
          "OpeningTime",
          "DeviceName",
          "PaymentTypeID",
          "ID",
          "OpeningAmount",
          "CreatedByFullName"
        ],
        "type": "object",
        "properties": {
          "ClosingAmount": {
            "type": "number"
          },
          "ClosingDeviation": {
            "type": "number"
          },
          "ClosingTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByFullName": {
            "type": "string"
          },
          "CreatedByID": {
            "type": "integer"
          },
          "CurrencyID": {
            "type": "string"
          },
          "DeviceID": {
            "type": "integer"
          },
          "DeviceName": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "OpeningAmount": {
            "type": "number"
          },
          "OpeningDeviation": {
            "type": "number"
          },
          "OpeningTime": {
            "type": "string",
            "format": "date-time"
          },
          "PaymentTypeID": {
            "type": "integer"
          },
          "StationID": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.CashJournalTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Periods.DeviceStatus": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Finance.Periods.DeviceWithCashJournals": {
        "required": [
          "DeviceName",
          "DeviceTypeID",
          "ID",
          "Status",
          "DeviceTypeName",
          "CashJournals"
        ],
        "type": "object",
        "properties": {
          "CashJournals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.Periods.CashJournalDto"
            }
          },
          "DeviceName": {
            "type": "string"
          },
          "DeviceTypeID": {
            "type": "integer"
          },
          "DeviceTypeName": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "StationID": {
            "type": "integer"
          },
          "StationName": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.Finance.Periods.DeviceStatus"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Periods.ExpenseDto": {
        "required": [
          "TypeID",
          "ID",
          "CreationTime",
          "TaxRate",
          "AmountType",
          "Amount",
          "CashJournalID"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "AmountType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.CashExpenseAmountTypes"
          },
          "BlobID": {
            "type": "string",
            "format": "uuid"
          },
          "CashJournalID": {
            "type": "integer"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "TaxRate": {
            "type": "number"
          },
          "TypeDescription": {
            "type": "string"
          },
          "TypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Periods.ExtendedStation": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "CashJournals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.Periods.CashJournalDto"
            }
          },
          "FirstOpeningAmount": {
            "type": "number"
          },
          "ID": {
            "type": "integer"
          },
          "LastClosingAmount": {
            "type": "number"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Periods.FinancialPeriodClosingImpediment": {
        "required": [
          "AllowIgnore"
        ],
        "type": "object",
        "properties": {
          "AllowIgnore": {
            "type": "boolean"
          },
          "Data": {
            "type": "object"
          },
          "Description": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Periods.FinancialPeriodDetailsDto": {
        "required": [
          "CashDepositTotal",
          "TotalRevenue",
          "TotalNonSystemPayments",
          "AmountOfOpeningDifference",
          "Status",
          "AmountOfCashDifference",
          "AmountOfRoundingDifference",
          "TotalAmountOfCorrections",
          "TotalSystemPayments",
          "TotalAmountOfExpenses"
        ],
        "type": "object",
        "properties": {
          "AmountOfCashDifference": {
            "type": "number"
          },
          "AmountOfOpeningDifference": {
            "type": "number"
          },
          "AmountOfRoundingDifference": {
            "type": "number"
          },
          "CashCorrections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.Periods.CashCorrectionDto"
            }
          },
          "CashDepositTotal": {
            "type": "number"
          },
          "CashDeposits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.Periods.CashDepositDto"
            }
          },
          "CashJournals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.Periods.CashJournalDto"
            }
          },
          "ClosingTime": {
            "type": "string",
            "format": "date-time"
          },
          "CurrencyID": {
            "type": "string"
          },
          "Devices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.Periods.DeviceWithCashJournals"
            }
          },
          "Expenses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.Periods.ExpenseDto"
            }
          },
          "ExtendedStations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.Periods.ExtendedStation"
            }
          },
          "OpeningTime": {
            "type": "string",
            "format": "date-time"
          },
          "PCIQuestionAnswer": {
            "type": "boolean"
          },
          "PaymentTotalPerTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.Periods.PaymentTotalPerPaymentTypeDto"
            }
          },
          "PreviousPeriodID": {
            "type": "integer"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.FinancialPeriodStatus"
          },
          "TotalAmountOfCorrections": {
            "type": "number"
          },
          "TotalAmountOfExpenses": {
            "type": "number"
          },
          "TotalNonSystemPayments": {
            "type": "number"
          },
          "TotalRevenue": {
            "type": "number"
          },
          "TotalSystemPayments": {
            "type": "number"
          },
          "UserFullName": {
            "type": "string"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.Periods.PaymentTotalPerPaymentTypeDto": {
        "required": [
          "Total",
          "IsSystem"
        ],
        "type": "object",
        "properties": {
          "IsSystem": {
            "type": "boolean"
          },
          "Total": {
            "type": "number"
          },
          "TypeName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ProcessUnprocessedFinancialEvents": {
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Finance.ListFinancialEventsFilter"
          },
          "FinancialPeriodID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ProduceCashDepositDocument": {
        "required": [
          "StationID",
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "StationID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ProduceCashExpenseDocument": {
        "required": [
          "StationID",
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "StationID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.RepostFinancialPeriod": {
        "required": [
          "FinancialPeriodID"
        ],
        "type": "object",
        "properties": {
          "FinancialPeriodID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.ResetFinancialEvents": {
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Finance.ListFinancialEventsFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.RetryFinancialPeriodExport": {
        "required": [
          "ID",
          "Force"
        ],
        "type": "object",
        "properties": {
          "Force": {
            "type": "boolean"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.RetryFinancialPeriodExports": {
        "type": "object",
        "properties": {
          "ToRetry": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.RetryFinancialPeriodExports_FinancialPeriodExportToRetry"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.RetryFinancialPeriodExports_FinancialPeriodExportToRetry": {
        "required": [
          "ID",
          "Force"
        ],
        "type": "object",
        "properties": {
          "Force": {
            "type": "boolean"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.SetPCIQuestionAnswerForFinancialPeriod": {
        "required": [
          "Answer",
          "FinancialPeriodID"
        ],
        "type": "object",
        "properties": {
          "Answer": {
            "type": "boolean"
          },
          "FinancialPeriodID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.StartCloseCashJournal": {
        "required": [
          "DeviceID",
          "PaymentTypeID",
          "CurrencyID"
        ],
        "type": "object",
        "properties": {
          "CurrencyID": {
            "type": "string"
          },
          "DeviceID": {
            "type": "integer"
          },
          "PaymentTypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.StartCloseCashJournalResponse": {
        "required": [
          "MinimalAllowedDeviation",
          "MaximalAllowedDeviation",
          "ExpectedClosingAmount"
        ],
        "type": "object",
        "properties": {
          "CashJournalDetails": {
            "$ref": "#/components/schemas/EVA.Core.Finance.Cash.CashJournalDetailsModel"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ExpectedClosingAmount": {
            "type": "number"
          },
          "MaximalAllowedDeviation": {
            "type": "number"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "MinimalAllowedDeviation": {
            "type": "number"
          },
          "PendingCashDeposits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.StartCloseCashJournalResponse_PendingCashDeposit"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.StartCloseCashJournalResponse_PendingCashDeposit": {
        "required": [
          "ID",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "ID": {
            "type": "integer"
          },
          "Number": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.StartOpenCashJournal": {
        "required": [
          "DeviceID",
          "PaymentTypeID",
          "CurrencyID"
        ],
        "type": "object",
        "properties": {
          "CurrencyID": {
            "type": "string"
          },
          "DeviceID": {
            "type": "integer"
          },
          "PaymentTypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.StartOpenCashJournalResponse": {
        "required": [
          "Type"
        ],
        "type": "object",
        "properties": {
          "AvailableBankNotes": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "AvailableCoins": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "CountryID": {
            "type": "string"
          },
          "CurrencyID": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ExpectedOpeningAmount": {
            "type": "number"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "PaymentType": {
            "$ref": "#/components/schemas/EVA.Core.Finance.StartOpenCashJournalResponse_PaymentTypeDto"
          },
          "PendingCashDeposits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.StartOpenCashJournalResponse_PendingCashDeposit"
            }
          },
          "PreviousCashJournal": {
            "$ref": "#/components/schemas/EVA.Core.Finance.StartOpenCashJournalResponse_CashJournal"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.CashJournalTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.StartOpenCashJournalResponse_CashJournal": {
        "required": [
          "OpeningTime",
          "ID",
          "OpeningAmount"
        ],
        "type": "object",
        "properties": {
          "ClosingAmount": {
            "type": "number"
          },
          "ClosingTime": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer"
          },
          "OpeningAmount": {
            "type": "number"
          },
          "OpeningTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.StartOpenCashJournalResponse_PaymentTypeDto": {
        "required": [
          "ID",
          "CashJournalMethod"
        ],
        "type": "object",
        "properties": {
          "CashJournalMethod": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.PaymentCashJournalMethod"
          },
          "Code": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Finance.StartOpenCashJournalResponse_PendingCashDeposit": {
        "required": [
          "ID",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "ID": {
            "type": "integer"
          },
          "Number": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.CancelOrderLineFulfillments": {
        "required": [
          "Lines",
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Fulfillment.CancelOrderLineFulfillments_Line"
            }
          },
          "OrderID": {
            "type": "integer"
          },
          "SupplierOrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.CancelOrderLineFulfillments_Line": {
        "required": [
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "QuantityToCancel": {
            "type": "integer",
            "description": "The part of the OrderLine that couldn't be fulfilled. Can be left null if you want to cancel the entire fulfillment.\nIf a value is specified and splitting fulfillment lines is not enabled (so setting `OrderFulfillment:AllowPartialCancellation` is false or not defined) an error will be returned."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.GetOrderFulfillment": {
        "required": [
          "IncludeOrchestrationDetails",
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "IncludeOrchestrationDetails": {
            "type": "boolean",
            "description": "Whether or not to include the details on how this OrderFulfillment came to be. This information is by default only stored for 14 days. Defaults to false."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.GetOrderFulfillmentOptions": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.GetOrderFulfillmentOptionsResponse": {
        "type": "object",
        "properties": {
          "AvailableFulfillmentOptions": {
            "$ref": "#/components/schemas/EVA.Core.Fulfillment.GetOrderFulfillmentOptionsResponse_AvailableFulfillmentOptionsForOrder"
          },
          "BlockedFulfillmentOptions": {
            "$ref": "#/components/schemas/EVA.Core.Fulfillment.GetOrderFulfillmentOptionsResponse_BlockedFulfillmentOptionsForOrder"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "FulfillmentOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Fulfillment.GetOrderFulfillmentOptionsResponse_FulfillmentOption"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "PotentialFulfillmentOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Fulfillment.GetOrderFulfillmentOptionsResponse_PotentialFulfillmentOption"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.GetOrderFulfillmentOptionsResponse_AvailableFulfillmentOptionsForOrder": {
        "type": "object",
        "properties": {
          "NormalDelivery": {
            "$ref": "#/components/schemas/EVA.Core.Fulfillment.GetOrderFulfillmentOptionsResponse_AvailableFulfillmentOptionsForOrder_NormalDeliveryShippingOption"
          },
          "SameDayDelivery": {
            "$ref": "#/components/schemas/EVA.Core.Fulfillment.GetOrderFulfillmentOptionsResponse_AvailableFulfillmentOptionsForOrder_SameDayDeliveryOption"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.GetOrderFulfillmentOptionsResponse_AvailableFulfillmentOptionsForOrder_NormalDeliveryShippingOption": {
        "required": [
          "Price"
        ],
        "type": "object",
        "properties": {
          "AvailableForOrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "Price": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.GetOrderFulfillmentOptionsResponse_AvailableFulfillmentOptionsForOrder_SameDayDeliveryOption": {
        "required": [
          "IsAvailable",
          "Price"
        ],
        "type": "object",
        "properties": {
          "AvailableForOrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "CutoffTime": {
            "type": "string"
          },
          "EstimatedDeliveryTimeframeFrom": {
            "type": "string"
          },
          "EstimatedDeliveryTimeframeTo": {
            "type": "string"
          },
          "IsAvailable": {
            "type": "boolean"
          },
          "Price": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.GetOrderFulfillmentOptionsResponse_BlockedFulfillmentOptionsForOrder": {
        "required": [
          "BlockingReason"
        ],
        "type": "object",
        "properties": {
          "BlockingOrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "BlockingReason": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Fulfillment.PotentialFulfillmentOptionBlockingReasons"
          },
          "FulfillmentOptions": {
            "$ref": "#/components/schemas/EVA.Core.Fulfillment.GetOrderFulfillmentOptionsResponse_AvailableFulfillmentOptionsForOrder"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.GetOrderFulfillmentOptionsResponse_FulfillmentOption": {
        "required": [
          "ShippingCosts"
        ],
        "type": "object",
        "properties": {
          "ApplicableToOrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "ID": {
            "type": "string"
          },
          "SameDayDelivery": {
            "$ref": "#/components/schemas/EVA.Core.Fulfillment.GetOrderFulfillmentOptionsResponse_FulfillmentOption_SameDayDeliveryOption"
          },
          "ShippingCosts": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.GetOrderFulfillmentOptionsResponse_FulfillmentOption_SameDayDeliveryOption": {
        "required": [
          "IsAvailable"
        ],
        "type": "object",
        "properties": {
          "CutoffTime": {
            "type": "string"
          },
          "EstimatedDeliveryTimeframeFrom": {
            "type": "string"
          },
          "EstimatedDeliveryTimeframeTo": {
            "type": "string"
          },
          "IsAvailable": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.GetOrderFulfillmentOptionsResponse_PotentialFulfillmentOption": {
        "required": [
          "BlockingReason"
        ],
        "type": "object",
        "properties": {
          "BlockingOrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "BlockingReason": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Fulfillment.PotentialFulfillmentOptionBlockingReasons"
          },
          "PotentialFulfillmentOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Fulfillment.GetOrderFulfillmentOptionsResponse_FulfillmentOption"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.GetOrderFulfillmentResponse": {
        "required": [
          "OrderID",
          "ID",
          "CreationTime",
          "TotalLineCount"
        ],
        "type": "object",
        "properties": {
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Data": {
            "type": "object"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "FulfillmentMethod": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "LastModificationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrchestrationDetails": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderSoldFromOrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Fulfillment.GetOrderFulfillmentResponse_OrderFulfillmentOrganizationUnit"
          },
          "ReferenceNumber": {
            "type": "string"
          },
          "Source": {
            "type": "string"
          },
          "Statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Fulfillment.OrderFulfillmentLineStatuses"
            }
          },
          "SupplierOrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Fulfillment.GetOrderFulfillmentResponse_OrderFulfillmentOrganizationUnit"
          },
          "TotalLineCount": {
            "type": "integer"
          },
          "TransputJobID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.GetOrderFulfillmentResponse_OrderFulfillmentOrganizationUnit": {
        "required": [
          "Type",
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnitTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.ListOrderFulfillmentLines": {
        "type": "object",
        "properties": {
          "InitialPageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageTokenConfig_1_EVA.Core.Orders.ListOrderFulfillmentLinesFilter"
          },
          "OrderFulfillmentID": {
            "type": "integer",
            "description": "Either provide OrderID or OrderFulfillmentID"
          },
          "OrderID": {
            "type": "integer",
            "description": "Either provide OrderID or OrderFulfillmentID"
          },
          "PageToken": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.ListOrderFulfillmentLinesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "NextPageToken": {
            "type": "string"
          },
          "PreviousPageToken": {
            "type": "string"
          },
          "Results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderFulfillmentLineItem"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.ListOrderFulfillmentRejections": {
        "type": "object",
        "properties": {
          "InitialPageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageTokenConfig_1_EVA.Core.Orders.ListOrderFulfillmentRejectionsFilter"
          },
          "PageToken": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.ListOrderFulfillmentRejectionsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "NextPageToken": {
            "type": "string"
          },
          "PreviousPageToken": {
            "type": "string"
          },
          "Results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderFulfillmentRejectionsItem"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.ListOrderFulfillments": {
        "type": "object",
        "properties": {
          "InitialPageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageTokenConfig_1_EVA.Core.Orders.ListOrderFulfillmentsFilter"
          },
          "PageToken": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.ListOrderFulfillmentsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "NextPageToken": {
            "type": "string"
          },
          "PreviousPageToken": {
            "type": "string"
          },
          "Results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderFulfillmentItem"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.SetOrderFulfillmentOptions": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "FulfillmentOptionsSelection": {
            "$ref": "#/components/schemas/EVA.Core.Fulfillment.SetOrderFulfillmentOptions_FulfillmentOptionsSelectionForOrder"
          },
          "OrderID": {
            "type": "integer"
          },
          "SelectedFulfillmentOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Fulfillment.SetOrderFulfillmentOptions_SelectedFulfillmentOption"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.SetOrderFulfillmentOptions_FulfillmentOptionsSelectionForOrder": {
        "type": "object",
        "properties": {
          "NormalDelivery": {
            "$ref": "#/components/schemas/EVA.Core.Fulfillment.SetOrderFulfillmentOptions_FulfillmentOptionsSelectionForOrder_NormalDeliverySelection"
          },
          "SameDayDelivery": {
            "$ref": "#/components/schemas/EVA.Core.Fulfillment.SetOrderFulfillmentOptions_FulfillmentOptionsSelectionForOrder_SameDayDeliverySelection"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.SetOrderFulfillmentOptions_FulfillmentOptionsSelectionForOrder_NormalDeliverySelection": {
        "type": "object",
        "properties": {
          "OrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.SetOrderFulfillmentOptions_FulfillmentOptionsSelectionForOrder_SameDayDeliverySelection": {
        "type": "object",
        "properties": {
          "OrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.SetOrderFulfillmentOptions_SelectedFulfillmentOption": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string"
          },
          "OrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.ShipOrderFulfillment": {
        "required": [
          "FinalShipment",
          "OrderFulfillmentID"
        ],
        "type": "object",
        "properties": {
          "FinalShipment": {
            "type": "boolean"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Fulfillment.ShipOrderFulfillment_ShipmentOrderFulfillmentLine"
            }
          },
          "OrderFulfillmentID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.ShipOrderFulfillment_ShipmentOrderFulfillmentLine": {
        "required": [
          "OrderFulfillmentLineID"
        ],
        "type": "object",
        "properties": {
          "OrderFulfillmentLineID": {
            "type": "integer"
          },
          "QuantityShipped": {
            "type": "integer"
          },
          "ShipmentBackendID": {
            "type": "string"
          },
          "TrackingCode": {
            "type": "string"
          },
          "TrackingLink": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.ShipOrderFulfillmentResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Shipments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Fulfillment.ShipOrderFulfillmentResponse_Shipment"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.ShipOrderFulfillmentResponse_Shipment": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "TrackingCode": {
            "type": "string"
          },
          "TrackingLink": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Fulfillment.UpdateOrderFulfillmentLine": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "object"
          },
          "UnitPrice": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.FullStockCountServices.DownloadExternalFullStockCountResultTemplate": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.FullStockCountServices.SetExternalFullStockCountResult": {
        "required": [
          "IsDeltaBatch",
          "FullStockCountID",
          "CountResults",
          "CountCompletionTime"
        ],
        "type": "object",
        "properties": {
          "CountCompletionTime": {
            "type": "string",
            "format": "date-time"
          },
          "CountResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.FullStockCountServices.SetExternalFullStockCountResult_CountResult"
            }
          },
          "FullStockCountID": {
            "type": "integer"
          },
          "IsDeltaBatch": {
            "type": "boolean",
            "description": "When this property is true, the results will processed as a partial part. Matching values will be updated, new values will be added and existing values no present in the CountResults will be left as is.\n      When this property is false, the result will be processed as a full set. Matching values will be updated, new values will be added and existing values no present in the CountResults will be removed."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.FullStockCountServices.SetExternalFullStockCountResult_CountResult": {
        "required": [
          "CountedQuantity"
        ],
        "type": "object",
        "properties": {
          "CountedQuantity": {
            "type": "integer"
          },
          "Label": {
            "type": "string",
            "description": "This optional field can be used to split te count into counted zones."
          },
          "ProductBarcode": {
            "type": "string"
          },
          "ProductID": {
            "type": "integer"
          },
          "StockLabelID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.FullStockCountServices.UploadExternalFullStockCountResult": {
        "required": [
          "Data",
          "FullStockCountID",
          "CountCompletionTime"
        ],
        "type": "object",
        "properties": {
          "CountCompletionTime": {
            "type": "string",
            "format": "date-time"
          },
          "Data": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string",
            "description": "An email address to mail the processing result to. When left empty, the logged in user context will be used"
          },
          "FullStockCountID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.GiftCards.AddDigitalGiftCardToOrder": {
        "required": [
          "OrderID",
          "Data"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "Data": {
            "$ref": "#/components/schemas/EVA.Core.GiftCards.GiftCardData"
          },
          "GiftCardMedia": {
            "$ref": "#/components/schemas/EVA.Core.GiftCards.GiftCardMedia"
          },
          "OrderID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer",
            "description": "The product ID to add as a giftcard. Will fallback to GiftCards:Digital:ProductID"
          },
          "UpdateUrl": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.GiftCards.CardBalanceCheck": {
        "required": [
          "CardNumber"
        ],
        "type": "object",
        "properties": {
          "Barcode": {
            "type": "string"
          },
          "CardNumber": {
            "type": "string"
          },
          "CardPin": {
            "type": "string"
          },
          "CardSubType": {
            "type": "string"
          },
          "ConfigurationID": {
            "type": "integer"
          },
          "Handler": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.GiftCards.CardBalanceCheckResponse": {
        "required": [
          "Balance",
          "CurrencyID",
          "CardID"
        ],
        "type": "object",
        "properties": {
          "Balance": {
            "type": "number"
          },
          "CanSpendAll": {
            "type": "boolean",
            "description": "If the total amount on the card can be spend on this order."
          },
          "CardID": {
            "type": "string"
          },
          "CurrencyID": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "RemainingBalance": {
            "type": "number",
            "description": "The remaining balance on the card when this order is paid."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.GiftCards.Configuration.ProductGiftCardCommunicationOptions": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.GiftCards.DownloadDigitalGiftCard": {
        "type": "object",
        "properties": {
          "AccessToken": {
            "type": "string"
          },
          "GiftCardID": {
            "type": "string"
          },
          "LanguageID": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.GiftCards.GetDigitalGiftCardOptions": {
        "type": "object",
        "properties": {
          "AccessToken": {
            "type": "string"
          },
          "GiftCardID": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderLineID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.GiftCards.GetDigitalGiftCardOptionsResponse": {
        "required": [
          "CanBeUpdated"
        ],
        "type": "object",
        "properties": {
          "AvailableCommunicationOptions": {
            "$ref": "#/components/schemas/EVA.Core.GiftCards.Configuration.ProductGiftCardCommunicationOptions"
          },
          "CanBeUpdated": {
            "type": "boolean"
          },
          "DeliverySchedule": {
            "type": "string",
            "format": "date-time"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "FromEmailAddress": {
            "type": "string"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "ToEmailAddress": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.GiftCards.GetDigitalGiftCardsForOrder": {
        "type": "object",
        "properties": {
          "AccessToken": {
            "type": "string"
          },
          "GiftCardID": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.GiftCards.GetDigitalGiftCardsForOrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.GiftCards.GiftCard"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.GiftCards.GetGiftCardOptions": {
        "required": [
          "CardNumber"
        ],
        "type": "object",
        "properties": {
          "CardNumber": {
            "type": "string"
          },
          "GiftCardConfigurationID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.GiftCards.GetGiftCardOptionsResponse": {
        "type": "object",
        "properties": {
          "BusinessRules": {
            "$ref": "#/components/schemas/EVA.Core.GiftCards.GetGiftCardOptionsResponse_CardBusinessRules"
          },
          "CardID": {
            "type": "string"
          },
          "CurrencyID": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Status": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.GiftCards.GetGiftCardOptionsResponse_CardBusinessRules": {
        "type": "object",
        "properties": {
          "ActivateValueMax": {
            "type": "number"
          },
          "ActivateValueMin": {
            "type": "number"
          },
          "ActivateValues": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "PurchaseValueMax": {
            "type": "number"
          },
          "PurchaseValueMin": {
            "type": "number"
          },
          "Refundable": {
            "type": "boolean"
          },
          "Reloadable": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.GiftCards.GiftCard": {
        "required": [
          "IsCleared",
          "IsAvailable",
          "IsEmpty",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "CommunicationOptions": {
            "$ref": "#/components/schemas/EVA.Core.GiftCards.Configuration.ProductGiftCardCommunicationOptions"
          },
          "CurrencyID": {
            "type": "string"
          },
          "Data": {
            "$ref": "#/components/schemas/EVA.Core.GiftCards.GiftCardData"
          },
          "Details": {
            "$ref": "#/components/schemas/EVA.Core.GiftCards.GiftCardDetails"
          },
          "Identifiers": {
            "$ref": "#/components/schemas/EVA.Core.GiftCards.GiftCardIdentifiers"
          },
          "IsAvailable": {
            "type": "boolean"
          },
          "IsCleared": {
            "type": "boolean"
          },
          "IsEmpty": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.GiftCards.GiftCardData": {
        "type": "object",
        "properties": {
          "DeliverySchedule": {
            "type": "string",
            "format": "date-time"
          },
          "From": {
            "type": "string"
          },
          "FromEmailAddress": {
            "type": "string"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "Theme": {
            "$ref": "#/components/schemas/EVA.Core.GiftCards.GiftCardTheme"
          },
          "To": {
            "type": "string"
          },
          "ToEmailAddress": {
            "type": "string"
          },
          "UpdateUrl": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.GiftCards.GiftCardDetails": {
        "type": "object",
        "properties": {
          "GiftCardNumber": {
            "type": "string"
          },
          "PIN": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.GiftCards.GiftCardIdentifiers": {
        "required": [
          "OrderLineID",
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "AccessToken": {
            "type": "string"
          },
          "GiftCardID": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderLineID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.GiftCards.GiftCardMedia": {
        "type": "object",
        "properties": {
          "CloudinaryImageID": {
            "type": "string"
          },
          "CloudinaryImageMimeType": {
            "type": "string"
          },
          "CloudinaryVideoID": {
            "type": "string"
          },
          "CloudinaryVideoMimeType": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.GiftCards.GiftCardPaymentMethodRequestProperties": {
        "type": "object",
        "properties": {
          "CardNumber": {
            "type": "string"
          },
          "Pin": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.GiftCards.GiftCardTheme": {
        "required": [
          "ImageWidth",
          "ImageHeight"
        ],
        "type": "object",
        "properties": {
          "BackgroundColor": {
            "type": "string"
          },
          "CloudinaryImagePublicID": {
            "type": "string"
          },
          "CloudinaryVideoPublicID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ForegroundColor": {
            "type": "string"
          },
          "ID": {
            "type": "string"
          },
          "ImageBlobID": {
            "type": "string",
            "format": "uuid"
          },
          "ImageHeight": {
            "type": "integer"
          },
          "ImageUrl": {
            "type": "string"
          },
          "ImageWidth": {
            "type": "integer"
          },
          "LongDescription": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "VideoBlobID": {
            "type": "string",
            "format": "uuid"
          },
          "VideoUrl": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.GiftCards.UpdateDigitalGiftCardOptions": {
        "type": "object",
        "properties": {
          "AccessToken": {
            "type": "string"
          },
          "DeliverySchedule": {
            "type": "string",
            "format": "date-time"
          },
          "FromEmailAddress": {
            "type": "string"
          },
          "GiftCardID": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "ToEmailAddress": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.GiftCards.UpdateDigitalGiftCardOrderLine": {
        "required": [
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "Data": {
            "$ref": "#/components/schemas/EVA.Core.GiftCards.GiftCardData"
          },
          "GiftCardMedia": {
            "$ref": "#/components/schemas/EVA.Core.GiftCards.GiftCardMedia"
          },
          "OrderLineID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.GiftWrapping.GiftWrapDto": {
        "required": [
          "Lines"
        ],
        "type": "object",
        "properties": {
          "GreetingCardProductID": {
            "type": "integer"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.GiftWrapping.WrapLine"
            }
          },
          "Message": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.GiftWrapping.GiftWrappingLineAvailabilityDto": {
        "required": [
          "OrderLineID",
          "TotalQuantityWrappable",
          "QuantityAvailable",
          "QuantityWrapped"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "QuantityAvailable": {
            "type": "integer"
          },
          "QuantityWrapped": {
            "type": "integer"
          },
          "TotalQuantityWrappable": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.GiftWrapping.WrapLine": {
        "required": [
          "OrderLineID",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Infrastructure.GetDevice": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Infrastructure.GetDeviceResponse": {
        "required": [
          "Result"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.Infrastructure.GetDeviceResponse_DeviceDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Infrastructure.GetDeviceResponse_DeviceDto": {
        "required": [
          "Type",
          "TypeID",
          "ID",
          "ConnectionType",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Address": {
            "type": "string"
          },
          "AssemblyName": {
            "type": "string"
          },
          "BackendID": {
            "type": "string"
          },
          "ConnectionType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ConnectionType"
          },
          "Data": {
            "type": "string"
          },
          "HardwareID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "NetworkName": {
            "type": "string"
          },
          "OrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.Dto.OrganizationUnitDto"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "PrinterType": {
            "$ref": "#/components/schemas/EVA.Core.Infrastructure.GetDeviceResponse_DeviceDto_PrinterTypeModel"
          },
          "PrinterTypeID": {
            "type": "integer"
          },
          "Station": {
            "$ref": "#/components/schemas/EVA.Core.Devices.Dto.StationDto"
          },
          "StationID": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.API.FlagsEnumDto"
          },
          "TypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Infrastructure.GetDeviceResponse_DeviceDto_PrinterTypeModel": {
        "required": [
          "ID",
          "PaperWidth"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "PaperWidth": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Infrastructure.GetDeviceTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Infrastructure.GetDeviceTypesResponse": {
        "type": "object",
        "properties": {
          "DeviceTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.API.FlagsEnumDto"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Infrastructure.GetOpenCashDrawerReasons": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Infrastructure.GetOpenCashDrawerReasonsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Reasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Infrastructure.GetOpenCashDrawerReasonsResponse_OpenCashDrawerReason"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Infrastructure.GetOpenCashDrawerReasonsResponse_OpenCashDrawerReason": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "LocalizedDescription": {
            "type": "string",
            "description": "Will be localized (if a localized version has been defined) to the culture of your current user."
          },
          "LocalizedName": {
            "type": "string",
            "description": "Will be localized (if a localized version has been defined) to the culture of your current user."
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Infrastructure.GetStation": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Infrastructure.GetStationResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.Devices.Dto.StationDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Infrastructure.ListDevices": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Devices.ListDevicesFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Infrastructure.ListDevicesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Devices.ListDevicesModel"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Infrastructure.ListStationsForOrganizationUnit": {
        "required": [
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "DeviceTypeID": {
            "type": "integer"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Devices.ListStationsFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Infrastructure.ListStationsForOrganizationUnitResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Devices.Dto.StationDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Infrastructure.ScanStation": {
        "type": "object",
        "properties": {
          "Barcode": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Infrastructure.SelectStationResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Station": {
            "$ref": "#/components/schemas/EVA.Core.Devices.Dto.StationDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Infrastructure.SendConfigurationPage": {
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Input.OrderImportFulfillmentMethod": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Inquiries.GetInquiry": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Inquiries.GetInquiryResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Inquiry": {
            "$ref": "#/components/schemas/EVA.Core.Inquiries.GetInquiryResponse_InquiryData"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Inquiries.GetInquiryResponse_InquiryData": {
        "required": [
          "Items",
          "ID",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Inquiries.GetInquiryResponse_InquiryItemData"
            }
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Inquiries.GetInquiryResponse_InquiryItemData": {
        "required": [
          "Sequence",
          "ID",
          "CustomField",
          "Name"
        ],
        "type": "object",
        "properties": {
          "CustomField": {
            "$ref": "#/components/schemas/EVA.Core.CustomFields.CustomFieldResponse"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Sequence": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Inquiries.SubmitInquiry": {
        "required": [
          "Items",
          "InquiryID"
        ],
        "type": "object",
        "properties": {
          "InquiryID": {
            "type": "integer"
          },
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Inquiries.SubmitInquiry_ItemData"
            }
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Inquiries.SubmitInquiry_ItemData": {
        "required": [
          "Value",
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Value": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldValue"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Interaction.GenerateDeviceHubBarcode": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Interaction.GenerateDeviceHubBarcodeResponse": {
        "type": "object",
        "properties": {
          "Barcode": {
            "type": "string"
          },
          "DeviceID": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Interaction.GenerateScanModeBarcode": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Interaction.GenerateScanModeBarcodeResponse": {
        "type": "object",
        "properties": {
          "Barcode": {
            "type": "string"
          },
          "DeviceID": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Interaction.GenerateSessionBarcode": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Interaction.GenerateSessionBarcodeResponse": {
        "type": "object",
        "properties": {
          "Barcode": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Interaction.RequestDeviceAuthenticationToken": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Interaction.RequestDeviceAuthenticationTokenResponse": {
        "type": "object",
        "properties": {
          "AuthenticationToken": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.AttachBlobToInvoice": {
        "required": [
          "BlobID",
          "InvoiceID"
        ],
        "type": "object",
        "properties": {
          "BlobID": {
            "type": "string",
            "format": "uuid"
          },
          "InvoiceID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.BookInvoice": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.CreateInvoice": {
        "required": [
          "Type",
          "TaxReverseCharge",
          "InvoiceDate"
        ],
        "type": "object",
        "properties": {
          "Blobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoicing.InvoiceBlobDto"
            }
          },
          "CalculationMethod": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.InvoiceCalculationMethod"
          },
          "CreditorOrganizationUnitID": {
            "type": "integer"
          },
          "DebtorOrganizationUnitID": {
            "type": "integer"
          },
          "Description": {
            "type": "string"
          },
          "FiscalID": {
            "type": "string"
          },
          "HoldStatusID": {
            "type": "integer"
          },
          "InvoiceDate": {
            "type": "string",
            "format": "date-time"
          },
          "InvoiceNumber": {
            "type": "string"
          },
          "OriginalTotalAmount": {
            "type": "number"
          },
          "PaymentTermDueDate": {
            "type": "string",
            "format": "date-time"
          },
          "PaymentTermStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "TaxReverseCharge": {
            "type": "boolean"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.InvoiceTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.CreateInvoiceAdditionalAmount": {
        "required": [
          "TypeID",
          "OriginalAmount",
          "InvoiceID",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "InvoiceID": {
            "type": "integer"
          },
          "OriginalAmount": {
            "type": "number"
          },
          "TaxCodeID": {
            "type": "integer"
          },
          "TaxRate": {
            "type": "number"
          },
          "TypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.CreateInvoiceAdditionalAmountResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.CreateInvoiceAdditionalAmountType": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "LedgerClassID": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.CreateInvoiceAdditionalAmountTypeResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.CreateInvoiceDispute": {
        "required": [
          "InvoiceID",
          "Amount",
          "ReasonID"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "Description": {
            "type": "string"
          },
          "EmailAddressToSendNotificationTo": {
            "type": "string",
            "description": "Email address to send notification to. This will overwrite the selected User when set."
          },
          "InvoiceAdditionalAmountID": {
            "type": "integer"
          },
          "InvoiceID": {
            "type": "integer"
          },
          "InvoiceLineID": {
            "type": "integer"
          },
          "ReasonID": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.InvoiceDisputeTypes"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.CreateInvoiceDisputeReason": {
        "required": [
          "AutoResolve",
          "Name"
        ],
        "type": "object",
        "properties": {
          "AutoResolve": {
            "type": "boolean"
          },
          "Description": {
            "type": "string"
          },
          "LedgerClassID": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.CreateInvoiceDisputeReasonResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.CreateInvoiceDisputeResolveAction": {
        "required": [
          "InvoiceDisputeID",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "Description": {
            "type": "string"
          },
          "InvoiceDisputeID": {
            "type": "integer"
          },
          "LedgerClassID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.CreateInvoiceDisputeResolveActionResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.CreateInvoiceDisputeResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.CreateInvoiceLine": {
        "type": "object",
        "properties": {
          "ExpectedQuantity": {
            "type": "integer"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          },
          "ShipmentLineID": {
            "type": "integer"
          },
          "TaxRate": {
            "type": "number"
          },
          "UnitPrice": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.CreateInvoiceLines": {
        "required": [
          "InvoiceID"
        ],
        "type": "object",
        "properties": {
          "InvoiceID": {
            "type": "integer"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoices.CreateInvoiceLine"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.CreateInvoicePayment": {
        "required": [
          "PaymentTransactionID"
        ],
        "type": "object",
        "properties": {
          "InvoiceID": {
            "type": "integer"
          },
          "PaymentTransactionID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.CreateInvoiceResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.CreateInvoicesForOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "LinesToInvoice": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoices.CreateInvoicesForOrder_OrderLineToInvoice"
            }
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.CreateInvoicesForOrder_OrderLineToInvoice": {
        "required": [
          "ID",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.CreateInvoicesForOrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoices.CreateInvoicesForOrderResponse_Invoice"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.CreateInvoicesForOrderResponse_Invoice": {
        "required": [
          "TypeID",
          "StatusID",
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "InvoiceNumber": {
            "type": "string"
          },
          "StatusID": {
            "type": "integer"
          },
          "TypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.CreateManualInvoice": {
        "required": [
          "Number",
          "Lines",
          "Series",
          "InvoiceDate",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "Customer": {
            "$ref": "#/components/schemas/EVA.Core.Invoices.ManualCustomer"
          },
          "InvoiceDate": {
            "type": "string",
            "format": "date-time"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoices.ManualLine"
            }
          },
          "Number": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "Series": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.CreateManualInvoiceResponse": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.CreateOrUpdateInvoiceCompanyMapping": {
        "required": [
          "CompanyID",
          "VatNumber",
          "CountryID"
        ],
        "type": "object",
        "properties": {
          "CompanyID": {
            "type": "integer"
          },
          "CountryID": {
            "type": "string"
          },
          "VatNumber": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.CreateOrUpdateInvoiceCompanyMappingResponse": {
        "required": [
          "ID",
          "AlreadyExisted"
        ],
        "type": "object",
        "properties": {
          "AlreadyExisted": {
            "type": "boolean"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.DeleteInvoice": {
        "required": [
          "InvoiceID"
        ],
        "type": "object",
        "properties": {
          "InvoiceID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.DeleteInvoiceAdditionalAmount": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.DeleteInvoiceAdditionalAmountType": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.DeleteInvoiceBlob": {
        "required": [
          "BlobID",
          "InvoiceID"
        ],
        "type": "object",
        "properties": {
          "BlobID": {
            "type": "string",
            "format": "uuid"
          },
          "InvoiceID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.DeleteInvoiceCompanyMapping": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.DeleteInvoiceDispute": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.DeleteInvoiceDisputeReason": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.DeleteInvoiceDisputeResolveAction": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.GetInvoice": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.GetInvoiceAdditionalAmountTypeByID": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.GetInvoiceAdditionalAmountTypeByIDResponse": {
        "required": [
          "ID",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "LedgerClassID": {
            "type": "string"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.GetInvoiceAdditionalAmountTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Invoices.GetInvoiceAdditionalAmountTypesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "InvoiceAdditionalAmountTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoices.GetInvoiceAdditionalAmountTypesResponse_InvoiceAdditionalAmountTypeDto"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.GetInvoiceAdditionalAmountTypesResponse_InvoiceAdditionalAmountTypeDto": {
        "required": [
          "ID",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "LedgerClassID": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.GetInvoiceAdditionalAmountsForInvoice": {
        "required": [
          "InvoiceID"
        ],
        "type": "object",
        "properties": {
          "InvoiceID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.GetInvoiceAdditionalAmountsForInvoiceResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "InvoiceAdditionalAmounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoices.GetInvoiceAdditionalAmountsForInvoiceResponse_InvoiceAdditionalAmountDto"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.GetInvoiceAdditionalAmountsForInvoiceResponse_InvoiceAdditionalAmountDto": {
        "required": [
          "TypeID",
          "ID",
          "OriginalAmountInTax",
          "OriginalAmount",
          "TaxRate",
          "TypeName",
          "TaxCodeName",
          "AmountInTax",
          "TaxCodeID",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "AmountInTax": {
            "type": "number"
          },
          "ID": {
            "type": "integer"
          },
          "OriginalAmount": {
            "type": "number"
          },
          "OriginalAmountInTax": {
            "type": "number"
          },
          "TaxCodeID": {
            "type": "integer"
          },
          "TaxCodeName": {
            "type": "string"
          },
          "TaxRate": {
            "type": "number"
          },
          "TypeID": {
            "type": "integer"
          },
          "TypeName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.GetInvoiceDisputeReasonByID": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.GetInvoiceDisputeReasonByIDResponse": {
        "required": [
          "ID",
          "AutoResolve",
          "Name"
        ],
        "type": "object",
        "properties": {
          "AutoResolve": {
            "type": "boolean"
          },
          "Description": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "LedgerClassID": {
            "type": "string"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.GetInvoiceDisputeReasons": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Invoices.GetInvoiceDisputeReasonsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "InvoiceDisputeReasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoices.GetInvoiceDisputeReasonsResponse_InvoiceDisputeReasonDto"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.GetInvoiceDisputeReasonsResponse_InvoiceDisputeReasonDto": {
        "required": [
          "ID",
          "AutoResolve",
          "Name"
        ],
        "type": "object",
        "properties": {
          "AutoResolve": {
            "type": "boolean"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "LedgerClassID": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.GetInvoiceDisputesForInvoice": {
        "required": [
          "InvoiceID"
        ],
        "type": "object",
        "properties": {
          "InvoiceID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.GetInvoiceDisputesForInvoiceResponse": {
        "required": [
          "TotalDisputedAmount",
          "InvoiceDisputes"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "InvoiceDisputes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoices.GetInvoiceDisputesForInvoiceResponse_InvoiceDisputeDto"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "TotalDisputedAmount": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.GetInvoiceDisputesForInvoiceResponse_InvoiceDisputeDto": {
        "required": [
          "Type",
          "ResolveActions",
          "IsResolved",
          "ReasonName",
          "ID",
          "ResolvedAmount",
          "Amount",
          "ReasonID"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "Description": {
            "type": "string"
          },
          "EmailAddressToSendNotificationTo": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "InvoiceAdditionalAmountID": {
            "type": "integer"
          },
          "InvoiceLineID": {
            "type": "integer"
          },
          "IsResolved": {
            "type": "boolean"
          },
          "ReasonID": {
            "type": "integer"
          },
          "ReasonName": {
            "type": "string"
          },
          "ResolveActions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoicing.InvoiceDisputeResolveActionDto"
            }
          },
          "ResolvedAmount": {
            "type": "number"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.InvoiceDisputeTypes"
          },
          "UserFullName": {
            "type": "string"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.GetInvoiceExportByID": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.GetInvoiceExportByIDResponse": {
        "required": [
          "ID",
          "CreationTime",
          "Status",
          "InvoiceID"
        ],
        "type": "object",
        "properties": {
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "InvoiceID": {
            "type": "integer"
          },
          "LastModificationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Name": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.TransputJobStatuses"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.GetInvoiceExportDocuments": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.GetInvoiceExportDocumentsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "RequestDocuments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.TransputJobs.TransputJobDocument"
            }
          },
          "ResponseDocuments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.TransputJobs.TransputJobDocument"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.GetInvoiceOutputTypes": {
        "required": [
          "InvoiceID"
        ],
        "type": "object",
        "properties": {
          "InvoiceID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.GetInvoiceOutputTypesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OutputTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Auditing.InvoiceOutputType"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.GetInvoicePayments": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "InvoiceID": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.GetInvoicePaymentsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoices.GetInvoicePaymentsResponse_InvoicePayment"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.GetInvoicePaymentsResponse_InvoicePayment": {
        "required": [
          "PaymentTransactionID",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "InvoiceID": {
            "type": "integer"
          },
          "MethodCode": {
            "type": "string"
          },
          "MethodName": {
            "type": "string"
          },
          "PaymentTransactionID": {
            "type": "integer"
          },
          "TypeCode": {
            "type": "string"
          },
          "TypeName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.GetInvoiceResponse": {
        "required": [
          "Invoice"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Invoice": {
            "$ref": "#/components/schemas/EVA.Core.Invoicing.InvoiceDetailsDto"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.ListBlobsForInvoice": {
        "required": [
          "InvoiceID"
        ],
        "type": "object",
        "properties": {
          "InvoiceID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.ListBlobsForInvoiceResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoices.ListBlobsForInvoiceResponse_Model"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.ListBlobsForInvoiceResponse_Model": {
        "required": [
          "CreationTime",
          "BlobID"
        ],
        "type": "object",
        "properties": {
          "BlobID": {
            "type": "string",
            "format": "uuid"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "MimeType": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.ListControlDocuments": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Invoicing.ListControlDocumentsFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.ListControlDocumentsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Invoicing.InvoiceControlDocumentData"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.ListInvoiceCompanyMapping": {
        "type": "object",
        "properties": {
          "InitialPageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageTokenConfig_1_EVA.Core.Invoicing.ListInvoiceCompanyMappingFilter"
          },
          "PageToken": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.ListInvoiceCompanyMappingResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "NextPageToken": {
            "type": "string"
          },
          "PreviousPageToken": {
            "type": "string"
          },
          "Results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoicing.ListInvoiceCompanyMappingModel"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.ListInvoiceExportsForInvoice": {
        "required": [
          "InvoiceID"
        ],
        "type": "object",
        "properties": {
          "InvoiceID": {
            "type": "integer"
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.ListInvoiceExportsForInvoiceResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Invoices.ListInvoiceExportsForInvoiceResponse_InvoiceExportDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.ListInvoiceExportsForInvoiceResponse_InvoiceExportDto": {
        "required": [
          "ID",
          "CreationTime",
          "Status"
        ],
        "type": "object",
        "properties": {
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer"
          },
          "LastModificationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Name": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.TransputJobStatuses"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.ListInvoiceLedger": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Invoicing.ListInvoiceLedgerFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.ListInvoiceLedgerResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Invoices.ListInvoiceLedgerResponse_InvoiceLedgerDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.ListInvoiceLedgerResponse_InvoiceLedgerDto": {
        "required": [
          "CreatedByID",
          "TypeID",
          "CreationTime",
          "InvoiceID"
        ],
        "type": "object",
        "properties": {
          "CreatedByFullName": {
            "type": "string"
          },
          "CreatedByID": {
            "type": "integer"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string"
          },
          "InvoiceDisputeID": {
            "type": "integer"
          },
          "InvoiceID": {
            "type": "integer"
          },
          "InvoiceLineID": {
            "type": "integer"
          },
          "NewValue": {
            "type": "string"
          },
          "OldValue": {
            "type": "string"
          },
          "TypeID": {
            "type": "integer"
          },
          "TypeName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.ListInvoices": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Invoicing.ListInvoiceFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.ListInvoicesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Invoicing.ListInvoicesDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.ListManualInvoices": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Invoicing.ListManualInvoicesFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.ListManualInvoicesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Invoicing.ManualInvoiceSummary"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.ListShipmentLinesToInvoice": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Shipments.ListShipmentLinesToInvoiceFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.ListShipmentLinesToInvoiceResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Invoices.ListShipmentLinesToInvoiceResponse_Model"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.ListShipmentLinesToInvoiceResponse_Model": {
        "required": [
          "ProductID",
          "ID",
          "QuantityInvoiced",
          "QuantityDelivered",
          "DeliveryType",
          "TaxRate",
          "QuantityShipped",
          "UnitPrice",
          "TotalAmountInvoiced",
          "QuantityAvailableForInvoice",
          "TotalAmountDelivered"
        ],
        "type": "object",
        "properties": {
          "CurrencyID": {
            "type": "string"
          },
          "CustomID": {
            "type": "string"
          },
          "DeliveryType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ShipmentLineDeliveryTypes"
          },
          "ID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "ProductName": {
            "type": "string"
          },
          "QuantityAvailableForInvoice": {
            "type": "integer"
          },
          "QuantityDelivered": {
            "type": "integer"
          },
          "QuantityInvoiced": {
            "type": "integer"
          },
          "QuantityShipped": {
            "type": "integer"
          },
          "SupplierProductBackendID": {
            "type": "string"
          },
          "TaxRate": {
            "type": "number"
          },
          "TotalAmountDelivered": {
            "type": "number"
          },
          "TotalAmountInvoiced": {
            "type": "number"
          },
          "UnitPrice": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.ListShipmentsToInvoice": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Shipments.ListShipmentsToInvoiceFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.ListShipmentsToInvoiceResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Invoices.ListShipmentsToInvoiceResponse_Model"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.ListShipmentsToInvoiceResponse_Model": {
        "required": [
          "TotalQuantityReceived",
          "ID",
          "TotalQuantityInvoiced",
          "ShipmentDate",
          "TotalAmountInvoiced",
          "TotalAmountReceived"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "CompletionTime": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer"
          },
          "LastDeliveryDate": {
            "type": "string",
            "format": "date-time"
          },
          "OrderBackendIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "OrderIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "ShipmentDate": {
            "type": "string",
            "format": "date-time"
          },
          "TotalAmountInvoiced": {
            "type": "number"
          },
          "TotalAmountReceived": {
            "type": "number"
          },
          "TotalQuantityInvoiced": {
            "type": "integer"
          },
          "TotalQuantityReceived": {
            "type": "integer"
          },
          "TrackingCode": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.ManualCustomer": {
        "type": "object",
        "properties": {
          "FirstName": {
            "type": "string"
          },
          "FiscalID": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.ManualLine": {
        "required": [
          "TotalAmountInTax",
          "TaxRate",
          "Description",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ProductID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          },
          "TaxRate": {
            "type": "number"
          },
          "TotalAmountInTax": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.RetryInvoiceExport": {
        "required": [
          "ID",
          "Force"
        ],
        "type": "object",
        "properties": {
          "Force": {
            "type": "boolean"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.UpdateInvoice": {
        "required": [
          "TaxReverseCharge",
          "ID",
          "InvoiceDate"
        ],
        "type": "object",
        "properties": {
          "Blobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoicing.InvoiceBlobDto"
            }
          },
          "CreditorOrganizationUnitID": {
            "type": "integer"
          },
          "DebtorOrganizationUnitID": {
            "type": "integer"
          },
          "Description": {
            "type": "string"
          },
          "FiscalID": {
            "type": "string"
          },
          "HoldStatusID": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "InvoiceDate": {
            "type": "string",
            "format": "date-time"
          },
          "InvoiceNumber": {
            "type": "string"
          },
          "OriginalTotalAmount": {
            "type": "number"
          },
          "PaymentTermDueDate": {
            "type": "string",
            "format": "date-time"
          },
          "PaymentTermStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "TaxReverseCharge": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.UpdateInvoiceAdditionalAmount": {
        "required": [
          "TypeID",
          "ID",
          "OriginalAmount",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "ID": {
            "type": "integer"
          },
          "OriginalAmount": {
            "type": "number"
          },
          "TaxCodeID": {
            "type": "integer"
          },
          "TaxRate": {
            "type": "number"
          },
          "TypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.UpdateInvoiceAdditionalAmountType": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "LedgerClassID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.UpdateInvoiceDispute": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "ReasonID": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.InvoiceDisputeTypes"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.UpdateInvoiceDisputeReason": {
        "required": [
          "ID",
          "AutoResolve"
        ],
        "type": "object",
        "properties": {
          "AutoResolve": {
            "type": "boolean"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "LedgerClassID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.UpdateInvoiceDisputeResolveAction": {
        "required": [
          "ID",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "LedgerClassID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.UpdateInvoiceHoldStatus": {
        "required": [
          "InvoiceID"
        ],
        "type": "object",
        "properties": {
          "HoldStatusID": {
            "type": "integer"
          },
          "InvoiceID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.UpdateInvoiceLine": {
        "required": [
          "TaxRate",
          "Quantity",
          "UnitPrice",
          "InvoiceLineID"
        ],
        "type": "object",
        "properties": {
          "ExpectedQuantity": {
            "type": "integer"
          },
          "InvoiceLineID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          },
          "TaxRate": {
            "type": "number"
          },
          "UnitPrice": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.UpdateInvoiceLines": {
        "required": [
          "InvoiceID"
        ],
        "type": "object",
        "properties": {
          "InvoiceID": {
            "type": "integer"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoices.UpdateInvoiceLine"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.ValidateInvoiceNumber": {
        "required": [
          "InvoiceNumber",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "InvoiceNumber": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.InvoiceTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoices.ValidateInvoiceNumberResponse": {
        "required": [
          "IsValid"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoicing.InvoiceDto"
            }
          },
          "IsValid": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoicing.DisputeAmounts": {
        "required": [
          "Expected",
          "Original",
          "Total"
        ],
        "type": "object",
        "properties": {
          "Expected": {
            "type": "number"
          },
          "Original": {
            "type": "number"
          },
          "Total": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoicing.InvoiceAdditionalAmountDto": {
        "required": [
          "Type",
          "ID",
          "OriginalAmountInTax",
          "OriginalAmount",
          "TaxRate",
          "AmountInTax",
          "TaxCodeID",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "AmountInTax": {
            "type": "number"
          },
          "Disputes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoicing.InvoiceDisputeDto"
            }
          },
          "ID": {
            "type": "integer"
          },
          "OriginalAmount": {
            "type": "number"
          },
          "OriginalAmountInTax": {
            "type": "number"
          },
          "TaxCodeID": {
            "type": "integer"
          },
          "TaxRate": {
            "type": "number"
          },
          "Type": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoicing.InvoiceBlobDto": {
        "required": [
          "BlobID"
        ],
        "type": "object",
        "properties": {
          "BlobID": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoicing.InvoiceBookStatusDto": {
        "required": [
          "IsBooked",
          "CanBeBooked"
        ],
        "type": "object",
        "properties": {
          "CanBeBooked": {
            "type": "boolean"
          },
          "IsBooked": {
            "type": "boolean"
          },
          "Message": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoicing.InvoiceControlDocumentData": {
        "required": [
          "Type",
          "ID",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer"
          },
          "Number": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "OrganizationUnitName": {
            "type": "string"
          },
          "Signature": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ControlDocumentTypes"
          },
          "ZippedSignature": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoicing.InvoiceDetailLineDto": {
        "required": [
          "TotalAmount",
          "TotalAmountInTax",
          "TotalAmountInvoicedInTax",
          "ID",
          "DiscountAmount",
          "TaxRate",
          "Quantity",
          "UnitPrice",
          "TotalAmountInvoiced"
        ],
        "type": "object",
        "properties": {
          "AmountToBeDisputed": {
            "type": "number",
            "description": "The amount that has to be resolved with disputes: ExpectedTotalAmountInTax - TotalAmountInTax - Disputes"
          },
          "DiscountAmount": {
            "type": "number"
          },
          "Disputes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoicing.InvoiceDisputeDto"
            }
          },
          "ExpectedDiscountAmount": {
            "type": "number"
          },
          "ExpectedQuantity": {
            "type": "integer"
          },
          "ExpectedTaxRate": {
            "type": "number"
          },
          "ExpectedTotalAmount": {
            "type": "number"
          },
          "ExpectedTotalAmountInTax": {
            "type": "number"
          },
          "ExpectedUnitPrice": {
            "type": "number"
          },
          "ID": {
            "type": "integer"
          },
          "InvoiceDate": {
            "type": "string",
            "format": "date-time"
          },
          "OrderLine": {
            "$ref": "#/components/schemas/EVA.Core.Invoicing.InvoiceDetailsOrderLineDto"
          },
          "Quantity": {
            "type": "integer"
          },
          "ShipmentLine": {
            "$ref": "#/components/schemas/EVA.Core.Invoicing.InvoiceDetailsShipmentLineDto"
          },
          "TaxRate": {
            "type": "number"
          },
          "TotalAmount": {
            "type": "number"
          },
          "TotalAmountInTax": {
            "type": "number"
          },
          "TotalAmountInvoiced": {
            "type": "number"
          },
          "TotalAmountInvoicedInTax": {
            "type": "number"
          },
          "UnitCost": {
            "type": "number"
          },
          "UnitPrice": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoicing.InvoiceDetailsDto": {
        "required": [
          "Type",
          "CreditorOrganizationUnitID",
          "TotalAmount",
          "CreditorOrganizationUnitLanguageID",
          "TaxReverseCharge",
          "ID",
          "CreditorOrganizationUnitCountryID",
          "TotalQuantity",
          "Status",
          "TotalLineAmountInvoicedInTax",
          "SubTotalAmount"
        ],
        "type": "object",
        "properties": {
          "AdditionalAmounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoicing.InvoiceAdditionalAmountDto"
            }
          },
          "Blobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoicing.InvoiceBlobDto"
            }
          },
          "BookStatus": {
            "$ref": "#/components/schemas/EVA.Core.Invoicing.InvoiceBookStatusDto"
          },
          "CreditorOrganizationUnitBackendID": {
            "type": "string"
          },
          "CreditorOrganizationUnitCountryID": {
            "type": "string"
          },
          "CreditorOrganizationUnitID": {
            "type": "integer"
          },
          "CreditorOrganizationUnitLanguageID": {
            "type": "string"
          },
          "CreditorOrganizationUnitName": {
            "type": "string"
          },
          "CurrencyID": {
            "type": "string"
          },
          "DebtorOrganizationUnitBackendID": {
            "type": "string"
          },
          "DebtorOrganizationUnitID": {
            "type": "integer"
          },
          "DebtorOrganizationUnitName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "DisputeAmounts": {
            "$ref": "#/components/schemas/EVA.Core.Invoicing.DisputeAmounts"
          },
          "Disputes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoicing.InvoiceDisputeDto"
            }
          },
          "ExpectedSubTotalAmount": {
            "type": "number",
            "description": "The ExpectedTotalAmount of the invoice minus the Disputes"
          },
          "ExpectedTotalAmount": {
            "type": "number",
            "description": "The ExpectedTotalAmountInTax of all the InvoiceLines + AdditionalAmounts + ExpectedDisputes"
          },
          "ExpectedTotalAmountDifference": {
            "type": "number",
            "description": "The difference between the TotalAmount and the ExpectedTotalAmount"
          },
          "ExpectedTotalQuantity": {
            "type": "integer",
            "description": "The ExpectedQuantity of all the InvoiceLines summed"
          },
          "HoldStatusID": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "InvoiceDate": {
            "type": "string",
            "format": "date-time"
          },
          "InvoiceNumber": {
            "type": "string"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoicing.InvoiceDetailLineDto"
            }
          },
          "OpenAmount": {
            "type": "number"
          },
          "OriginalTotalAmount": {
            "type": "number",
            "description": "The TotalAmount on the actual Invoice as provided by the Supplier"
          },
          "OriginalTotalAmountDifference": {
            "type": "number",
            "description": "The difference between the TotalAmount and the OriginalTotalAmount"
          },
          "PaidAmount": {
            "type": "number"
          },
          "PaymentTermDueDate": {
            "type": "string",
            "format": "date-time"
          },
          "PaymentTermStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "Shipments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoicing.InvoiceShipment"
            }
          },
          "Signature": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.InvoiceStatuses"
          },
          "SubTotalAmount": {
            "type": "number",
            "description": "The TotalAmount of the invoice minus the OriginalDisputes"
          },
          "TaxReverseCharge": {
            "type": "boolean"
          },
          "TotalAmount": {
            "type": "number"
          },
          "TotalLineAmountInvoicedInTax": {
            "type": "number",
            "description": "The TotalAmountInvoicedInTax of all the InvoiceLines summed"
          },
          "TotalQuantity": {
            "type": "integer",
            "description": "The Quantity of all the InvoiceLines summed"
          },
          "TotalQuantityDifference": {
            "type": "integer",
            "description": "The difference between TotalQuantity and ExpectedTotalQuantity"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.InvoiceTypes"
          },
          "ZippedSignature": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoicing.InvoiceDetailsOrderLineDto": {
        "required": [
          "OrderID",
          "ID",
          "UnitPrice"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          },
          "ProductCustomID": {
            "type": "string"
          },
          "ProductID": {
            "type": "integer"
          },
          "SupplierProductBackendID": {
            "type": "string"
          },
          "UnitCost": {
            "type": "number"
          },
          "UnitPrice": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoicing.InvoiceDetailsShipmentDto": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoicing.InvoiceDetailsShipmentLineDto": {
        "required": [
          "ID",
          "QuantityDelivered",
          "TotalAmountDelivered"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "QuantityDelivered": {
            "type": "integer"
          },
          "Shipment": {
            "$ref": "#/components/schemas/EVA.Core.Invoicing.InvoiceDetailsShipmentDto"
          },
          "TotalAmountDelivered": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoicing.InvoiceDisputeDto": {
        "required": [
          "Type",
          "ResolveActions",
          "IsResolved",
          "ReasonName",
          "ID",
          "ResolvedAmount",
          "Amount",
          "ReasonID"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "Description": {
            "type": "string"
          },
          "EmailAddressToSendNotificationTo": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "IsResolved": {
            "type": "boolean"
          },
          "ReasonID": {
            "type": "integer"
          },
          "ReasonName": {
            "type": "string"
          },
          "ResolveActions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoicing.InvoiceDisputeResolveActionDto"
            }
          },
          "ResolvedAmount": {
            "type": "number"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.InvoiceDisputeTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoicing.InvoiceDisputeResolveActionDto": {
        "required": [
          "ID",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "LedgerClassID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoicing.InvoiceDto": {
        "required": [
          "Type",
          "CreditorOrganizationUnitID",
          "TotalAmount",
          "TaxReverseCharge",
          "ID",
          "Status"
        ],
        "type": "object",
        "properties": {
          "CreditorOrganizationUnitID": {
            "type": "integer"
          },
          "CurrencyID": {
            "type": "string"
          },
          "DebtorOrganizationUnitID": {
            "type": "integer"
          },
          "Description": {
            "type": "string"
          },
          "ExpectedTotalAmount": {
            "type": "number",
            "description": "The ExpectedTotalAmountInTax of all the InvoiceLines + AdditionalAmounts + ExpectedDisputes"
          },
          "ExpectedTotalAmountDifference": {
            "type": "number",
            "description": "The difference between the TotalAmount and the ExpectedTotalAmount"
          },
          "HoldStatusID": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "InvoiceDate": {
            "type": "string",
            "format": "date-time"
          },
          "InvoiceNumber": {
            "type": "string"
          },
          "OriginalTotalAmount": {
            "type": "number",
            "description": "The TotalAmount on the actual Invoice as provided by the Supplier"
          },
          "OriginalTotalAmountDifference": {
            "type": "number",
            "description": "The difference between the TotalAmount and the OriginalTotalAmount"
          },
          "PaymentTermDueDate": {
            "type": "string",
            "format": "date-time"
          },
          "PaymentTermStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "Signature": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.InvoiceStatuses"
          },
          "TaxReverseCharge": {
            "type": "boolean"
          },
          "TotalAmount": {
            "type": "number"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.InvoiceTypes"
          },
          "ZippedSignature": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoicing.InvoiceShipment": {
        "required": [
          "TotalAmount",
          "TotalQuantity",
          "ShipmentID"
        ],
        "type": "object",
        "properties": {
          "CompletionTime": {
            "type": "string",
            "format": "date-time"
          },
          "ExpectedTotalAmount": {
            "type": "number"
          },
          "ExpectedTotalQuantity": {
            "type": "number"
          },
          "LastDeliveryDate": {
            "type": "string",
            "format": "date-time"
          },
          "ShipmentBackendID": {
            "type": "string"
          },
          "ShipmentID": {
            "type": "integer"
          },
          "TotalAmount": {
            "type": "number"
          },
          "TotalQuantity": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoicing.ListControlDocumentsFilter": {
        "type": "object",
        "properties": {
          "EndDate": {
            "type": "string",
            "format": "date-time"
          },
          "Number": {
            "type": "string"
          },
          "OrganizationUnitIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "StartDate": {
            "type": "string",
            "format": "date-time"
          },
          "Types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.ControlDocumentTypes"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoicing.ListInvoiceCompanyMappingFilter": {
        "type": "object",
        "properties": {
          "CompanyID": {
            "type": "integer"
          },
          "CountryID": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoicing.ListInvoiceCompanyMappingModel": {
        "required": [
          "CompanyID",
          "ID"
        ],
        "type": "object",
        "properties": {
          "CompanyID": {
            "type": "integer"
          },
          "CompanyName": {
            "type": "string"
          },
          "CountryID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "OrganizationUnitBackendID": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "OrganizationUnitName": {
            "type": "string"
          },
          "VatNumber": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoicing.ListInvoiceFilter": {
        "type": "object",
        "properties": {
          "EndDate": {
            "type": "string",
            "format": "date-time"
          },
          "HasSupplierOrganizationUnit": {
            "type": "boolean"
          },
          "HasUnresolvedDisputes": {
            "type": "boolean"
          },
          "IsMatched": {
            "type": "boolean"
          },
          "Number": {
            "type": "string"
          },
          "OrderIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "StartDate": {
            "type": "string",
            "format": "date-time"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.InvoiceStatuses"
          },
          "SupplierOrganizationUnitSetID": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.InvoiceTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoicing.ListInvoiceLedgerFilter": {
        "type": "object",
        "properties": {
          "InvoiceDisputeID": {
            "type": "integer"
          },
          "InvoiceID": {
            "type": "integer"
          },
          "InvoiceLineID": {
            "type": "integer"
          },
          "Type": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoicing.ListInvoicesDto": {
        "required": [
          "TotalAmount",
          "StatusID",
          "ID",
          "HasUnresolvedDisputes",
          "Status",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "CurrencyID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "HasUnresolvedDisputes": {
            "type": "boolean"
          },
          "HoldStatusID": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "InvoiceDate": {
            "type": "string",
            "format": "date-time"
          },
          "InvoiceNumber": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "OrganizationUnitName": {
            "type": "string"
          },
          "Signature": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.InvoiceStatuses"
          },
          "StatusID": {
            "type": "integer"
          },
          "SupplierOrganizationUnitID": {
            "type": "integer"
          },
          "SupplierOrganizationUnitName": {
            "type": "string"
          },
          "TotalAmount": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoicing.ListManualInvoicesFilter": {
        "type": "object",
        "properties": {
          "EndDate": {
            "type": "string",
            "format": "date-time"
          },
          "Number": {
            "type": "integer"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "StartDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Invoicing.ManualInvoiceSummary": {
        "required": [
          "ID",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "FiscalID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "InvoiceDate": {
            "type": "string",
            "format": "date-time"
          },
          "Name": {
            "type": "string"
          },
          "Number": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "OrganizationUnitName": {
            "type": "string"
          },
          "Series": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ListScriptsFilter": {
        "type": "object",
        "properties": {
          "Dialect": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "IsActive": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          },
          "Source": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ListScriptsItem": {
        "required": [
          "IsActive",
          "ID",
          "Date"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "Dialect": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "IsActive": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          },
          "Revision": {
            "type": "string"
          },
          "RevisionComment": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "User": {
            "type": "string"
          },
          "UserFullName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Loyalty.LoyaltyBalance": {
        "required": [
          "Points",
          "CurrencyValue"
        ],
        "type": "object",
        "properties": {
          "CurrencyID": {
            "type": "string"
          },
          "CurrencyValue": {
            "type": "number"
          },
          "Points": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.MagicLink.SendMagicLink": {
        "required": [
          "RedirectUrl",
          "EmailAddress"
        ],
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string"
          },
          "RedirectUrl": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.MagicLink.SendMagicLinkResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "RequestToken": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.MessageQueue.ListMessageQueueErrors": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.MessageQueueing.ListMessageQueueErrorsFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.MessageQueue.ListMessageQueueErrorsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.MessageQueue.MessageQueueErrorDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.MessageQueue.MessageQueueErrorDto": {
        "required": [
          "ID",
          "CreationTime",
          "Status"
        ],
        "type": "object",
        "properties": {
          "Addresses": {
            "type": "string"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ExceptionMessage": {
            "type": "string"
          },
          "Headers": {
            "type": "string"
          },
          "HostInfo": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "MessageBody": {
            "type": "string"
          },
          "MessageID": {
            "type": "string",
            "format": "uuid"
          },
          "MessageTypeName": {
            "type": "string"
          },
          "StackTrace": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.MessageQueueErrorStatuses"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.MessageQueue.RequeueErrorMessage": {
        "type": "object",
        "properties": {
          "MessageQueueErrorID": {
            "type": "integer"
          },
          "MessageQueueErrorIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.MessageQueueing.ListMessageQueueErrorsFilter": {
        "type": "object",
        "properties": {
          "EndDate": {
            "type": "string",
            "format": "date-time"
          },
          "ErrorCode": {
            "type": "string"
          },
          "ExceptionMessage": {
            "type": "string"
          },
          "MessageID": {
            "type": "string",
            "format": "uuid"
          },
          "MessageTypeName": {
            "type": "string"
          },
          "StartDate": {
            "type": "string",
            "format": "date-time"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.MessageQueueErrorStatuses"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.MessageTemplates.TemplateOutputChannel": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Orders.AddDiscountCouponToOrder": {
        "required": [
          "OrderID",
          "CouponCode"
        ],
        "type": "object",
        "properties": {
          "CouponCode": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.AddDiscountToOrderResponse": {
        "required": [
          "OrderID",
          "DiscountID",
          "DiscountIsApplied"
        ],
        "type": "object",
        "properties": {
          "DiscountID": {
            "type": "integer"
          },
          "DiscountIsApplied": {
            "type": "boolean"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.AddManualDiscountToOrder": {
        "required": [
          "OrderID",
          "DiscountID"
        ],
        "type": "object",
        "properties": {
          "DiscountAmount": {
            "type": "number"
          },
          "DiscountID": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Discounts.OrderLineWithQuantity"
            }
          },
          "Reason": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.AddProductToOrder": {
        "required": [
          "LineActionType",
          "OrderID",
          "ForceNewLine",
          "ForceCreate"
        ],
        "type": "object",
        "properties": {
          "Barcode": {
            "type": "string"
          },
          "Children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.AddProductToOrder_ChildOrderLine"
            }
          },
          "Description": {
            "type": "string",
            "description": "Optionally override the default description that is generated for the new OrderLine. If specified, this OrderLine will not be stacked on any existing OrderLines in the Order of the same Product (unless they use the same Description). Instead, a new OrderLine will be created."
          },
          "ForceCreate": {
            "type": "boolean"
          },
          "ForceNewLine": {
            "type": "boolean",
            "description": "This will always create a new line, regardless of whether a line with the same product ID was found in the order."
          },
          "GroupID": {
            "type": "string",
            "format": "uuid"
          },
          "LineActionType": {
            "$ref": "#/components/schemas/EVA.Core.Enumerations.LineActionTypes"
          },
          "OrderID": {
            "type": "integer"
          },
          "ParentID": {
            "type": "integer",
            "description": "Specify this field to add the new line as a child of the specified parent"
          },
          "ProductID": {
            "type": "integer"
          },
          "QuantityOrdered": {
            "type": "integer"
          },
          "StockLabelID": {
            "type": "integer"
          },
          "UnitPriceInTax": {
            "type": "number",
            "description": "If the product allows its price to be modified, you can specify the desired price using this field."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.AddProductToOrder_ChildOrderLine": {
        "required": [
          "ProductID"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "description": "Optionally override the default description that is generated for the new OrderLine."
          },
          "ProductID": {
            "type": "integer"
          },
          "QuantityOrdered": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.AddProductToOrderResponse": {
        "required": [
          "OrderLineID",
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "Children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.AddProductToOrderResponse_ChildOrderLine"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderLineID": {
            "type": "integer",
            "description": "Created or updated OrderLineID"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.AddProductToOrderResponse_ChildOrderLine": {
        "required": [
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.AddServiceProductToOrder": {
        "required": [
          "ProductID",
          "OrderID",
          "ForceCreate"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ForceCreate": {
            "type": "boolean"
          },
          "OrderID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "UnitCost": {
            "type": "number"
          },
          "UnitPriceInTax": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.AddServiceProductToOrderResponse": {
        "required": [
          "OrderLineID",
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderLineID": {
            "type": "integer",
            "description": "Created or updated OrderLineID"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.AdditionalOrderData": {
        "type": "object",
        "properties": {
          "AvailablePaymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.AvailablePaymentMethod"
            }
          },
          "AvailableRefundPaymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Payments.RefundPaymentMethod"
            }
          },
          "AvailableShippingMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Shipping.ShippingMethodByOrderLineDto"
            }
          },
          "CheckoutOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.CheckoutOrderOptionCategory"
            }
          },
          "DiscountPickProductOptions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.Orders.OrderPickProductDiscountOptions"
            }
          },
          "GiftWrappingLineAvailability": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.GiftWrapping.GiftWrappingLineAvailabilityDto"
            }
          },
          "GiftWrappingOptions": {
            "$ref": "#/components/schemas/EVA.Core.Orders.GiftWrappingOptionsForOrder"
          },
          "IsAutoRefundAvailable": {
            "type": "boolean"
          },
          "IsAutoShipAvailable": {
            "type": "boolean"
          },
          "IsPaidAmountValidForShipment": {
            "type": "boolean"
          },
          "LineDiscountProductOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.LineDiscountProductOption"
            }
          },
          "OpenAmountForShipment": {
            "type": "number"
          },
          "OrderAmountAvailableForRefund": {
            "type": "number"
          },
          "PotentialDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Discounts.PotentialDiscountDto"
            }
          },
          "PrefiguredDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Discounts.PrefigureDiscountResult"
            }
          },
          "ProductRequirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ProductRequirementModel"
            }
          },
          "RequiredData": {
            "$ref": "#/components/schemas/EVA.Core.Validation.RequiredData"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.AdditionalOrderDataOptions": {
        "required": [
          "IncludeAvailableRefundPaymentMethods",
          "IncludePrefigureDiscounts",
          "IncludePaymentTransactionActions",
          "IncludePickProductOptions",
          "IncludeCheckoutOptions",
          "IncludeProductRequirements",
          "IncludeValidateShipment",
          "IncludeGiftWrapping",
          "IncludeOrganizationUnitData",
          "IncludeAvailablePaymentMethods",
          "IncludeAvailableShippingMethods"
        ],
        "type": "object",
        "properties": {
          "IncludeAvailablePaymentMethods": {
            "type": "boolean"
          },
          "IncludeAvailableRefundPaymentMethods": {
            "type": "boolean"
          },
          "IncludeAvailableShippingMethods": {
            "type": "boolean"
          },
          "IncludeCheckoutOptions": {
            "type": "boolean"
          },
          "IncludeGiftWrapping": {
            "type": "boolean"
          },
          "IncludeOrganizationUnitData": {
            "type": "boolean"
          },
          "IncludePaymentTransactionActions": {
            "type": "boolean"
          },
          "IncludePickProductOptions": {
            "type": "boolean"
          },
          "IncludePrefigureDiscounts": {
            "type": "boolean"
          },
          "IncludeProductRequirements": {
            "type": "boolean"
          },
          "IncludeValidateShipment": {
            "type": "boolean"
          },
          "ProductProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "RequiredFor": {
            "$ref": "#/components/schemas/EVA.Core.Validation.RequiredFor"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ApplySalesTaxEstimateForOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.AssociationTypeForSingleOrderLink": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.AttachAddressToOrder": {
        "type": "object",
        "properties": {
          "BillingAddressBookID": {
            "type": "integer"
          },
          "BillingAddressID": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "ShippingAddressBookID": {
            "type": "integer"
          },
          "ShippingAddressID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.AttachAddressToOrderResponse": {
        "required": [
          "CreditcardDisabled"
        ],
        "type": "object",
        "properties": {
          "CreditcardDisabled": {
            "type": "boolean"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.AttachCustomerToOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "AttachmentMetadata": {
            "type": "string",
            "description": "Attachment Metadata to be added in the Order Ledger's Description."
          },
          "OrderID": {
            "type": "integer"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.AttachIdentificationToOrder": {
        "required": [
          "ValidTo",
          "Type",
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "Document": {
            "type": "string"
          },
          "DocumentMimeType": {
            "type": "string"
          },
          "IssuingCity": {
            "type": "string"
          },
          "IssuingCountryID": {
            "type": "string"
          },
          "IssuingDate": {
            "type": "string",
            "format": "date-time"
          },
          "Number": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          },
          "OriginatingCountryID": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.IdentificationTypes"
          },
          "ValidTo": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.AttachIdentificationToOrderResponse": {
        "required": [
          "IdentificationID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "IdentificationID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.AutocompleteOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.AutocompleteOrderResponse": {
        "required": [
          "IsCompleted"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.AvailablePaymentMethod": {
        "required": [
          "IsCustom",
          "IsUsable"
        ],
        "type": "object",
        "properties": {
          "IsCustom": {
            "type": "boolean"
          },
          "IsUsable": {
            "type": "boolean"
          },
          "LocalizedName": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "NotUsableError": {
            "$ref": "#/components/schemas/EVA.Core.Payments.PaymentMethodNotUsableError"
          },
          "Types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.AvailablePaymentMethodType"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.AvailablePaymentMethodType": {
        "required": [
          "ID",
          "CanRefundWithoutOriginalPaymentTransaction"
        ],
        "type": "object",
        "properties": {
          "CanRefundWithoutOriginalPaymentTransaction": {
            "type": "boolean"
          },
          "Code": {
            "type": "string"
          },
          "Data": {
            "type": "object"
          },
          "ID": {
            "type": "integer"
          },
          "MaximumAmount": {
            "type": "number",
            "description": "When this field is set, the amount that can be paid with this method is limited."
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.BackendIDExistsResponse": {
        "required": [
          "Exists"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Exists": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.BasePushSalesOrderLine": {
        "required": [
          "Quantity",
          "IsFinalSale",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Price of a single unit, before discounts, based on the SoldFromOrganizationUnit settings this should be in or ex tax. See service documentation."
          },
          "BackendID": {
            "type": "string",
            "description": "ID of the order line from the 3rd party"
          },
          "CustomData": {
            "type": "object"
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldKeyValue"
            },
            "description": "Optional additional custom fields"
          },
          "CustomID": {
            "type": "string",
            "description": "Article number of the product from the 3rd party"
          },
          "Description": {
            "type": "string"
          },
          "Discounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.PushSalesOrderDiscount"
            }
          },
          "FulfillmentMethod": {
            "$ref": "#/components/schemas/EVA.Core.Input.OrderImportFulfillmentMethod"
          },
          "GiftcardData": {
            "$ref": "#/components/schemas/EVA.Core.GiftCards.GiftCardData"
          },
          "GiftcardMedia": {
            "$ref": "#/components/schemas/EVA.Core.GiftCards.GiftCardMedia"
          },
          "IsFinalSale": {
            "type": "boolean",
            "description": "Marks the line as a final sale line, making it non returnable."
          },
          "OriginalAmount": {
            "type": "number",
            "description": "Original price of a single unit, before discounts, based on the SoldFromOrganizationUnit settings this should be in or ex tax. See service documentation."
          },
          "PaymentLineIdentifier": {
            "type": "string",
            "description": "Used for passing the identifier used to identify this line at the payment provider. This is required for payments that need capture on line level like Klarna."
          },
          "PreferredFulfillmentOrganizationUnitBackendID": {
            "type": "string",
            "description": "Allows you to specify a preferred organization for doing the physical fulfillment of the OrderLine.\nDepending on your order orchestration configuration this can be a hard filter or merely a preference."
          },
          "ProductID": {
            "type": "integer"
          },
          "ProductRequirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.PushSalesOrderProductRequirement"
            },
            "description": "Product requirements"
          },
          "Quantity": {
            "type": "integer"
          },
          "RequestedDeliveryDate": {
            "type": "string",
            "format": "date-time"
          },
          "SerialNumber": {
            "type": "string",
            "description": "Used for passing in the serial number of, for example, a gift card. This is used to support refunding and other operations on the gift card."
          },
          "Shipments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.PushSalesOrderLineShipment"
            }
          },
          "TaxAmount": {
            "type": "number",
            "description": "When known the exact TaxAmount can be specified. Used when tax calculations are done by an external party like Avatax."
          },
          "TaxExemptionCode": {
            "type": "string",
            "description": "A code identifying the tax exemption."
          },
          "TaxExemptionReason": {
            "type": "string",
            "description": "A longer description with the justification for the tax exemption."
          },
          "TaxRate": {
            "type": "number",
            "description": "When no tax rate is provided, the taxrate will be based on what is known in Eva. When no rate can be determined, an error will be thrown."
          },
          "TaxRateCategory": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.TaxRateCategory"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CancelDiscountOrderLine": {
        "required": [
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CancelOrder": {
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string",
            "description": "Reference to the order that is being cancelled - required when `OrderID` is omitted"
          },
          "BackendSystemID": {
            "type": "string",
            "description": "Reference to the system from which the order originated - required when `OrderID` is omitted"
          },
          "OrderID": {
            "type": "integer",
            "description": "ID of the order that is being cancelled - required when `BackendID` and `BackendSystemID` are omitted"
          },
          "OrderLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.CancelOrder_LineToCancel"
            },
            "description": "Lines to cancel - or, if none are specified, all open lines of the order will be cancelled"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CancelOrder_LineToCancel": {
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string",
            "description": "Reference to the orderline that is being cancelled - required when `OrderLineID` is omitted"
          },
          "OrderLineID": {
            "type": "integer",
            "description": "ID of the orderline that is being cancelled - required when `BackendID` is omitted"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CancelOrderResponse": {
        "required": [
          "Result"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderCancellationOptions"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ChangeOrderLinesToCarryOut": {
        "required": [
          "OrderID",
          "OrderTheLinesFromASupplier"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "OrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "OrderTheLinesFromASupplier": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ChangeOrderLinesToDelivery": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "OrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ChangeOrderLinesToPickup": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "OrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "PickupOrganizationUnitID": {
            "type": "integer",
            "description": "Will keep the current value when not provided."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CheckOrderAddressFraud": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CheckOrderAddressFraudResponse": {
        "required": [
          "HasFraudulentAddress",
          "HasFraudulentShippingAddress",
          "HasFraudulentBillingAddress"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "HasFraudulentAddress": {
            "type": "boolean"
          },
          "HasFraudulentBillingAddress": {
            "type": "boolean"
          },
          "HasFraudulentShippingAddress": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CheckOrderBackendIDExists": {
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "BackendSystemID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CheckShipmentBackendIDExists": {
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "BackendSystemID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CheckoutOptions.Options.CertificationOptionValueData": {
        "required": [
          "DisplayOptions"
        ],
        "type": "object",
        "properties": {
          "DisplayOptions": {
            "$ref": "#/components/schemas/EVA.Core.Orders.CheckoutOptions.Options.CertificationOptionValueData_DisplayOptionsData"
          },
          "FiscalID": {
            "type": "object"
          },
          "FiscalRemark": {
            "type": "object"
          },
          "LotteryNumber": {
            "type": "object"
          },
          "RecipientCode": {
            "type": "object"
          },
          "RecipientEmail": {
            "type": "object"
          },
          "VatNumber": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CheckoutOptions.Options.CertificationOptionValueData_DisplayOptionsData": {
        "type": "object",
        "properties": {
          "ShowFiscalID": {
            "type": "boolean"
          },
          "ShowFiscalRemark": {
            "type": "boolean"
          },
          "ShowLotteryNumber": {
            "type": "boolean"
          },
          "ShowRecipientFields": {
            "type": "boolean"
          },
          "ShowVatNumber": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CheckoutOptions.Options.CustomFieldOptionValueData": {
        "required": [
          "CustomFields"
        ],
        "type": "object",
        "properties": {
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.CustomFields.CustomFieldResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CheckoutOptions.Options.CustomerReferencesOptionValueData": {
        "type": "object",
        "properties": {
          "CustomerOrderID": {
            "type": "object"
          },
          "CustomerReference": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CheckoutOptions.Options.RemarkOptionValueData": {
        "type": "object",
        "properties": {
          "Remark": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CheckoutOptions.Options.RequestedDateOptionValueData": {
        "type": "object",
        "properties": {
          "RequestedDate": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CheckoutOrderOption": {
        "required": [
          "Handler",
          "ID",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Handler": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "ValueData": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Orders.CheckoutOptions.Options.CertificationOptionValueData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Orders.CheckoutOptions.Options.CustomerReferencesOptionValueData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Orders.CheckoutOptions.Options.CustomFieldOptionValueData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Orders.CheckoutOptions.Options.RemarkOptionValueData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Orders.CheckoutOptions.Options.RequestedDateOptionValueData"
              },
              {
                "$ref": "#/components/schemas/EVA.DocumentSigning.SignOrderOrderOptionValueData"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CheckoutOrderOptionCategory": {
        "required": [
          "ID",
          "Name",
          "Options"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.CheckoutOrderOption"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CommittedOrderLine": {
        "required": [
          "CommitmentStatus",
          "OrderID",
          "ID",
          "CreationTime",
          "SoldFromOrganizationUnitID",
          "QuantityCommitted",
          "TotalQuantityToShip"
        ],
        "type": "object",
        "properties": {
          "CommitmentStatus": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderLineCommitmentStatus"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          },
          "QuantityCommitted": {
            "type": "integer"
          },
          "RequestedDate": {
            "type": "string",
            "format": "date-time"
          },
          "SoldFromOrganizationUnitID": {
            "type": "integer"
          },
          "SoldFromOrganizationUnitName": {
            "type": "string"
          },
          "TotalQuantityToShip": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ConfigurableGroup": {
        "required": [
          "TotalAmount",
          "TotalAmountInTax",
          "ProductID",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "Children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ConfigurableGroup"
            }
          },
          "ConfigurableProperty": {
            "type": "string"
          },
          "LogicalLevel": {
            "type": "string"
          },
          "OrderLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ConfigurableOrderLine"
            }
          },
          "ProductID": {
            "type": "integer"
          },
          "Properties": {
            "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
          },
          "Quantity": {
            "type": "integer"
          },
          "TotalAmount": {
            "type": "number"
          },
          "TotalAmountInTax": {
            "type": "number"
          },
          "Value": {
            "type": "object"
          },
          "Values": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ConfigurableOrderLine": {
        "required": [
          "TotalAmount",
          "TotalAmountInTax",
          "OrderLineID",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          },
          "TotalAmount": {
            "type": "number"
          },
          "TotalAmountInTax": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Corrections.GetUnitPriceCorrectionReasons": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Orders.Corrections.GetUnitPriceCorrectionReasonsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Reasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Corrections.GetUnitPriceCorrectionReasonsResponse_UnitPriceCorrectionReasonData"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Corrections.GetUnitPriceCorrectionReasonsResponse_UnitPriceCorrectionReasonData": {
        "required": [
          "ID",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CreateInvoicedOrderLineCorrection": {
        "required": [
          "OrderLineID",
          "AutoRefund",
          "CorrectionAmount"
        ],
        "type": "object",
        "properties": {
          "AutoRefund": {
            "type": "boolean"
          },
          "CorrectionAmount": {
            "type": "number"
          },
          "CorrectionReasonID": {
            "type": "integer"
          },
          "OrderLineID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CreateOfferFromOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OfferExpirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CreateOrder": {
        "required": [
          "Type"
        ],
        "type": "object",
        "properties": {
          "ClientOrderID": {
            "type": "string",
            "format": "uuid"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CreateOrderCustomStatus": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CreateOrderCustomStatusResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CreateOrderCustomType": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CreateOrderCustomTypeResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CreateOrderFromOffer": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CreateOrderFromOfferResponse": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CreateOrderLedger": {
        "required": [
          "OrderID",
          "OrderLedgerType"
        ],
        "type": "object",
        "properties": {
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderLedgerType": {
            "type": "string"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "Value": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CreateOrderLineUnitPriceCorrection": {
        "required": [
          "OrderLineID",
          "UnitPrice",
          "IncludingTax"
        ],
        "type": "object",
        "properties": {
          "CorrectionReasonID": {
            "type": "integer"
          },
          "IncludingTax": {
            "type": "boolean"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "UnitPrice": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CreateOrderLineUnitPriceCorrectionResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CreateOrderLink": {
        "required": [
          "TypeID",
          "RelatedOrderID",
          "PrimaryOrderID"
        ],
        "type": "object",
        "properties": {
          "PrimaryOrderID": {
            "type": "integer"
          },
          "RelatedOrderID": {
            "type": "integer"
          },
          "TypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CreateOrderLinkResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CreateOrderLinkType": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CreateOrderLinkTypeResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CreateOrderResponse": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CustomOrderStatusServices.CreateCustomOrderStatus": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CustomOrderStatusServices.CreateCustomOrderStatusResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CustomOrderStatusServices.DeleteCustomOrderStatus": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CustomOrderStatusServices.ListCustomOrderStatus": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Orders.CustomOrderStatusServices.ListCustomOrderStatusResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.CustomOrderStatusServices.ListCustomOrderStatusResponse_CustomOrderStatus"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CustomOrderStatusServices.ListCustomOrderStatusResponse_CustomOrderStatus": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CustomOrderStatusServices.UpdateCustomOrderStatus": {
        "required": [
          "ID",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CustomOrderStatusServices.UpdateOrderCustomOrderStatus": {
        "required": [
          "StatusID",
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "StatusID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.CustomOrderStatusServices.UpdateOrderCustomOrderStatusResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.DeleteOrderCustomStatus": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.DeleteOrderCustomType": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.DeleteOrderLink": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.DeleteOrderLinkType": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.DeliveryOrderData": {
        "required": [
          "ShippingPrice"
        ],
        "type": "object",
        "properties": {
          "AdditionalPickUpPointInformation": {
            "type": "string"
          },
          "DefaultShippingMethodID": {
            "type": "integer"
          },
          "DeliveryService": {
            "type": "string"
          },
          "DeliveryTimeFrom": {
            "type": "string",
            "format": "date-time"
          },
          "DeliveryTimeTo": {
            "type": "string",
            "format": "date-time"
          },
          "ExpectedDeliveryDate": {
            "type": "string",
            "format": "date-time"
          },
          "PickUpPointID": {
            "type": "string"
          },
          "PickUpPointName": {
            "type": "string"
          },
          "ShippingPrice": {
            "type": "number"
          },
          "ShippingType": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.DetachCustomerFromOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.DetachOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.DetachOrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ReminderToken": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.DiscountAmounts": {
        "required": [
          "TotalDiscountAmount"
        ],
        "type": "object",
        "properties": {
          "PerDiscount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.DiscountAmounts_GroupedDiscountAmount"
            }
          },
          "TotalDiscountAmount": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.DiscountAmounts_DiscountAmountDiscount": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.DiscountAmounts_GroupedDiscountAmount": {
        "required": [
          "DiscountID",
          "Total"
        ],
        "type": "object",
        "properties": {
          "Discount": {
            "$ref": "#/components/schemas/EVA.Core.Orders.DiscountAmounts_DiscountAmountDiscount"
          },
          "DiscountID": {
            "type": "integer"
          },
          "Total": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.DownloadInvoice": {
        "required": [
          "InvoiceID"
        ],
        "type": "object",
        "properties": {
          "InvoiceID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.DownloadOffer": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.DownloadOrderConfirmation": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.DownloadOrderConfirmationResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Url": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.EmailInvoice": {
        "required": [
          "InvoiceID"
        ],
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string"
          },
          "InvoiceID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.EmailOrderConfirmation": {
        "required": [
          "OrderID",
          "EmailAddress"
        ],
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.GetAvailableDocumentsForOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.GetAvailableDocumentsForOrderResponse": {
        "type": "object",
        "properties": {
          "Documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Documents.GetAvailableDocumentsForOrderResponse_OrderDocument"
            },
            "description": "List of order document outputs available for a specific order.\nEach document contains information regarding the following categories:\n\n`Receipt`  - physically printing the order invoice\n`Paper`    - printing the order invoice on a paper printer\n`Email`    - sending the order invoice by email\n`Digital`  - providing a downloadable version of the order invoice\n`Metadata` - providing information about the order invoice.\n\nThe document category contains information on whether it's available for the order\nand a reason code in case it's not available."
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.GetAvailableDocumentsForOrderResponse_DocumentOutput": {
        "required": [
          "Allowed",
          "Preferred"
        ],
        "type": "object",
        "properties": {
          "Allowed": {
            "type": "boolean",
            "description": "Allowed is false when this option cannot be used, true otherwise"
          },
          "Preferred": {
            "type": "boolean",
            "description": "Indicates if this output should be preferred by the frontend. Can be used to, for example, set a checkbox or radio button by default so the user does not have to toggle it themselves"
          },
          "ReasonCode": {
            "type": "string",
            "description": "Optional reason code that is included if Allowed is set to false"
          },
          "Stations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Documents.GetAvailableDocumentsForOrderResponse_DocumentStation"
            },
            "description": "Possbile stations where the document can be output"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.GetAvailableDocumentsForOrderResponse_DocumentStation": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer",
            "description": "ID of the Station in EVA. Can be used directly in services"
          },
          "Name": {
            "type": "string",
            "description": "Name of the station for display purposes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.GetAvailableDocumentsForOrderResponse_OrderDocument": {
        "type": "object",
        "properties": {
          "Digital": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Documents.GetAvailableDocumentsForOrderResponse_DocumentOutput"
          },
          "Email": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Documents.GetAvailableDocumentsForOrderResponse_DocumentOutput"
          },
          "Metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "Paper": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Documents.GetAvailableDocumentsForOrderResponse_DocumentOutput"
          },
          "Receipt": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Documents.GetAvailableDocumentsForOrderResponse_DocumentOutput"
          },
          "Type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.PrintPaperInvoice": {
        "required": [
          "StationID",
          "InvoiceID"
        ],
        "type": "object",
        "properties": {
          "InvoiceID": {
            "type": "integer"
          },
          "StationID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.PrintPaperOffer": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "StationID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.PrintPaperOrderConfirmation": {
        "required": [
          "StationID",
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "StationID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.PrintThermalGiftReceipt": {
        "required": [
          "StationID",
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Documents.PrintThermalGiftReceiptLine"
            }
          },
          "Name": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          },
          "Remark": {
            "type": "string"
          },
          "StationID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.PrintThermalGiftReceiptLine": {
        "required": [
          "OrderLineID",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.PrintThermalInvoice": {
        "required": [
          "StationID",
          "InvoiceID"
        ],
        "type": "object",
        "properties": {
          "InvoiceID": {
            "type": "integer"
          },
          "StationID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.PrintThermalOrderConfirmation": {
        "required": [
          "StationID",
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "StationID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.ProduceDocuments": {
        "required": [
          "DownloadInvoice",
          "OrderID",
          "PrintReceipt",
          "PrintPaymentProof",
          "EmailInvoice",
          "PrintInvoice"
        ],
        "type": "object",
        "properties": {
          "DownloadInvoice": {
            "type": "boolean"
          },
          "EmailAddress": {
            "type": "string"
          },
          "EmailInvoice": {
            "type": "boolean"
          },
          "InvoiceID": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          },
          "PrintInvoice": {
            "type": "boolean"
          },
          "PrintPaymentProof": {
            "type": "boolean"
          },
          "PrintReceipt": {
            "type": "boolean"
          },
          "StationID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.ProduceDocumentsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "InvoiceUrl": {
            "type": "string"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.ProduceInvoice": {
        "required": [
          "DownloadInvoice",
          "OrderID",
          "EmailInvoice",
          "PrintInvoice"
        ],
        "type": "object",
        "properties": {
          "DownloadInvoice": {
            "type": "boolean"
          },
          "EmailAddress": {
            "type": "string"
          },
          "EmailInvoice": {
            "type": "boolean"
          },
          "InvoiceID": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          },
          "PrintInvoice": {
            "type": "boolean"
          },
          "StationID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.ProducePurchaseOrderDocument": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.ProduceReceipt": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "InvoiceID": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          },
          "StationID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.ProduceReceiptResponse": {
        "required": [
          "PrintSuccessful"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "PrintSuccessful": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.ProduceShipmentDocuments": {
        "type": "object",
        "properties": {
          "LinesToShip": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Documents.ProduceShipmentDocuments_OrderLineDto"
            },
            "description": "Required when passing an `OrderID`."
          },
          "OrderID": {
            "type": "integer",
            "description": "Required when omitting `ShipmentID`."
          },
          "ShipmentID": {
            "type": "integer",
            "description": "Required when omitting `OrderID`."
          },
          "StationID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.ProduceShipmentDocuments_OrderLineDto": {
        "required": [
          "QuantityToShip",
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "QuantityToShip": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.ProduceShipmentDocumentsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ShipmentDocuments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Documents.ProduceShipmentDocumentsResponse_Model"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Documents.ProduceShipmentDocumentsResponse_Model": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Category": {
            "type": "string"
          },
          "ExpireDate": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "string",
            "format": "uuid"
          },
          "LocationType": {
            "type": "string"
          },
          "MimeType": {
            "type": "string"
          },
          "OriginalName": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "Url": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Dto.OrderBackfillInformation": {
        "type": "object",
        "properties": {
          "OriginalCreationDate": {
            "type": "string",
            "description": "Original date when this order was created",
            "format": "date-time"
          },
          "OriginalInvoiceDate": {
            "type": "string",
            "description": "Original date when this order was invoiced",
            "format": "date-time"
          },
          "OriginalInvoiceNumber": {
            "type": "string",
            "description": "Original invoicenumber of this order"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Dto.OrderCustomStatusModel": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Dto.OrderCustomTypeModel": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Dto.OrderDefinitionModel": {
        "type": "object",
        "properties": {
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrderDefinitionModel_Value"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrderDefinitionModel_Value"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Dto.OrderDefinitionModel_Value": {
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Title": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Dto.OrderDto": {
        "required": [
          "Type",
          "TotalAmount",
          "HasReturns",
          "TotalAmountInTax",
          "CreatedByID",
          "IsCaptured",
          "PickupOrganizationUnitID",
          "Properties",
          "TotalItems",
          "IsShipped",
          "ID",
          "CreationTime",
          "IsInvoiced",
          "OriginatingOrganizationUnitID",
          "IsTaxExempt",
          "NeedsExtendedCustomerInformation",
          "PreferredPriceDisplayMode",
          "IsDownPayment",
          "HasDelivery",
          "Status",
          "IsConfirmed",
          "IgnoreShippingCosts",
          "TotalTaxAmount",
          "AllowPartialFulfillment",
          "IsCompleted",
          "IsPaid",
          "IsPlaced",
          "SoldFromOrganizationUnitID",
          "TotalLineCount",
          "TotalAmountInvoiced",
          "IgnoreDiscounts",
          "IsOffer",
          "IsDelivered",
          "IgnoreGiftWrappingCosts",
          "Characteristics"
        ],
        "type": "object",
        "properties": {
          "AllowPartialFulfillment": {
            "type": "boolean"
          },
          "AutomaticCancellationDate": {
            "type": "string",
            "format": "date-time"
          },
          "BackendID": {
            "type": "string"
          },
          "BackendSystemID": {
            "type": "string"
          },
          "BackfillInformation": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrderBackfillInformation"
          },
          "Barcode": {
            "type": "string"
          },
          "BillingAddress": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDto"
          },
          "BillingAddressID": {
            "type": "integer"
          },
          "CaptureDate": {
            "type": "string",
            "format": "date-time"
          },
          "Characteristics": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderProperties"
          },
          "ClientOrderID": {
            "type": "string",
            "format": "uuid"
          },
          "CompletionDate": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/EVA.Core.Users.UserDto"
          },
          "CreatedByID": {
            "type": "integer"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "CurrencyID": {
            "type": "string"
          },
          "CustomFieldsV2": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.CustomFields.CustomFieldResponse"
            }
          },
          "CustomOrderTypeID": {
            "type": "integer"
          },
          "CustomStatusID": {
            "type": "integer"
          },
          "Customer": {
            "$ref": "#/components/schemas/EVA.Core.Users.UserDto"
          },
          "CustomerID": {
            "type": "integer"
          },
          "CustomerOrderID": {
            "type": "string"
          },
          "CustomerReference": {
            "type": "string"
          },
          "Definition": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrderDefinitionModel"
          },
          "DeliveryDate": {
            "type": "string",
            "format": "date-time"
          },
          "DisabledDiscounts": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "FiscalID": {
            "type": "string"
          },
          "FiscalRemark": {
            "type": "string"
          },
          "GlobalID": {
            "type": "string"
          },
          "HasDelivery": {
            "type": "boolean"
          },
          "HasReturns": {
            "type": "boolean"
          },
          "HoldStatusID": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "IdentificationID": {
            "type": "integer"
          },
          "IgnoreDiscounts": {
            "type": "boolean"
          },
          "IgnoreGiftWrappingCosts": {
            "type": "boolean"
          },
          "IgnoreShippingCosts": {
            "type": "boolean"
          },
          "InvoiceDate": {
            "type": "string",
            "format": "date-time"
          },
          "IsCaptured": {
            "type": "boolean"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "IsConfirmed": {
            "type": "boolean"
          },
          "IsDelivered": {
            "type": "boolean"
          },
          "IsDownPayment": {
            "type": "boolean"
          },
          "IsExpiredOffer": {
            "type": "boolean"
          },
          "IsInvoiced": {
            "type": "boolean"
          },
          "IsOffer": {
            "type": "boolean"
          },
          "IsPaid": {
            "type": "boolean"
          },
          "IsPlaced": {
            "type": "boolean"
          },
          "IsShipped": {
            "type": "boolean"
          },
          "IsTaxExempt": {
            "type": "boolean"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrderLineDto"
            }
          },
          "NeedsExtendedCustomerInformation": {
            "type": "boolean"
          },
          "OfferExpirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "OrderCustomStatus": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrderCustomStatusModel"
          },
          "OrderCustomType": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrderCustomTypeModel"
          },
          "OriginalTotalAmount": {
            "type": "number"
          },
          "OriginalTotalAmountInTax": {
            "type": "number"
          },
          "OriginatingOrganizationUnitData": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrganizationUnitData"
          },
          "OriginatingOrganizationUnitID": {
            "type": "integer"
          },
          "PaymentDate": {
            "type": "string",
            "format": "date-time"
          },
          "Payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Payments.Dto.PaymentTransactionDto"
            }
          },
          "PickupAddress": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDto"
          },
          "PickupAddressID": {
            "type": "integer"
          },
          "PickupOrganizationUnitData": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrganizationUnitData"
          },
          "PickupOrganizationUnitID": {
            "type": "integer"
          },
          "PlacementDate": {
            "type": "string",
            "format": "date-time"
          },
          "PreferredPriceDisplayMode": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrderPreferredPriceDisplayMode"
          },
          "PriceLists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Dto.PriceListModel"
            }
          },
          "Properties": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderProperties"
          },
          "Remark": {
            "type": "string"
          },
          "SelectedFulfillmentOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Dto.SelectedOrderFulfillmentOptions"
            }
          },
          "ShipFromOrganizationUnitData": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrganizationUnitData"
          },
          "ShipFromOrganizationUnitID": {
            "type": "integer"
          },
          "ShipToOrganizationUnitData": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrganizationUnitData"
          },
          "ShipToOrganizationUnitID": {
            "type": "integer"
          },
          "ShipmentDate": {
            "type": "string",
            "format": "date-time"
          },
          "ShippingAddress": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDto"
          },
          "ShippingAddressID": {
            "type": "integer"
          },
          "SoldFromOrganizationUnitData": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrganizationUnitData"
          },
          "SoldFromOrganizationUnitID": {
            "type": "integer"
          },
          "SoldToOrganizationUnitData": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrganizationUnitData"
          },
          "SoldToOrganizationUnitID": {
            "type": "integer"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderStatus"
          },
          "TaxFreeInformation": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.TaxFreeInformation"
          },
          "TaxTable": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.Dto.TaxAmount"
            }
          },
          "TotalAmount": {
            "type": "number"
          },
          "TotalAmountInTax": {
            "type": "number"
          },
          "TotalAmountInvoiced": {
            "type": "number"
          },
          "TotalItems": {
            "type": "integer"
          },
          "TotalLineCount": {
            "type": "integer"
          },
          "TotalTaxAmount": {
            "type": "number"
          },
          "TransferReference": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderTypes"
          },
          "UserAgentApplication": {
            "type": "string"
          },
          "UserAgentVersion": {
            "type": "string"
          },
          "VatNumber": {
            "type": "string"
          },
          "VisibilityGroupIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Dto.OrderLineDiscount": {
        "required": [
          "DiscountID",
          "DiscountAmount"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "DiscountAmount": {
            "type": "number"
          },
          "DiscountID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Dto.OrderLineDisplayProperties": {
        "type": "object",
        "properties": {
          "IsFree": {
            "type": "boolean"
          },
          "OriginalAmount": {
            "type": "number"
          },
          "OriginalAmountInTax": {
            "type": "number"
          },
          "OriginalUnitPrice": {
            "type": "number"
          },
          "OriginalUnitPriceInTax": {
            "type": "number"
          },
          "TotalAmount": {
            "type": "number"
          },
          "TotalAmountInTax": {
            "type": "number"
          },
          "UnitPrice": {
            "type": "number"
          },
          "UnitPriceInTax": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Dto.OrderLineDto": {
        "required": [
          "Type",
          "TotalAmount",
          "StockLabel",
          "TotalAmountInTax",
          "CreatedByID",
          "CommitmentStatus",
          "LineActionType",
          "QuantityOrdered",
          "IsShipped",
          "OrderID",
          "ID",
          "CreationTime",
          "IsInvoiced",
          "QuantityBackordered",
          "UnitPriceInTax",
          "IsCancelled",
          "DiscountAmount",
          "QuantityInvoiced",
          "QuantityDelivered",
          "TaxRate",
          "IsDigitalGiftCard",
          "NetTotalAmount",
          "TotalTaxAmount",
          "ShowTaxInfo",
          "QuantityShipped",
          "TaxCode",
          "QuantityCancelled",
          "IsCompleted",
          "QuantityOpen",
          "UnitPrice",
          "ExportStatusID",
          "NetTotalTaxAmount",
          "ModificationAllowed",
          "QuantityCommitted",
          "QuantityReserved",
          "ExternalModificationStatus",
          "TotalQuantityToShip",
          "CurrencyID",
          "QuantityReturned",
          "NetTotalAmountInTax"
        ],
        "type": "object",
        "properties": {
          "AdditionalDescription": {
            "type": "string"
          },
          "AvailabilityStatus": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderLineAvailabilityStatus"
          },
          "BackendReference": {
            "type": "string"
          },
          "Children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrderLineDto"
            }
          },
          "CommitmentStatus": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderLineCommitmentStatus"
          },
          "ContractNumber": {
            "type": "string"
          },
          "CreatedByID": {
            "type": "integer"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "CurrencyID": {
            "type": "string"
          },
          "CustomFieldsV2": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.CustomFields.CustomFieldResponse"
            }
          },
          "CustomOrderLineType": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "DiscountAmount": {
            "type": "number"
          },
          "DiscountBackendID": {
            "type": "string"
          },
          "DiscountCampaignName": {
            "type": "string"
          },
          "DiscountCouponCode": {
            "type": "string"
          },
          "DiscountID": {
            "type": "integer"
          },
          "Discounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrderLineDiscount"
            }
          },
          "DisplayPrice": {
            "type": "number"
          },
          "DisplayPriceInTax": {
            "type": "number"
          },
          "DisplayProperties": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrderLineDisplayProperties"
          },
          "ExpectedAvailabilityDate": {
            "type": "string",
            "format": "date-time"
          },
          "ExportStatusID": {
            "type": "integer"
          },
          "ExternalModificationStatus": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ExternalModificationStatuses"
          },
          "GroupID": {
            "type": "string",
            "format": "uuid"
          },
          "ID": {
            "type": "integer"
          },
          "ImageBlobID": {
            "type": "string",
            "format": "uuid"
          },
          "IsCancelled": {
            "type": "boolean"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "IsDigitalGiftCard": {
            "type": "boolean"
          },
          "IsInvoiced": {
            "type": "boolean"
          },
          "IsShipped": {
            "type": "boolean"
          },
          "LastModificationTime": {
            "type": "string",
            "format": "date-time"
          },
          "LineActionType": {
            "$ref": "#/components/schemas/EVA.Core.Enumerations.LineActionTypes"
          },
          "ModificationAllowed": {
            "type": "boolean"
          },
          "NetTotalAmount": {
            "type": "number"
          },
          "NetTotalAmountInTax": {
            "type": "number"
          },
          "NetTotalTaxAmount": {
            "type": "number"
          },
          "OrderID": {
            "type": "integer"
          },
          "OriginalTotalAmount": {
            "type": "number"
          },
          "OriginalTotalAmountInTax": {
            "type": "number"
          },
          "ParentID": {
            "type": "integer"
          },
          "Product": {
            "$ref": "#/components/schemas/EVA.Core.Products.Dto.ProductDto"
          },
          "ProductBundleLineID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "ProductVariation": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "QuantityBackordered": {
            "type": "integer"
          },
          "QuantityCancelled": {
            "type": "integer"
          },
          "QuantityCommitted": {
            "type": "integer"
          },
          "QuantityDelivered": {
            "type": "integer"
          },
          "QuantityInvoiced": {
            "type": "integer"
          },
          "QuantityOpen": {
            "type": "integer"
          },
          "QuantityOrdered": {
            "type": "integer"
          },
          "QuantityReserved": {
            "type": "integer"
          },
          "QuantityReturned": {
            "type": "integer"
          },
          "QuantityShipped": {
            "type": "integer"
          },
          "Reference": {
            "type": "string"
          },
          "RefundCorrectionReason": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.RefundCorrectionReasonDto"
          },
          "RelatedOrderLineID": {
            "type": "integer"
          },
          "Remark": {
            "type": "string"
          },
          "RequestedDate": {
            "type": "string",
            "format": "date-time"
          },
          "ReturnReason": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "ReturnedOrderID": {
            "type": "integer"
          },
          "ReturnedOrderLineID": {
            "type": "integer"
          },
          "SerialNumber": {
            "type": "string"
          },
          "ShippingMethod": {
            "$ref": "#/components/schemas/EVA.Core.Shipping.ShippingMethodDto"
          },
          "ShippingMethodID": {
            "type": "integer"
          },
          "ShowTaxInfo": {
            "type": "boolean"
          },
          "SoldByID": {
            "type": "integer"
          },
          "StockLabel": {
            "type": "integer"
          },
          "TaxCode": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "TaxExemptionCode": {
            "type": "string"
          },
          "TaxExemptionReason": {
            "type": "string"
          },
          "TaxRate": {
            "type": "number"
          },
          "TotalAmount": {
            "type": "number"
          },
          "TotalAmountInTax": {
            "type": "number"
          },
          "TotalQuantityToShip": {
            "type": "integer"
          },
          "TotalTaxAmount": {
            "type": "number"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderLineTypes"
          },
          "UnitPrice": {
            "type": "number"
          },
          "UnitPriceBeforeCorrection": {
            "type": "number"
          },
          "UnitPriceCorrectionReason": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "UnitPriceInTax": {
            "type": "number"
          },
          "UnitPricePriceListID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Dto.OrderPreferredPriceDisplayMode": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Orders.Dto.OrganizationUnitData": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Dto.PriceListModel": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Dto.RefundCorrectionReasonDto": {
        "required": [
          "ID",
          "Name"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Dto.SelectedOrderFulfillmentOptions": {
        "type": "object",
        "properties": {
          "OrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "SameDayDelivery": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.SelectedOrderFulfillmentOptions_SameDayDeliveryOptions"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Dto.SelectedOrderFulfillmentOptions_SameDayDeliveryOptions": {
        "required": [
          "UseSameDayDelivery"
        ],
        "type": "object",
        "properties": {
          "UseSameDayDelivery": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Dto.TaxFreeInformation": {
        "required": [
          "IsVoided",
          "IsIssued"
        ],
        "type": "object",
        "properties": {
          "FormIdentifier": {
            "type": "string"
          },
          "Handler": {
            "type": "string"
          },
          "IsIssued": {
            "type": "boolean"
          },
          "IsVoided": {
            "type": "boolean"
          },
          "UserIdentifier": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.DuplicateOrder": {
        "required": [
          "IncludeBundles",
          "OrderID",
          "IncludeGiftWrapping",
          "IgnoreShippingCosts"
        ],
        "type": "object",
        "properties": {
          "IgnoreShippingCosts": {
            "type": "boolean"
          },
          "IncludeBundles": {
            "type": "boolean"
          },
          "IncludeGiftWrapping": {
            "type": "boolean"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.DuplicateOrderResponse": {
        "required": [
          "DuplicatedOrderID"
        ],
        "type": "object",
        "properties": {
          "DuplicatedOrderID": {
            "type": "integer"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ExemptOrderFromTax": {
        "required": [
          "OrderID",
          "TaxExemptionReason"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "TaxExemptionCode": {
            "type": "string",
            "description": "A code identifying the tax exemption."
          },
          "TaxExemptionReason": {
            "type": "string",
            "description": "A longer description with the justification for the tax exemption."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Export.OrderExportValidationResult": {
        "required": [
          "Result",
          "OrderID",
          "Messages"
        ],
        "type": "object",
        "properties": {
          "Messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Export.OrderExportValidationResultMessage"
            }
          },
          "OrderID": {
            "type": "integer"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Export.OrderExportValidationResults"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Export.OrderExportValidationResultMessage": {
        "required": [
          "Message",
          "Code"
        ],
        "type": "object",
        "properties": {
          "Code": {
            "type": "string"
          },
          "Message": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Export.OrderExportValidationResults": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Orders.ForcePlaceOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ForcePlaceOrderResponse": {
        "required": [
          "ValidationResult"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ValidationResult": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Export.OrderExportValidationResult"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ForceVerifyCustomer": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Fulfillment.OrderFulfillmentLineStatuses": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData": {
        "type": "object",
        "properties": {
          "Fulfillments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_Fulfillment"
            }
          },
          "OrderLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_OrderLineResult"
            }
          },
          "Rejections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_SupplierRejection"
            }
          },
          "Sheets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_Sheet"
            }
          },
          "ValidSuppliers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_ValidSupplier"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_Fulfillment": {
        "required": [
          "Score"
        ],
        "type": "object",
        "properties": {
          "Score": {
            "type": "number"
          },
          "ScoreExplanation": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_FulfillmentScoreExplanation"
          },
          "Shipments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_Shipment"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_FulfillmentMethod": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Reasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_RejectionReason"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_FulfillmentScoreExplanation": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ScoreExplanations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_ScoreExplanation"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_OrderLine": {
        "required": [
          "ID",
          "Score",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          },
          "Score": {
            "type": "number"
          },
          "ScoreExplanations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_ScoreExplanation"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_OrderLineResult": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "GroupID": {
            "type": "string",
            "format": "uuid"
          },
          "ID": {
            "type": "integer"
          },
          "PotentialSuppliers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_OrderLineResult_PotentialSupplier"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_OrderLineResult_PotentialSupplier": {
        "required": [
          "Score",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          },
          "Score": {
            "type": "number"
          },
          "Sheet": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_RejectionReason": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "OrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "ProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "Reason": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_ScoreExplanation": {
        "required": [
          "NewScore",
          "DeltaScore",
          "PreviousScore"
        ],
        "type": "object",
        "properties": {
          "DeltaScore": {
            "type": "number"
          },
          "Description": {
            "type": "string"
          },
          "Expression": {
            "type": "string"
          },
          "NewScore": {
            "type": "number"
          },
          "PreviousScore": {
            "type": "number"
          },
          "Variables": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_Sheet": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_Shipment": {
        "required": [
          "Score"
        ],
        "type": "object",
        "properties": {
          "Data": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "FulfillmentAction": {
            "type": "string"
          },
          "OrderLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_OrderLine"
            }
          },
          "Score": {
            "type": "number"
          },
          "ScoreExplanation": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_FulfillmentScoreExplanation"
          },
          "Sheet": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_Sheet"
          },
          "Supplier": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_Supplier"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_Supplier": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_SupplierRejection": {
        "type": "object",
        "properties": {
          "FulfillmentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_FulfillmentMethod"
            }
          },
          "SupplierOrganizationUnitID": {
            "type": "integer"
          },
          "SupplierOrganizationUnitName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_ValidSupplier": {
        "required": [
          "Score",
          "SupplierID"
        ],
        "type": "object",
        "properties": {
          "FulfillableOrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "FulfillmentMethod": {
            "type": "string"
          },
          "Score": {
            "type": "number"
          },
          "ScoreExplanations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Fulfillment.OrderFulfillmentOrchestrationData_ScoreExplanation"
            }
          },
          "SupplierID": {
            "type": "integer"
          },
          "SupplierName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Fulfillment.PotentialFulfillmentOptionBlockingReasons": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetConfigurableOrderView": {
        "required": [
          "IncludeAllChildren",
          "LogicalLevel",
          "OrderID",
          "GroupByPropertyType"
        ],
        "type": "object",
        "properties": {
          "GroupByPropertyType": {
            "type": "string"
          },
          "IncludeAllChildren": {
            "type": "boolean"
          },
          "LogicalLevel": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          },
          "ProductProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetConfigurableOrderViewResponse": {
        "required": [
          "TotalAmount",
          "TotalAmountInTax"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OtherLines": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EVA.Core.Orders.SimpleOrderLine"
              }
            }
          },
          "PropertyGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.PropertyGroup"
            }
          },
          "TotalAmount": {
            "type": "number"
          },
          "TotalAmountInTax": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetContractNumber": {
        "required": [
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetContractNumberResponse": {
        "type": "object",
        "properties": {
          "ContractNumber": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetCustomOrderTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetCustomOrderTypesResponse": {
        "type": "object",
        "properties": {
          "CustomOrderTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.GetCustomOrderTypesResponse_CustomOrderType"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetCustomOrderTypesResponse_CustomOrderType": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetCustomerOrderVerificationCode": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetDeliveryOrderData": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetDeliveryOrderDataResponse": {
        "type": "object",
        "properties": {
          "DeliveryOrderData": {
            "$ref": "#/components/schemas/EVA.Core.Orders.DeliveryOrderData"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetDiscountProductOptionsForOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "IncludedProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetDiscountProductOptionsForOrderLine": {
        "required": [
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "IncludedProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "OrderLineID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetDiscountProductOptionsForOrderLineResponse": {
        "required": [
          "DiscountID"
        ],
        "type": "object",
        "properties": {
          "ActionSelectionData": {
            "type": "object"
          },
          "ActionType": {
            "type": "string"
          },
          "CurrentSelection": {
            "type": "integer"
          },
          "DiscountID": {
            "type": "integer"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "SelectionOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetDiscountProductOptionsForOrderResponse": {
        "type": "object",
        "properties": {
          "DiscountOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.GetDiscountProductOptionsForOrderResponse_DiscountOption"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetDiscountProductOptionsForOrderResponse_DiscountLineOption": {
        "required": [
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "CurrentSelection": {
            "type": "integer"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "SelectionOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetDiscountProductOptionsForOrderResponse_DiscountOption": {
        "required": [
          "DiscountID"
        ],
        "type": "object",
        "properties": {
          "ActionSelectionData": {
            "type": "object"
          },
          "ActionType": {
            "type": "string"
          },
          "DiscountID": {
            "type": "integer"
          },
          "LineOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.GetDiscountProductOptionsForOrderResponse_DiscountLineOption"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetEmployeeOrderVerificationCode": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetFiscalOrderData": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetFiscalOrderDataResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "FiscalID": {
            "type": "string"
          },
          "FiscalRemark": {
            "type": "string"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "VatNumber": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "AdditionalOrderDataOptions": {
            "$ref": "#/components/schemas/EVA.Core.Orders.AdditionalOrderDataOptions"
          },
          "IncludeAllPayments": {
            "type": "boolean"
          },
          "OrderID": {
            "type": "integer"
          },
          "ProductProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ShowOnlyShippableLines": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrderEventDetails": {
        "required": [
          "OrderEventID"
        ],
        "type": "object",
        "properties": {
          "OrderEventID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrderEventDetailsResponse": {
        "type": "object",
        "properties": {
          "Details": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrderEventsForOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrderEventsForOrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderEventsForOrderResponse_OrderEvent"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrderEventsForOrderResponse_OrderEvent": {
        "required": [
          "Success"
        ],
        "type": "object",
        "properties": {
          "Attempts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderEventsForOrderResponse_OrderEventAttempt"
            }
          },
          "DeliveredAt": {
            "type": "string",
            "format": "date-time"
          },
          "OrderEventID": {
            "type": "string"
          },
          "Reason": {
            "type": "string"
          },
          "Success": {
            "type": "boolean"
          },
          "Target": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrderEventsForOrderResponse_OrderEventAttempt": {
        "required": [
          "OrderEventID",
          "Success",
          "Timestamp"
        ],
        "type": "object",
        "properties": {
          "OrderEventID": {
            "type": "integer"
          },
          "Reason": {
            "type": "string"
          },
          "Success": {
            "type": "boolean"
          },
          "Timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrderExportByID": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrderExportByIDResponse": {
        "required": [
          "OrderID",
          "ID",
          "CreationTime",
          "IsDelivery",
          "ShipToOrganizationUnitID",
          "Status"
        ],
        "type": "object",
        "properties": {
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "IsDelivery": {
            "type": "boolean"
          },
          "LastModificationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderExportByIDResponse_OrderExportLineDto"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Name": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          },
          "ShipFromOrganizationUnitID": {
            "type": "integer"
          },
          "ShipFromOrganizationUnitName": {
            "type": "string"
          },
          "ShipToOrganizationUnitID": {
            "type": "integer"
          },
          "ShipToOrganizationUnitName": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.TransputJobStatuses"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrderExportByIDResponse_OrderExportLineDto": {
        "required": [
          "QuantityExported",
          "OrderLineID",
          "ID",
          "CreationTime",
          "QuantityBackordered",
          "QuantityCancelled"
        ],
        "type": "object",
        "properties": {
          "BackendReference": {
            "type": "string"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer"
          },
          "LastModificationTime": {
            "type": "string",
            "format": "date-time"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "QuantityBackordered": {
            "type": "integer"
          },
          "QuantityCancelled": {
            "type": "integer"
          },
          "QuantityExported": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrderExportDocuments": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrderExportDocumentsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "RequestDocuments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.TransputJobs.TransputJobDocument"
            }
          },
          "ResponseDocuments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.TransputJobs.TransputJobDocument"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrderLinkTypeByID": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrderLinkTypeByIDResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrderLinkType": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderLinkType"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrderLinkTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrderLinkTypesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrderLinkTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.OrderLinkType"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrderLinks": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrderLinksResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "PrimaryRelations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.SingleOrderLink"
            }
          },
          "RelatedRelations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.SingleOrderLink"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrderResponse": {
        "required": [
          "HasMoreLines"
        ],
        "type": "object",
        "properties": {
          "AdditionalOrderData": {
            "$ref": "#/components/schemas/EVA.Core.Orders.AdditionalOrderData"
          },
          "Amounts": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OpenOrderAmounts"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "HasMoreLines": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrderDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrderStatistics": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrderStatisticsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Statistics": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderStatistics"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrderSummary": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "ProductProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrderSummaryForShipping": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrderSummaryForShippingResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderSummaryForShippingResponse_OrderLineSummary"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrderSummaryForShippingResponse_OrderLineSummary": {
        "required": [
          "ID",
          "QuantityShipped",
          "QuantityOpen",
          "TotalQuantityToShip"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "QuantityOpen": {
            "type": "integer"
          },
          "QuantityShipped": {
            "type": "integer"
          },
          "TotalQuantityToShip": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrderSummaryResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Amounts": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OpenOrderAmounts"
          },
          "BillingAddress": {
            "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderSummaryResponse_AddressModel"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderSummaryResponse_OrderLineModel"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ShippingAddress": {
            "$ref": "#/components/schemas/EVA.Core.Orders.GetOrderSummaryResponse_AddressModel"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrderSummaryResponse_AddressModel": {
        "type": "object",
        "properties": {
          "Address1": {
            "type": "string"
          },
          "Address2": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "CountryID": {
            "type": "string"
          },
          "ZipCode": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetOrderSummaryResponse_OrderLineModel": {
        "required": [
          "Type",
          "QuantityExported",
          "QuantityOrdered",
          "UnitPriceInTax",
          "DiscountAmount",
          "QuantityCancelled",
          "IsPlaced",
          "NetTotalAmountInTax"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "DiscountAmount": {
            "type": "number"
          },
          "IsPlaced": {
            "type": "boolean"
          },
          "NetTotalAmountInTax": {
            "type": "number"
          },
          "OriginalTotalAmountInTax": {
            "type": "number"
          },
          "ParentID": {
            "type": "integer"
          },
          "Product": {
            "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
          },
          "QuantityCancelled": {
            "type": "integer"
          },
          "QuantityExported": {
            "type": "integer"
          },
          "QuantityOrdered": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderLineTypes"
          },
          "UnitPriceInTax": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetPendingShipmentInformationForOrderLines": {
        "required": [
          "Lines"
        ],
        "type": "object",
        "properties": {
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.GetPendingShipmentInformationForOrderLines_OrderLine"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetPendingShipmentInformationForOrderLines_OrderLine": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetPendingShipmentInformationForOrderLinesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.GetPendingShipmentInformationForOrderLinesResponse_LineInfo"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetPendingShipmentInformationForOrderLinesResponse_LineInfo": {
        "required": [
          "ID",
          "QuantityShipped",
          "QuantityShippedWithPending",
          "QuantityOpenWithPending",
          "QuantityOpen"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "QuantityOpen": {
            "type": "integer"
          },
          "QuantityOpenWithPending": {
            "type": "integer"
          },
          "QuantityShipped": {
            "type": "integer"
          },
          "QuantityShippedWithPending": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetRelatedOrderLines": {
        "required": [
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetRelatedOrderLinesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.GetRelatedOrderLinesResponse_Model"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetRelatedOrderLinesResponse_Model": {
        "required": [
          "Type",
          "TotalAmount",
          "StockLabel",
          "TotalAmountInTax",
          "CreatedByID",
          "OrderType",
          "CommitmentStatus",
          "LineActionType",
          "QuantityOrdered",
          "IsShipped",
          "OrderID",
          "ID",
          "CreationTime",
          "IsInvoiced",
          "QuantityBackordered",
          "UnitPriceInTax",
          "IsCancelled",
          "DiscountAmount",
          "QuantityInvoiced",
          "QuantityDelivered",
          "TaxRate",
          "IsDigitalGiftCard",
          "NetTotalAmount",
          "TotalTaxAmount",
          "ShowTaxInfo",
          "QuantityShipped",
          "TaxCode",
          "QuantityCancelled",
          "IsCompleted",
          "QuantityOpen",
          "UnitPrice",
          "ExportStatusID",
          "NetTotalTaxAmount",
          "ModificationAllowed",
          "QuantityCommitted",
          "QuantityReserved",
          "ExternalModificationStatus",
          "TotalQuantityToShip",
          "CurrencyID",
          "QuantityReturned",
          "NetTotalAmountInTax"
        ],
        "type": "object",
        "properties": {
          "AdditionalDescription": {
            "type": "string"
          },
          "AvailabilityStatus": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderLineAvailabilityStatus"
          },
          "BackendReference": {
            "type": "string"
          },
          "Children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrderLineDto"
            }
          },
          "CommitmentStatus": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderLineCommitmentStatus"
          },
          "ContractNumber": {
            "type": "string"
          },
          "CreatedByID": {
            "type": "integer"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "CurrencyID": {
            "type": "string"
          },
          "CustomFieldsV2": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.CustomFields.CustomFieldResponse"
            }
          },
          "CustomOrderLineType": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "DiscountAmount": {
            "type": "number"
          },
          "DiscountBackendID": {
            "type": "string"
          },
          "DiscountCampaignName": {
            "type": "string"
          },
          "DiscountCouponCode": {
            "type": "string"
          },
          "DiscountID": {
            "type": "integer"
          },
          "Discounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrderLineDiscount"
            }
          },
          "DisplayPrice": {
            "type": "number"
          },
          "DisplayPriceInTax": {
            "type": "number"
          },
          "DisplayProperties": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrderLineDisplayProperties"
          },
          "ExpectedAvailabilityDate": {
            "type": "string",
            "format": "date-time"
          },
          "ExportStatusID": {
            "type": "integer"
          },
          "ExternalModificationStatus": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ExternalModificationStatuses"
          },
          "GroupID": {
            "type": "string",
            "format": "uuid"
          },
          "ID": {
            "type": "integer"
          },
          "ImageBlobID": {
            "type": "string",
            "format": "uuid"
          },
          "IsCancelled": {
            "type": "boolean"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "IsDigitalGiftCard": {
            "type": "boolean"
          },
          "IsInvoiced": {
            "type": "boolean"
          },
          "IsShipped": {
            "type": "boolean"
          },
          "LastModificationTime": {
            "type": "string",
            "format": "date-time"
          },
          "LineActionType": {
            "$ref": "#/components/schemas/EVA.Core.Enumerations.LineActionTypes"
          },
          "ModificationAllowed": {
            "type": "boolean"
          },
          "NetTotalAmount": {
            "type": "number"
          },
          "NetTotalAmountInTax": {
            "type": "number"
          },
          "NetTotalTaxAmount": {
            "type": "number"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderTypes"
          },
          "OriginalTotalAmount": {
            "type": "number"
          },
          "OriginalTotalAmountInTax": {
            "type": "number"
          },
          "ParentID": {
            "type": "integer"
          },
          "Product": {
            "$ref": "#/components/schemas/EVA.Core.Products.Dto.ProductDto"
          },
          "ProductBundleLineID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "ProductVariation": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "QuantityBackordered": {
            "type": "integer"
          },
          "QuantityCancelled": {
            "type": "integer"
          },
          "QuantityCommitted": {
            "type": "integer"
          },
          "QuantityDelivered": {
            "type": "integer"
          },
          "QuantityInvoiced": {
            "type": "integer"
          },
          "QuantityOpen": {
            "type": "integer"
          },
          "QuantityOrdered": {
            "type": "integer"
          },
          "QuantityReserved": {
            "type": "integer"
          },
          "QuantityReturned": {
            "type": "integer"
          },
          "QuantityShipped": {
            "type": "integer"
          },
          "Reference": {
            "type": "string"
          },
          "RefundCorrectionReason": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.RefundCorrectionReasonDto"
          },
          "RelatedOrderLineID": {
            "type": "integer"
          },
          "Remark": {
            "type": "string"
          },
          "RequestedDate": {
            "type": "string",
            "format": "date-time"
          },
          "ReturnReason": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "ReturnedOrderID": {
            "type": "integer"
          },
          "ReturnedOrderLineID": {
            "type": "integer"
          },
          "SerialNumber": {
            "type": "string"
          },
          "ShipFromOrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Orders.GetRelatedOrderLinesResponse_OrganizationUnit"
          },
          "ShippingMethod": {
            "$ref": "#/components/schemas/EVA.Core.Shipping.ShippingMethodDto"
          },
          "ShippingMethodID": {
            "type": "integer"
          },
          "ShowTaxInfo": {
            "type": "boolean"
          },
          "SoldByID": {
            "type": "integer"
          },
          "SoldFromOrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Orders.GetRelatedOrderLinesResponse_OrganizationUnit"
          },
          "StockLabel": {
            "type": "integer"
          },
          "TaxCode": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "TaxExemptionCode": {
            "type": "string"
          },
          "TaxExemptionReason": {
            "type": "string"
          },
          "TaxRate": {
            "type": "number"
          },
          "TotalAmount": {
            "type": "number"
          },
          "TotalAmountInTax": {
            "type": "number"
          },
          "TotalQuantityToShip": {
            "type": "integer"
          },
          "TotalTaxAmount": {
            "type": "number"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderLineTypes"
          },
          "UnitPrice": {
            "type": "number"
          },
          "UnitPriceBeforeCorrection": {
            "type": "number"
          },
          "UnitPriceCorrectionReason": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "UnitPriceInTax": {
            "type": "number"
          },
          "UnitPricePriceListID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetRelatedOrderLinesResponse_OrganizationUnit": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetRelatedOrders": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetRelatedOrdersResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.GetRelatedOrdersResponse_Model"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetRelatedOrdersResponse_Model": {
        "required": [
          "TypeID",
          "RelatedOrderID",
          "CreationTime"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string"
          },
          "RelatedOrderID": {
            "type": "integer"
          },
          "ShipFromOrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Orders.GetRelatedOrdersResponse_NamedDto"
          },
          "SoldFromOrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Orders.GetRelatedOrdersResponse_NamedDto"
          },
          "TypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetRelatedOrdersResponse_NamedDto": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetRequiredDataForOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "RequiredFor": {
            "$ref": "#/components/schemas/EVA.Core.Validation.RequiredFor"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetRequiredDataForOrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "RequiredData": {
            "$ref": "#/components/schemas/EVA.Core.Validation.RequiredData"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetReturnableStatusForOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetReturnableStatusForOrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ReturnableStatusForOrderLine"
            }
          },
          "ReturnSets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.OrderLinesReturnSet"
            }
          },
          "StockOrganizationUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.StockOrganizationUnit"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetSalesTaxEstimateForOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetShippingMethodsForOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetShippingMethodsForOrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ShippingMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Shipping.ShippingMethodByOrderLineDto"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetTemporaryTokenForOrder": {
        "required": [
          "OrderID",
          "EmailAddress"
        ],
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetTemporaryTokenForOrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Token": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetTransportOrderLineData": {
        "required": [
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetTransportOrderLineDataResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "TransportOrderLineData": {
            "$ref": "#/components/schemas/EVA.Core.Orders.TransportOrderLineData"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetVerificationCodeResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "VerificationCode": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetWarehouseOrderData": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GetWarehouseOrderDataResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "WarehouseOrderData": {
            "$ref": "#/components/schemas/EVA.Core.Orders.WarehouseOrderData"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GiftWrapping.GetAvailableGiftWrappingLinesForOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GiftWrapping.GetAvailableGiftWrappingLinesForOrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.GiftWrapping.GiftWrappingLineAvailabilityDto"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GiftWrapping.GetGiftWrappingOptionsForOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GiftWrapping.GetGiftWrappingOptionsForOrderResponse": {
        "required": [
          "WrapIndividually",
          "WrapOrder"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "GiftWraps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.GiftWrapping.GiftWrapDto"
            }
          },
          "GreetingCardProductID": {
            "type": "integer"
          },
          "Message": {
            "type": "string"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "WrapIndividually": {
            "type": "boolean"
          },
          "WrapOrder": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GiftWrapping.SetGiftWrappingOptionsOnOrder": {
        "required": [
          "OrderID",
          "WrapIndividually",
          "WrapOrder"
        ],
        "type": "object",
        "properties": {
          "GiftWraps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.GiftWrapping.GiftWrapDto"
            }
          },
          "GreetingCardProductID": {
            "type": "integer"
          },
          "Message": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          },
          "WrapIndividually": {
            "type": "boolean"
          },
          "WrapOrder": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.GiftWrappingOptionsForOrder": {
        "required": [
          "WrapIndividually",
          "WrapOrder"
        ],
        "type": "object",
        "properties": {
          "GiftWraps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.GiftWrapping.GiftWrapDto"
            }
          },
          "GreetingCardProductID": {
            "type": "integer"
          },
          "Message": {
            "type": "string"
          },
          "WrapIndividually": {
            "type": "boolean"
          },
          "WrapOrder": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Interbranch.CreateInterbranchOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "ExpectedDeliveryDate": {
            "type": "string",
            "description": "The date when the shipment is expected in the other store",
            "format": "date-time"
          },
          "OrderID": {
            "type": "integer",
            "description": "The Order to convert to an interbranch order."
          },
          "OrganizationUnitID": {
            "type": "integer",
            "description": "The destination OrganizationUnit of this Interbranch order. This will become the SoldToOrganizationUnit of the order."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Interbranch.InterbranchOrganizationUnit": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Interbranch.ListInterbranchOrganizationUnitForOrder": {
        "required": [
          "ExcludeClosed",
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "ExcludeClosed": {
            "type": "boolean"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Interbranch.ListInterbranchOrganizationUnitForOrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrganizationUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Interbranch.InterbranchOrganizationUnit"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Interbranch.PrintInterbranchOrderReceipt": {
        "required": [
          "StationID",
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "StationID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Interbranch.UpdateInterbranchOrder": {
        "required": [
          "OrderID",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "ExpectedDeliveryDate": {
            "type": "string",
            "description": "The date when the shipment is expected in the other store",
            "format": "date-time"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.LineDiscountProductOption": {
        "required": [
          "OrderLineID",
          "DiscountID"
        ],
        "type": "object",
        "properties": {
          "ActionType": {
            "type": "string"
          },
          "CurrentSelection": {
            "type": "integer"
          },
          "DiscountID": {
            "type": "integer"
          },
          "Options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
            }
          },
          "OrderLineID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListAvailableShippingMethods": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "OrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListAvailableShippingMethodsResponse": {
        "type": "object",
        "properties": {
          "AvailableShippingMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Shipping.ShippingMethodByOrderLineDto"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListExternalOrderStatusForOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListExternalOrderStatusForOrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ListExternalOrderStatusForOrderResponse_ExternalOrderStatus"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListExternalOrderStatusForOrderResponse_ExternalOrderStatus": {
        "required": [
          "CanPollStatus"
        ],
        "type": "object",
        "properties": {
          "CanPollStatus": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListInvoicesForOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListInvoicesForOrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ListInvoicesForOrderResponse_Invoice"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListInvoicesForOrderResponse_Invoice": {
        "required": [
          "TotalAmount",
          "CreatedByID",
          "OpenAmount",
          "ID",
          "CreationTime",
          "PaidAmount"
        ],
        "type": "object",
        "properties": {
          "CreatedByID": {
            "type": "integer"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer"
          },
          "InvoiceDate": {
            "type": "string",
            "format": "date-time"
          },
          "InvoiceNumber": {
            "type": "string"
          },
          "OpenAmount": {
            "type": "number"
          },
          "PaidAmount": {
            "type": "number"
          },
          "Payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ListInvoicesForOrderResponse_Invoice_Payment"
            }
          },
          "TotalAmount": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListInvoicesForOrderResponse_Invoice_Payment": {
        "required": [
          "PaymentTransactionID",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "PaymentTransactionID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderCustomStatus": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Orders.ListOrderCustomStatusFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderCustomStatusFilter": {
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderCustomStatusResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Orders.ListOrderCustomStatusResponse_ListOrderCustomStatusModel"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderCustomStatusResponse_ListOrderCustomStatusModel": {
        "required": [
          "ID",
          "Name"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderCustomTypes": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Orders.ListOrderCustomTypesFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderCustomTypesFilter": {
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderCustomTypesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Orders.ListOrderCustomTypesResponse_ListOrderCustomTypeModel"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderCustomTypesResponse_ListOrderCustomTypeModel": {
        "required": [
          "ID",
          "Name"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderExportsForOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderExportsForOrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Orders.ListOrderExportsForOrderResponse_OrderExportDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderExportsForOrderResponse_OrderExportDto": {
        "required": [
          "ID",
          "CreationTime",
          "Status"
        ],
        "type": "object",
        "properties": {
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer"
          },
          "LastModificationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Name": {
            "type": "string"
          },
          "ShipToOrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderExportsForOrderResponse_OrganizationUnitDto"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.TransputJobStatuses"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderExportsForOrderResponse_OrganizationUnitDto": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderFulfillmentItem": {
        "required": [
          "OrderID",
          "ID",
          "CreationTime"
        ],
        "type": "object",
        "properties": {
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Data": {
            "type": "object"
          },
          "FulfillmentMethod": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "LastModificationTime": {
            "type": "string",
            "format": "date-time"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderSoldFromOrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderFulfillmentLineOrganizationUnit"
          },
          "ReferenceNumber": {
            "type": "string"
          },
          "Source": {
            "type": "string"
          },
          "Statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Fulfillment.OrderFulfillmentLineStatuses"
            }
          },
          "SupplierOrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderFulfillmentLineOrganizationUnit"
          },
          "TransputJobID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderFulfillmentLineItem": {
        "required": [
          "OrderLineID",
          "OrderID",
          "ID",
          "CreationTime",
          "Status",
          "Quantity",
          "OrderFulfillmentID",
          "UnitPrice"
        ],
        "type": "object",
        "properties": {
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "CurrencyID": {
            "type": "string"
          },
          "Data": {
            "type": "object"
          },
          "FinancialOrderFulfillmentLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderFulfillmentLineItem_FinancialOrderFulfillmentLine"
            }
          },
          "FulfillmentMethod": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "LastModificationTime": {
            "type": "string",
            "format": "date-time"
          },
          "OrderFulfillmentID": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "Product": {
            "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderFulfillmentLineItem_OrderLineProduct"
          },
          "Quantity": {
            "type": "integer"
          },
          "Source": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Fulfillment.OrderFulfillmentLineStatuses"
          },
          "SupplierOrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderFulfillmentLineOrganizationUnit"
          },
          "TransputJobID": {
            "type": "integer"
          },
          "UnitPrice": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderFulfillmentLineItem_FinancialOrderFulfillmentLine": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "CurrencyID": {
            "type": "string"
          },
          "DestinationOrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderFulfillmentLineOrganizationUnit"
          },
          "ID": {
            "type": "integer"
          },
          "SequenceID": {
            "type": "integer"
          },
          "SourceOrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderFulfillmentLineOrganizationUnit"
          },
          "UnitPrice": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderFulfillmentLineItem_OrderLineProduct": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "CustomID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderFulfillmentLinesFilter": {
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Fulfillment.OrderFulfillmentLineStatuses"
          },
          "SupplierOrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderFulfillmentRejectionsFilter": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "FulfillmentMethod": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "Reason": {
            "type": "string"
          },
          "SupplierOrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderFulfillmentRejectionsItem": {
        "required": [
          "OrderID",
          "ID",
          "CreationTime",
          "FulfillmentMethod",
          "Reason"
        ],
        "type": "object",
        "properties": {
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string"
          },
          "FulfillmentMethod": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "Reason": {
            "type": "string"
          },
          "ShippingAddress": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDto"
          },
          "SupplierOrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderFulfillmentLineOrganizationUnit"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderFulfillmentsFilter": {
        "type": "object",
        "properties": {
          "OrderFulfillmentReferenceNumber": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          },
          "SoldFromOrganizationUnitID": {
            "type": "integer"
          },
          "Statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Fulfillment.OrderFulfillmentLineStatuses"
            }
          },
          "SupplierOrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderLedgerFilter": {
        "type": "object",
        "properties": {
          "TypeIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderLedgerForOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Orders.ListOrderLedgerFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderLedgerForOrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Orders.ListOrderLedgerForOrderResponse_OrderLedgerDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderLedgerForOrderResponse_OrderLedgerDto": {
        "required": [
          "CreatedByID",
          "TypeID",
          "OrderID",
          "ID",
          "CreationTime"
        ],
        "type": "object",
        "properties": {
          "CreatedBy": {
            "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderLedgerForOrderResponse_UserDto"
          },
          "CreatedByID": {
            "type": "integer"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "NewValue": {
            "type": "string"
          },
          "OldValue": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderLedgerForOrderResponse_OrderLedgerTypeDto"
          },
          "TypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderLedgerForOrderResponse_OrderLedgerTypeDto": {
        "required": [
          "ID",
          "IsCustom"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "IsCustom": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderLedgerForOrderResponse_UserDto": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "FullName": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderLines": {
        "required": [
          "OrderID",
          "UseHierarchy"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Orders.ListOrderLinesFilter"
          },
          "ProductProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "UseHierarchy": {
            "type": "boolean",
            "description": "When specified, order lines are returned nested under their parents recursively within their `Children` property. Filters will only be applied to the parent."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderLinesFilter": {
        "required": [
          "OnlyShippableLines",
          "Shippable",
          "Invoiceable"
        ],
        "type": "object",
        "properties": {
          "IDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "Invoiceable": {
            "type": "boolean"
          },
          "OnlyShippableLines": {
            "type": "boolean"
          },
          "ProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "ProductTypes": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ProductTypes"
          },
          "Query": {
            "type": "string"
          },
          "Shippable": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderLinesInvoiceSummary": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Orders.ListOrderLinesFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderLinesInvoiceSummaryResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Orders.ListOrderLinesInvoiceSummaryResponse_Model"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderLinesInvoiceSummaryResponse_Model": {
        "required": [
          "Type",
          "TotalAmount",
          "StockLabel",
          "TotalAmountInTax",
          "CreatedByID",
          "QuantityLeftToInvoice",
          "CommitmentStatus",
          "LineActionType",
          "QuantityOrdered",
          "IsShipped",
          "OrderID",
          "ID",
          "CreationTime",
          "IsInvoiced",
          "QuantityBackordered",
          "UnitPriceInTax",
          "IsCancelled",
          "DiscountAmount",
          "QuantityInvoiced",
          "QuantityDelivered",
          "TaxRate",
          "IsDigitalGiftCard",
          "NetTotalAmount",
          "TotalTaxAmount",
          "ShowTaxInfo",
          "QuantityShipped",
          "TaxCode",
          "QuantityCancelled",
          "IsCompleted",
          "QuantityOpen",
          "UnitPrice",
          "ExportStatusID",
          "NetTotalTaxAmount",
          "ModificationAllowed",
          "QuantityCommitted",
          "QuantityReserved",
          "ExternalModificationStatus",
          "TotalQuantityToShip",
          "CurrencyID",
          "QuantityReturned",
          "NetTotalAmountInTax"
        ],
        "type": "object",
        "properties": {
          "AdditionalDescription": {
            "type": "string"
          },
          "AvailabilityStatus": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderLineAvailabilityStatus"
          },
          "BackendReference": {
            "type": "string"
          },
          "Children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrderLineDto"
            }
          },
          "CommitmentStatus": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderLineCommitmentStatus"
          },
          "ContractNumber": {
            "type": "string"
          },
          "CreatedByID": {
            "type": "integer"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "CurrencyID": {
            "type": "string"
          },
          "CustomFieldsV2": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.CustomFields.CustomFieldResponse"
            }
          },
          "CustomOrderLineType": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "DiscountAmount": {
            "type": "number"
          },
          "DiscountBackendID": {
            "type": "string"
          },
          "DiscountCampaignName": {
            "type": "string"
          },
          "DiscountCouponCode": {
            "type": "string"
          },
          "DiscountID": {
            "type": "integer"
          },
          "Discounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrderLineDiscount"
            }
          },
          "DisplayPrice": {
            "type": "number"
          },
          "DisplayPriceInTax": {
            "type": "number"
          },
          "DisplayProperties": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrderLineDisplayProperties"
          },
          "ExpectedAvailabilityDate": {
            "type": "string",
            "format": "date-time"
          },
          "ExportStatusID": {
            "type": "integer"
          },
          "ExternalModificationStatus": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ExternalModificationStatuses"
          },
          "GroupID": {
            "type": "string",
            "format": "uuid"
          },
          "ID": {
            "type": "integer"
          },
          "ImageBlobID": {
            "type": "string",
            "format": "uuid"
          },
          "IsCancelled": {
            "type": "boolean"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "IsDigitalGiftCard": {
            "type": "boolean"
          },
          "IsInvoiced": {
            "type": "boolean"
          },
          "IsShipped": {
            "type": "boolean"
          },
          "LastModificationTime": {
            "type": "string",
            "format": "date-time"
          },
          "LineActionType": {
            "$ref": "#/components/schemas/EVA.Core.Enumerations.LineActionTypes"
          },
          "ModificationAllowed": {
            "type": "boolean"
          },
          "NetTotalAmount": {
            "type": "number"
          },
          "NetTotalAmountInTax": {
            "type": "number"
          },
          "NetTotalTaxAmount": {
            "type": "number"
          },
          "OrderID": {
            "type": "integer"
          },
          "OriginalTotalAmount": {
            "type": "number"
          },
          "OriginalTotalAmountInTax": {
            "type": "number"
          },
          "ParentID": {
            "type": "integer"
          },
          "Product": {
            "$ref": "#/components/schemas/EVA.Core.Products.Dto.ProductDto"
          },
          "ProductBundleLineID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "ProductVariation": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "QuantityBackordered": {
            "type": "integer"
          },
          "QuantityCancelled": {
            "type": "integer"
          },
          "QuantityCommitted": {
            "type": "integer"
          },
          "QuantityDelivered": {
            "type": "integer"
          },
          "QuantityInvoiced": {
            "type": "integer"
          },
          "QuantityLeftToInvoice": {
            "type": "integer"
          },
          "QuantityOpen": {
            "type": "integer"
          },
          "QuantityOrdered": {
            "type": "integer"
          },
          "QuantityReserved": {
            "type": "integer"
          },
          "QuantityReturned": {
            "type": "integer"
          },
          "QuantityShipped": {
            "type": "integer"
          },
          "Reference": {
            "type": "string"
          },
          "RefundCorrectionReason": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.RefundCorrectionReasonDto"
          },
          "RelatedOrderLineID": {
            "type": "integer"
          },
          "Remark": {
            "type": "string"
          },
          "RequestedDate": {
            "type": "string",
            "format": "date-time"
          },
          "ReturnReason": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "ReturnedOrderID": {
            "type": "integer"
          },
          "ReturnedOrderLineID": {
            "type": "integer"
          },
          "SerialNumber": {
            "type": "string"
          },
          "ShippingMethod": {
            "$ref": "#/components/schemas/EVA.Core.Shipping.ShippingMethodDto"
          },
          "ShippingMethodID": {
            "type": "integer"
          },
          "ShowTaxInfo": {
            "type": "boolean"
          },
          "SoldByID": {
            "type": "integer"
          },
          "StockLabel": {
            "type": "integer"
          },
          "TaxCode": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "TaxExemptionCode": {
            "type": "string"
          },
          "TaxExemptionReason": {
            "type": "string"
          },
          "TaxRate": {
            "type": "number"
          },
          "TotalAmount": {
            "type": "number"
          },
          "TotalAmountInTax": {
            "type": "number"
          },
          "TotalQuantityToShip": {
            "type": "integer"
          },
          "TotalTaxAmount": {
            "type": "number"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderLineTypes"
          },
          "UnitPrice": {
            "type": "number"
          },
          "UnitPriceBeforeCorrection": {
            "type": "number"
          },
          "UnitPriceCorrectionReason": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "UnitPriceInTax": {
            "type": "number"
          },
          "UnitPricePriceListID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderLinesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Orders.Dto.OrderLineDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderShipments": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderShipmentsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderShipmentsResponse_Model"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderShipmentsResponse_Model": {
        "required": [
          "TotalQuantityShipped",
          "ID",
          "CreationTime",
          "Status",
          "TotalQuantityDelivered"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "CompletionTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer"
          },
          "ReceiptCreatedBy": {
            "type": "string"
          },
          "ReceiptCreatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "ShipmentDate": {
            "type": "string",
            "format": "date-time"
          },
          "ShippedFromOrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderShipmentsResponse_Model_OrganizationUnitModel"
          },
          "ShippedToOrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderShipmentsResponse_Model_OrganizationUnitModel"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ShipmentStatuses"
          },
          "TotalQuantityDelivered": {
            "type": "integer"
          },
          "TotalQuantityShipped": {
            "type": "integer"
          },
          "TrackingCode": {
            "type": "string"
          },
          "TrackingLink": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrderShipmentsResponse_Model_OrganizationUnitModel": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrdersForCustomer": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Orders.ListOrdersForCustomerFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrdersForCustomerFilter": {
        "required": [
          "OpenOrdersOnly",
          "ModifiableOrdersOnly",
          "ShowOrdersWithoutLines"
        ],
        "type": "object",
        "properties": {
          "ExcludeOrderProperties": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderProperties"
          },
          "ID": {
            "type": "integer"
          },
          "IsPlaced": {
            "type": "boolean"
          },
          "IsShipped": {
            "type": "boolean"
          },
          "ModifiableOrdersOnly": {
            "type": "boolean"
          },
          "OpenOrdersOnly": {
            "type": "boolean"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderProperties": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderProperties"
          },
          "ShowOrdersWithoutLines": {
            "type": "boolean"
          },
          "Status": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.OrderStatus"
            }
          },
          "Type": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.OrderTypes"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrdersForCustomerResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Orders.Dto.OrderDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrdersWithCustomerReferences": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ListOrdersWithCustomerReferencesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Orders.OrderWithCustomerReferences"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.MigrateOrdersToUnified": {
        "type": "object",
        "properties": {
          "OrderIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.MigrateOrdersToUnifiedResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "MigratedOrderIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "NotMigratedOrderIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ModifyOrderLinePrice": {
        "required": [
          "OrderLineID",
          "UnitPriceInTax"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "UnitCost": {
            "type": "number"
          },
          "UnitPriceInTax": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ModifyQuantityOrdered": {
        "type": "object",
        "properties": {
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ModifyQuantityOrdered_OrderLineToModify"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ModifyQuantityOrdered_OrderLineToModify": {
        "required": [
          "OrderLineID",
          "NewQuantityOrdered"
        ],
        "type": "object",
        "properties": {
          "NewQuantityOrdered": {
            "type": "integer"
          },
          "OrderLineID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ModifyQuantityOrderedResponse": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ModifyQuantityOrderedResponse_QuantityMutationResultMessage"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ModifyQuantityOrderedResponse_QuantityMutationResultMessage": {
        "required": [
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "Code": {
            "type": "string"
          },
          "Message": {
            "type": "string"
          },
          "OrderLineID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.OpenOrderAmount": {
        "required": [
          "Capturable",
          "InTax",
          "PendingInTax"
        ],
        "type": "object",
        "properties": {
          "Capturable": {
            "type": "number"
          },
          "InTax": {
            "type": "number"
          },
          "PendingInTax": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.OpenOrderAmounts": {
        "required": [
          "OpenAmountIsZero"
        ],
        "type": "object",
        "properties": {
          "Discounts": {
            "$ref": "#/components/schemas/EVA.Core.Orders.DiscountAmounts"
          },
          "Open": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OpenOrderAmount"
          },
          "OpenAmountIsZero": {
            "type": "boolean"
          },
          "Paid": {
            "$ref": "#/components/schemas/EVA.Core.Orders.PaidOrderAmount"
          },
          "Taxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.Dto.TaxAmount"
            }
          },
          "Total": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderAmount"
          },
          "Types": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.Orders.OrderAmount"
            }
          },
          "UnroundedTotal": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderAmount"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.OrderAmount": {
        "required": [
          "Tax",
          "InTax",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "InTax": {
            "type": "number"
          },
          "Tax": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.OrderCancellationOptions": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Orders.OrderDataForSingleOrderLink": {
        "required": [
          "OrderLinkID",
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "OrderLinkID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.OrderFulfillmentLineOrganizationUnit": {
        "required": [
          "Type",
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnitTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.OrderLinesReturnSet": {
        "type": "object",
        "properties": {
          "OrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "RequiredOrderLineIDsToReturn": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.OrderLinkType": {
        "required": [
          "ID",
          "IsDeleted"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.OrderPickProductDiscountOptions": {
        "required": [
          "BaseAmount"
        ],
        "type": "object",
        "properties": {
          "BaseAmount": {
            "type": "number"
          },
          "CurrentSelection": {
            "type": "integer"
          },
          "CurrentTier": {
            "type": "string",
            "format": "uuid"
          },
          "Options": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "Tiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.OrderPickProductDiscountOptions_PickProductTierOptions"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.OrderPickProductDiscountOptions_PickProductTierOptions": {
        "required": [
          "From",
          "ID",
          "Difference",
          "Prompt",
          "IsCurrentTier"
        ],
        "type": "object",
        "properties": {
          "DefaultProductID": {
            "type": "integer"
          },
          "Description": {
            "type": "string"
          },
          "Difference": {
            "type": "number"
          },
          "From": {
            "type": "number"
          },
          "ID": {
            "type": "string",
            "format": "uuid"
          },
          "IsCurrentTier": {
            "type": "boolean"
          },
          "Products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
            }
          },
          "Prompt": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.OrderSearchDataFilterModel": {
        "type": "object",
        "properties": {
          "BooleanValue": {
            "type": "boolean"
          },
          "EndDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "EndDecimal": {
            "type": "number"
          },
          "StartDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "StartDecimal": {
            "type": "number"
          },
          "StringValue": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.OrderSearchFulfillmentStatusFilterModel": {
        "type": "object",
        "properties": {
          "CanFulfill": {
            "type": "boolean"
          },
          "IsBlocked": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.OrderSearchResultItem": {
        "required": [
          "Type",
          "TotalAmount",
          "TotalAmountInTax",
          "IsCaptured",
          "LastModificationTime",
          "TotalQuantityShipped",
          "IsSuspended",
          "Properties",
          "OpenAmountInTax",
          "TotalItems",
          "IsShipped",
          "OpenAmount",
          "ID",
          "HasDisputedPayments",
          "ForeignPaidAmount",
          "CreationTime",
          "IsInvoiced",
          "Status",
          "IsConfirmed",
          "PaidAmount",
          "HasCancelledExportedQuantities",
          "IsEmpty",
          "IsCompleted",
          "IsReserved",
          "HasUnresolvedDisputedPayments",
          "IsPaid",
          "IsPlaced",
          "TotalQuantityToShip",
          "CustomStatus"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "ConfirmationDate": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderSearchResultItemUser"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "CurrencyID": {
            "type": "string"
          },
          "CustomOrderTypeID": {
            "type": "integer"
          },
          "CustomStatus": {
            "type": "integer"
          },
          "CustomStatusIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "Customer": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderSearchResultItemCustomer"
          },
          "CustomerReference": {
            "type": "string"
          },
          "Data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.OrderSearchResultItemData"
            }
          },
          "Definition": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderSearchResultItemDefinition"
          },
          "ForeignPaidAmount": {
            "type": "number"
          },
          "HasCancelledExportedQuantities": {
            "type": "boolean"
          },
          "HasDeliveryLines": {
            "type": "boolean"
          },
          "HasDisputedPayments": {
            "type": "boolean"
          },
          "HasOrderLines": {
            "type": "boolean"
          },
          "HasReserveLines": {
            "type": "boolean"
          },
          "HasShipLines": {
            "type": "boolean"
          },
          "HasUnresolvedDisputedPayments": {
            "type": "boolean"
          },
          "ID": {
            "type": "integer"
          },
          "IsCaptured": {
            "type": "boolean"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "IsConfirmed": {
            "type": "boolean"
          },
          "IsEmpty": {
            "type": "boolean"
          },
          "IsInvoiced": {
            "type": "boolean"
          },
          "IsPaid": {
            "type": "boolean"
          },
          "IsPlaced": {
            "type": "boolean"
          },
          "IsReserved": {
            "type": "boolean"
          },
          "IsShipped": {
            "type": "boolean"
          },
          "IsSuspended": {
            "type": "boolean"
          },
          "LastModificationTime": {
            "type": "string",
            "format": "date-time"
          },
          "LastModifiedBy": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderSearchResultItemUser"
          },
          "MaxExpectedAvailabilityDate": {
            "type": "string",
            "format": "date-time"
          },
          "MinExpectedAvailabilityDate": {
            "type": "string",
            "format": "date-time"
          },
          "OpenAmount": {
            "type": "number"
          },
          "OpenAmountInTax": {
            "type": "number"
          },
          "OrderCustomStatusID": {
            "type": "integer"
          },
          "OrderCustomTypeID": {
            "type": "integer"
          },
          "OrganizationUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.OrderSearchResultItemOrganizationUnit"
            }
          },
          "OriginatingOrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderSearchResultItemOrganizationUnit"
          },
          "PaidAmount": {
            "type": "number"
          },
          "PickupOrganizationUnitID": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderSearchResultItemOrganizationUnit"
          },
          "ProductImage": {
            "type": "string"
          },
          "Properties": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderProperties"
          },
          "PropertiesIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "RequestedDate": {
            "type": "string",
            "format": "date-time"
          },
          "ReturnToSupplierRequest": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderSearchResultItemReturnToSupplierRequest"
          },
          "ShipFromOrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderSearchResultItemOrganizationUnit"
          },
          "ShipToOrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderSearchResultItemOrganizationUnit"
          },
          "ShippingAddress": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderSearchResultItemAddress"
          },
          "SoldFromOrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderSearchResultItemOrganizationUnit"
          },
          "SoldToOrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderSearchResultItemOrganizationUnit"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderStatus"
          },
          "TotalAmount": {
            "type": "number"
          },
          "TotalAmountInTax": {
            "type": "number"
          },
          "TotalItems": {
            "type": "integer"
          },
          "TotalQuantityShipped": {
            "type": "integer"
          },
          "TotalQuantityToShip": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderTypes"
          },
          "UserAgentApplication": {
            "type": "string"
          },
          "UserAgentVersion": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.OrderSearchResultItemAddress": {
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.OrderSearchResultItemCustomer": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string"
          },
          "FullName": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.OrderSearchResultItemData": {
        "type": "object",
        "properties": {
          "BooleanValue": {
            "type": "boolean"
          },
          "DateValue": {
            "type": "string",
            "format": "date-time"
          },
          "DecimalValue": {
            "type": "number"
          },
          "Name": {
            "type": "string"
          },
          "StringValue": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.OrderSearchResultItemDefinition": {
        "type": "object",
        "properties": {
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderSearchResultItemDefinition_Value"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderSearchResultItemDefinition_Value"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.OrderSearchResultItemDefinition_Value": {
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Title": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.OrderSearchResultItemOrganizationUnit": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.OrderSearchResultItemReturnToSupplierRequest": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.OrderSearchResultItemUser": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "FullName": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.OrderShippingStatusType": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Orders.OrderStatistics": {
        "required": [
          "GrossMargin"
        ],
        "type": "object",
        "properties": {
          "GrossMargin": {
            "type": "number"
          },
          "OrderLines": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.Orders.OrderStatistics_OrderLineStatistics"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.OrderStatistics_OrderLineStatistics": {
        "required": [
          "UnitCost",
          "DiscountAmount",
          "UnitPrice"
        ],
        "type": "object",
        "properties": {
          "DiscountAmount": {
            "type": "number"
          },
          "UnitCost": {
            "type": "number"
          },
          "UnitPrice": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.OrderWithCustomerReferences": {
        "required": [
          "ID",
          "CreationTime"
        ],
        "type": "object",
        "properties": {
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "CustomerOrderID": {
            "type": "string"
          },
          "CustomerReference": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.PaidOrderAmount": {
        "required": [
          "Pending",
          "Captured",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "Captured": {
            "type": "number"
          },
          "Pending": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.PaymentStatus": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Orders.PlaceOrder": {
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "OrderIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.PlaceOrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ValidationResult": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Export.OrderExportValidationResult"
          },
          "ValidationResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Export.OrderExportValidationResult"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.PollExternalOrderStatus": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.PrepareOrderForCheckout": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ProduceTrackingInformation": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ProduceTrackingInformationResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.Orders.ProduceTrackingInformationResponse_TrackingInformation"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ProduceTrackingInformationResponse_TrackingInformation": {
        "type": "object",
        "properties": {
          "Code": {
            "type": "string"
          },
          "Link": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ProductRequirementLineModel": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Value": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ProductRequirementModel": {
        "required": [
          "OrderLineID",
          "ProductID"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "ProductPrimitiveName": {
            "type": "string"
          },
          "RequirementModels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ProductRequirementLineModel"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.PropertyGroup": {
        "required": [
          "TotalAmount",
          "TotalAmountInTax",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "ChildGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ConfigurableGroup"
            }
          },
          "PropertyValue": {
            "type": "object"
          },
          "Quantity": {
            "type": "integer"
          },
          "TotalAmount": {
            "type": "number"
          },
          "TotalAmountInTax": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.PushReturnOrder": {
        "required": [
          "Lines",
          "IsCustomerReturn",
          "AutoRefund",
          "BackendSystemID",
          "AlreadyReceived",
          "BackendID"
        ],
        "type": "object",
        "properties": {
          "AlreadyReceived": {
            "type": "boolean",
            "description": "Ship the order immediately"
          },
          "AutoRefund": {
            "type": "boolean",
            "description": "Try to refund the order immediately"
          },
          "BackendID": {
            "type": "string",
            "description": "A unique identifier for the order, within the context of given `BackendSystemID`"
          },
          "BackendSystemID": {
            "type": "string",
            "description": "A code, free of choice for the calling 3rd party application creating the order"
          },
          "CustomFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "IsCustomerReturn": {
            "type": "boolean",
            "description": "If this order pending a customer return"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.PushReturnOrder_PushReturnOrderLine"
            }
          },
          "OriginalBackendID": {
            "type": "string",
            "description": "The unique identifier of the original order, within the context of given `BackendSystemID`"
          },
          "OriginalOrderID": {
            "type": "integer"
          },
          "Remark": {
            "type": "string",
            "description": "Remark on the order (optional)"
          },
          "ReturnCosts": {
            "$ref": "#/components/schemas/EVA.Core.Orders.PushReturnOrder_PushReturnCostsLine"
          },
          "ReturnToOrganizationUnitBackendID": {
            "type": "string",
            "description": "Identifier for the organizationunit where the stock will be returned"
          },
          "StockOrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.PushReturnOrder_PushReturnCostsLine": {
        "required": [
          "Description",
          "UnitPrice"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "TaxAmount": {
            "type": "number"
          },
          "TaxRate": {
            "type": "number"
          },
          "UnitPrice": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.PushReturnOrder_PushReturnOrderLine": {
        "required": [
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "CustomID": {
            "type": "string",
            "description": "Article number of the product from the 3rd party"
          },
          "OriginalBackendID": {
            "type": "string",
            "description": "ID of the original orderline from the 3rd party"
          },
          "OriginalOrderLineID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer",
            "description": "Quantity that has been returned, positive"
          },
          "Remark": {
            "type": "string",
            "description": "Remark describing something return related"
          },
          "ReturnReasonID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.PushReturnOrderResponse": {
        "required": [
          "ID",
          "AlreadyExists"
        ],
        "type": "object",
        "properties": {
          "AlreadyExists": {
            "type": "boolean",
            "description": "If the order with the specified BackendID already existed"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.PushSalesOrder": {
        "required": [
          "Lines",
          "BackendSystemID",
          "BackendID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string",
            "description": "A unique identifier for the order, within the context of given `BackendSystemID`"
          },
          "BackendSystemID": {
            "type": "string",
            "description": "A code, free of choice for the calling 3rd party application creating the order"
          },
          "BackfillInformation": {
            "$ref": "#/components/schemas/EVA.Core.Orders.PushSalesOrderBackfillInformation"
          },
          "BillingAddress": {
            "$ref": "#/components/schemas/EVA.Core.Orders.PushSalesOrderAddress"
          },
          "Coupons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.PushSalesOrderCoupon"
            }
          },
          "CurrencyID": {
            "type": "string",
            "description": "ISO code of the currency of the order"
          },
          "CustomData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "CustomFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "Customer": {
            "$ref": "#/components/schemas/EVA.Core.Orders.PushSalesOrderCustomer"
          },
          "Discounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.PushSalesOrderDiscount"
            }
          },
          "FulfillmentMethod": {
            "$ref": "#/components/schemas/EVA.Core.Input.OrderImportFulfillmentMethod"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.PushSalesOrderLine"
            }
          },
          "Options": {
            "$ref": "#/components/schemas/EVA.Core.Orders.PushSalesOrderOptions"
          },
          "Payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.PushSalesOrderPayment"
            }
          },
          "PickupAddress": {
            "$ref": "#/components/schemas/EVA.Core.Orders.PushSalesOrderAddress"
          },
          "PickupOrganizationUnitBackendID": {
            "type": "string",
            "description": "Identifier for the shop where the order will be picked up, if any (`OrganizationUnit.BackendID`"
          },
          "Properties": {
            "$ref": "#/components/schemas/EVA.Core.Orders.PushSalesOrderProperties"
          },
          "Remark": {
            "type": "string"
          },
          "ReturnToSupplierReason": {
            "type": "string",
            "description": "The reason for this ReturnToSupplier order, used in combination with Properties.ReturnToSupplier. Required for ReturnToSupplier orders"
          },
          "ShipToOrganizationUnitBackendID": {
            "type": "string",
            "description": "Identifier for the shop where the order will be shipped to, if any (`OrganizationUnit.BackendID`"
          },
          "Shipments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.PushSalesOrderShipment"
            }
          },
          "ShippingAddress": {
            "$ref": "#/components/schemas/EVA.Core.Orders.PushSalesOrderAddress"
          },
          "ShippingInformation": {
            "$ref": "#/components/schemas/EVA.Core.Orders.PushSalesOrderShippingInformation"
          },
          "SoldFromOrganizationUnitBackendID": {
            "type": "string",
            "description": "Identifier for the (web)shop that made the sale (`OrganizationUnit.BackendID`)"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.PushSalesOrderAddress": {
        "required": [
          "CountryID"
        ],
        "type": "object",
        "properties": {
          "Address1": {
            "type": "string"
          },
          "Address2": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "CountryID": {
            "type": "string",
            "description": "ISO 3166-1"
          },
          "District": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "HouseNumber": {
            "type": "string",
            "description": "House number, including possible extensions"
          },
          "LastName": {
            "type": "string"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "Region": {
            "type": "string"
          },
          "State": {
            "type": "string",
            "description": "ISO 3166-2"
          },
          "Subdistrict": {
            "type": "string"
          },
          "ZipCode": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.PushSalesOrderBackfillInformation": {
        "type": "object",
        "properties": {
          "OriginalCreationDate": {
            "type": "string",
            "description": "Original date when this order was created",
            "format": "date-time"
          },
          "OriginalInvoiceDate": {
            "type": "string",
            "description": "Original date when this order was invoiced",
            "format": "date-time"
          },
          "OriginalInvoiceNumber": {
            "type": "string",
            "description": "Original invoicenumber of this order"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.PushSalesOrderCoupon": {
        "type": "object",
        "properties": {
          "CouponCode": {
            "type": "string"
          },
          "DiscountBackendID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.PushSalesOrderCustomer": {
        "type": "object",
        "properties": {
          "AccountType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.UserAccountType"
          },
          "BackendID": {
            "type": "string"
          },
          "BackendRelationID": {
            "type": "string"
          },
          "BankAccount": {
            "type": "string"
          },
          "Company": {
            "$ref": "#/components/schemas/EVA.Core.Orders.PushSalesOrderCustomerCompany"
          },
          "CountryID": {
            "type": "string",
            "description": "ISO 3166-1"
          },
          "DateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "EmailAddress": {
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "FiscalID": {
            "type": "string"
          },
          "Gender": {
            "type": "string",
            "description": "Possible values are: M, F, O"
          },
          "Initials": {
            "type": "string"
          },
          "LanguageID": {
            "type": "string",
            "description": "ISO 639-1"
          },
          "LastName": {
            "type": "string"
          },
          "Nickname": {
            "type": "string"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "PlaceOfBirth": {
            "type": "string"
          },
          "Salutation": {
            "type": "string"
          },
          "SocialSecurityNumber": {
            "type": "string"
          },
          "Title": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.PushSalesOrderCustomerCompany": {
        "type": "object",
        "properties": {
          "FiscalID": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "RegistrationNumber": {
            "type": "string"
          },
          "VatNumber": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.PushSalesOrderDiscount": {
        "required": [
          "Amount",
          "BackendID"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Amount of the discount, typically with a negative value"
          },
          "BackendID": {
            "type": "string",
            "description": "Reference to the discount of the 3rd party"
          },
          "CampaignName": {
            "type": "string"
          },
          "CouponCode": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.PushSalesOrderLine": {
        "required": [
          "Quantity",
          "IsFinalSale",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Price of a single unit, before discounts, based on the SoldFromOrganizationUnit settings this should be in or ex tax. See service documentation."
          },
          "BackendID": {
            "type": "string",
            "description": "ID of the order line from the 3rd party"
          },
          "ChildLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.BasePushSalesOrderLine"
            },
            "description": "Child lines for this line"
          },
          "CustomData": {
            "type": "object"
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldKeyValue"
            },
            "description": "Optional additional custom fields"
          },
          "CustomID": {
            "type": "string",
            "description": "Article number of the product from the 3rd party"
          },
          "Description": {
            "type": "string"
          },
          "Discounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.PushSalesOrderDiscount"
            }
          },
          "FulfillmentMethod": {
            "$ref": "#/components/schemas/EVA.Core.Input.OrderImportFulfillmentMethod"
          },
          "GiftcardData": {
            "$ref": "#/components/schemas/EVA.Core.GiftCards.GiftCardData"
          },
          "GiftcardMedia": {
            "$ref": "#/components/schemas/EVA.Core.GiftCards.GiftCardMedia"
          },
          "GroupID": {
            "type": "string",
            "description": "Optional grouping identifier to keep lines 'together'.",
            "format": "uuid"
          },
          "IsFinalSale": {
            "type": "boolean",
            "description": "Marks the line as a final sale line, making it non returnable."
          },
          "OriginalAmount": {
            "type": "number",
            "description": "Original price of a single unit, before discounts, based on the SoldFromOrganizationUnit settings this should be in or ex tax. See service documentation."
          },
          "PaymentLineIdentifier": {
            "type": "string",
            "description": "Used for passing the identifier used to identify this line at the payment provider. This is required for payments that need capture on line level like Klarna."
          },
          "PreferredFulfillmentOrganizationUnitBackendID": {
            "type": "string",
            "description": "Allows you to specify a preferred organization for doing the physical fulfillment of the OrderLine.\nDepending on your order orchestration configuration this can be a hard filter or merely a preference."
          },
          "ProductID": {
            "type": "integer"
          },
          "ProductRequirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.PushSalesOrderProductRequirement"
            },
            "description": "Product requirements"
          },
          "Quantity": {
            "type": "integer"
          },
          "RequestedDeliveryDate": {
            "type": "string",
            "format": "date-time"
          },
          "SerialNumber": {
            "type": "string",
            "description": "Used for passing in the serial number of, for example, a gift card. This is used to support refunding and other operations on the gift card."
          },
          "Shipments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.PushSalesOrderLineShipment"
            }
          },
          "TaxAmount": {
            "type": "number",
            "description": "When known the exact TaxAmount can be specified. Used when tax calculations are done by an external party like Avatax."
          },
          "TaxExemptionCode": {
            "type": "string",
            "description": "A code identifying the tax exemption."
          },
          "TaxExemptionReason": {
            "type": "string",
            "description": "A longer description with the justification for the tax exemption."
          },
          "TaxRate": {
            "type": "number",
            "description": "When no tax rate is provided, the taxrate will be based on what is known in Eva. When no rate can be determined, an error will be thrown."
          },
          "TaxRateCategory": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.TaxRateCategory"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.PushSalesOrderLineShipment": {
        "required": [
          "Quantity",
          "ShipmentBackendID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string",
            "description": "Identifier of the shipment line"
          },
          "Quantity": {
            "type": "integer"
          },
          "ShipmentBackendID": {
            "type": "string",
            "description": "Identifier of the shipment, must exist in the Order.Shipments"
          },
          "ShipmentDate": {
            "type": "string",
            "description": "Date when this shipment line was shipped, will fall-back to the Shipment.ShipmentDate",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.PushSalesOrderOptions": {
        "type": "object",
        "properties": {
          "AllowPartialFulfillment": {
            "type": "boolean",
            "description": "Allow the order to be fulfilled in multiple shipments"
          },
          "CheckOpenAmountIsZero": {
            "type": "boolean",
            "description": "When true, this service call return with an error when the order does not end up with an open amount of exactly 0"
          },
          "DoNotInvoice": {
            "type": "boolean",
            "description": "Never generate an invoice for this order. The order will be completed when it's Paid+Shipped"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.PushSalesOrderPayment": {
        "required": [
          "Method",
          "Amount"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Amount of the payment that was actually paid"
          },
          "BackendID": {
            "type": "string",
            "description": "Identifier of the payment by the 3rd party (e.g. the one from the payment service provider (PSP))"
          },
          "CapturedAmount": {
            "type": "number",
            "description": "Part (or all) of the amount that has already been captured for this payment"
          },
          "Data": {
            "type": "string",
            "description": "Data that can be used to store anything that may be required later to verify the payment for example"
          },
          "Method": {
            "type": "string",
            "description": "Code of the payment method (e.g. `ADYEN_IDEAL`)"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.PushSalesOrderProductRequirement": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Value": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.PushSalesOrderProperties": {
        "type": "object",
        "properties": {
          "IsInterbranch": {
            "type": "boolean"
          },
          "Replenishment": {
            "type": "boolean"
          },
          "ReturnToSupplier": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.PushSalesOrderResponse": {
        "required": [
          "ID",
          "AlreadyExists"
        ],
        "type": "object",
        "properties": {
          "AlreadyExists": {
            "type": "boolean"
          },
          "CustomerID": {
            "type": "integer"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.PushSalesOrderShipment": {
        "required": [
          "BackendID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string",
            "description": "Identifier of the shipment; should also be filled on Line.Shipments.ShipmentBackendID"
          },
          "ShipmentDate": {
            "type": "string",
            "description": "Date when this shipment was shipped",
            "format": "date-time"
          },
          "TrackingCode": {
            "type": "string"
          },
          "TrackingLink": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.PushSalesOrderShippingInformation": {
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "ShippingCosts, before discounts, based on the SoldFromOrganizationUnit settings this should be in or ex tax. See service documentation."
          },
          "Discount": {
            "$ref": "#/components/schemas/EVA.Core.Orders.PushSalesOrderDiscount"
          },
          "Method": {
            "type": "string",
            "description": "Method that is used to ship the order (e.g. UPS, DHL, etc.)"
          },
          "PaymentLineIdentifier": {
            "type": "string",
            "description": "Used for passing the identifier used to identify the shipping costs at the payment provider. This is required for payments that need capture on line level like Klarna."
          },
          "TaxAmount": {
            "type": "number",
            "description": "When known the exact TaxAmount can be specified. Used when tax calculations are done by an external party like Avatax."
          },
          "TaxRate": {
            "type": "number",
            "description": "Tax rate of the shipping method, when `Amount` / `UnitPriceInTax` is set and it's not provided, the taxrate will be based on what is known in Eva. When no rate can be determined, an error will be thrown."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.RemoveOfferStatusFromOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.RemoveOrderLineUnitPriceCorrection": {
        "required": [
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.RequestReindexOrderSearchData": {
        "type": "object",
        "properties": {
          "Script": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReserveOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "StationID": {
            "type": "integer",
            "description": "Station to print the receipt on"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.RetryOrderExport": {
        "required": [
          "ID",
          "Force"
        ],
        "type": "object",
        "properties": {
          "Force": {
            "type": "boolean"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReturnToSupplier.CreateReturnToSupplierOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReturnToSupplier.CreateReturnToSupplierRequest": {
        "required": [
          "OrganizationUnitSetID",
          "RecallPercentage",
          "Name"
        ],
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.Search.FilterModel"
            }
          },
          "LanguageID": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "ProductSearchTemplateID": {
            "type": "integer"
          },
          "RecallPercentage": {
            "type": "number"
          },
          "ReturnReasonID": {
            "type": "integer",
            "description": "ReturnReason of type OrganizationUnit to indicate why these ReturnToSupplier orders are created"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReturnToSupplier.CreateReturnToSupplierRequestResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReturnToSupplier.DeleteReturnToSupplierRequest": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReturnToSupplier.GetReturnToSupplierData": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReturnToSupplier.GetReturnToSupplierDataResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Reason": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReturnToSupplier.GetReturnToSupplierRequestByID": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReturnToSupplier.GetReturnToSupplierRequestByIDResponse": {
        "required": [
          "OrganizationUnitSetID",
          "Status",
          "RecallPercentage",
          "Name"
        ],
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.Search.FilterModel"
            }
          },
          "LanguageID": {
            "type": "string"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Name": {
            "type": "string"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "OrganizationUnitSetName": {
            "type": "string"
          },
          "ProductSearchTemplateID": {
            "type": "integer"
          },
          "ProductSearchTemplateName": {
            "type": "string"
          },
          "RecallPercentage": {
            "type": "number"
          },
          "ReturnReasonID": {
            "type": "integer"
          },
          "ReturnReasonName": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.ReturnToSupplierRequestStatus"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReturnToSupplier.ListReturnToSupplierRequests": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Orders.ReturnToSupplier.ListReturnToSupplierRequestsFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReturnToSupplier.ListReturnToSupplierRequestsFilter": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.ReturnToSupplierRequestStatus"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReturnToSupplier.ListReturnToSupplierRequestsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Orders.ReturnToSupplier.ReturnToSupplierRequestModel"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReturnToSupplier.ListReturnableSuppliersForOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReturnToSupplier.ListReturnableSuppliersForOrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.ListReturnableSuppliersForOrderResponse_Model"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReturnToSupplier.ListReturnableSuppliersForOrderResponse_Model": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReturnToSupplier.OrganizationUnitValidationModel": {
        "required": [
          "Skipped",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "AvailableSuppliers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.SupplierValidationModel"
            }
          },
          "OrganizationUnitBackendID": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "OrganizationUnitName": {
            "type": "string"
          },
          "PickedSupplier": {
            "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.SupplierValidationModel"
          },
          "Skipped": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReturnToSupplier.PrintReturnToSupplierOrderTicket": {
        "required": [
          "StationID",
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "StationID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReturnToSupplier.ProcessReturnToSupplierRequest": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReturnToSupplier.ReturnToSupplierRequestModel": {
        "required": [
          "OrganizationUnitSetID",
          "ID",
          "Status",
          "RecallPercentage",
          "Name"
        ],
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.Search.FilterModel"
            }
          },
          "ID": {
            "type": "integer"
          },
          "LanguageID": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "OrganizationUnitSetName": {
            "type": "string"
          },
          "ProductSearchTemplateID": {
            "type": "integer"
          },
          "ProductSearchTemplateName": {
            "type": "string"
          },
          "RecallPercentage": {
            "type": "number"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.ReturnToSupplierRequestStatus"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReturnToSupplier.ReturnToSupplierRequestStatus": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReturnToSupplier.SetSuppliersForReturnToSupplierRequest": {
        "required": [
          "ID",
          "Suppliers"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Suppliers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.SupplierSet"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReturnToSupplier.SupplierSet": {
        "required": [
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          },
          "SupplierOrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReturnToSupplier.SupplierValidationModel": {
        "required": [
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitBackendID": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "OrganizationUnitName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReturnToSupplier.UpdateReturnToSupplierOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "ReasonID": {
            "type": "integer"
          },
          "ShipFromOrganizationUnitID": {
            "type": "object"
          },
          "ShipToOrganizationUnitID": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReturnToSupplier.UpdateReturnToSupplierRequest": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "object"
          },
          "Filters": {
            "type": "object"
          },
          "ID": {
            "type": "integer"
          },
          "LanguageID": {
            "type": "object"
          },
          "Name": {
            "type": "object"
          },
          "OrganizationUnitSetID": {
            "type": "object"
          },
          "ProductSearchTemplateID": {
            "type": "object"
          },
          "RecallPercentage": {
            "type": "object"
          },
          "ReturnReasonID": {
            "type": "object",
            "description": "ReturnReason of type OrganizationUnit to indicate why these ReturnToSupplier orders are created"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReturnToSupplier.ValidateReturnToSupplierRequest": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReturnToSupplier.ValidateReturnToSupplierRequestResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrganizationUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.OrganizationUnitValidationModel"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ReturnableStatusForOrderLine": {
        "required": [
          "OrderLineID",
          "OrderLineType",
          "ReturnableQuantity",
          "IsReturnable"
        ],
        "type": "object",
        "properties": {
          "IsReturnable": {
            "type": "boolean"
          },
          "MustBeReturnedWithOrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "When present, this OrderLine can only be returned when the OrderLines specified in this collection are also being returned."
          },
          "OrderLineID": {
            "type": "integer"
          },
          "OrderLineType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderLineTypes"
          },
          "Reason": {
            "type": "string"
          },
          "ReasonCode": {
            "type": "string"
          },
          "ReturnableAmount": {
            "type": "number"
          },
          "ReturnableQuantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Returns.GetRefundCorrectionReasons": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Orders.Returns.GetRefundCorrectionReasonsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Reasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Returns.GetRefundCorrectionReasonsResponse_RefundCorrectionReasonDto"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Returns.GetRefundCorrectionReasonsResponse_RefundCorrectionReasonDto": {
        "required": [
          "ID",
          "Name"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Returns.ReturnableStockOrganizationUnitReasons": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Orders.SalesTaxEstimateForOrderResponse": {
        "required": [
          "IsSuccess",
          "TotalTaxAmount"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "IsSuccess": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrderLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.SalesTaxEstimateForOrderResponse_OrderLineTaxCalculationModel"
            }
          },
          "TaxTable": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.SalesTaxEstimateForOrderResponse_OrderLineTaxCalculationTaxAmountModel"
            }
          },
          "TotalTaxAmount": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.SalesTaxEstimateForOrderResponse_OrderLineTaxCalculationModel": {
        "required": [
          "OrderLineID",
          "TaxAmount",
          "TaxRate"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "TaxAmount": {
            "type": "number"
          },
          "TaxRate": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.SalesTaxEstimateForOrderResponse_OrderLineTaxCalculationTaxAmountModel": {
        "required": [
          "TaxAmount",
          "TaxRate"
        ],
        "type": "object",
        "properties": {
          "TaxAmount": {
            "type": "number"
          },
          "TaxRate": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.SearchOrders": {
        "required": [
          "IncludeChildOrganizationUnits"
        ],
        "type": "object",
        "properties": {
          "CarrierID": {
            "type": "integer"
          },
          "CompanyName": {
            "type": "string"
          },
          "CreatedByID": {
            "type": "integer"
          },
          "CustomFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "CustomFieldsByBackendID": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "CustomOrderTypeID": {
            "type": "integer"
          },
          "CustomStatus": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "CustomerBackendID": {
            "type": "string"
          },
          "CustomerID": {
            "type": "integer"
          },
          "CustomerOrderStatus": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "CustomerOrderStatusBackendID": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "CustomerOrderTypeBackendID": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "CustomerReference": {
            "type": "string"
          },
          "Data": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.Orders.OrderSearchDataFilterModel"
            }
          },
          "DiscountIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "EndConfirmationDate": {
            "type": "string",
            "format": "date-time"
          },
          "EndMaxExpectedAvailabilityDate": {
            "type": "string",
            "format": "date-time"
          },
          "EndMinExpectedAvailabilityDate": {
            "type": "string",
            "format": "date-time"
          },
          "EndOfferExpirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "EndRequestedDate": {
            "type": "string",
            "format": "date-time"
          },
          "EndShipmentDate": {
            "type": "string",
            "format": "date-time"
          },
          "EndTime": {
            "type": "string",
            "format": "date-time"
          },
          "FulfillmentStatus": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderSearchFulfillmentStatusFilterModel"
          },
          "HasCancelledExportedQuantities": {
            "type": "boolean"
          },
          "HasCustomer": {
            "type": "boolean"
          },
          "HasDeliveryLines": {
            "type": "boolean"
          },
          "HasDisputedPayments": {
            "type": "boolean"
          },
          "HasOrderLines": {
            "type": "boolean"
          },
          "HasReserveLines": {
            "type": "boolean"
          },
          "HasShipLines": {
            "type": "boolean"
          },
          "HasUnresolvedDisputedPayments": {
            "type": "boolean"
          },
          "IncludeChildOrganizationUnits": {
            "type": "boolean"
          },
          "InvoiceNumber": {
            "type": "string"
          },
          "IsCaptured": {
            "type": "boolean"
          },
          "IsClickAndCollect": {
            "type": "boolean"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "IsConfirmed": {
            "type": "boolean"
          },
          "IsCrossChannelReturn": {
            "type": "boolean"
          },
          "IsEmpty": {
            "type": "boolean"
          },
          "IsEndlessAisle": {
            "type": "boolean"
          },
          "IsExported": {
            "type": "boolean"
          },
          "IsInvoiced": {
            "type": "boolean"
          },
          "IsOffer": {
            "type": "boolean"
          },
          "IsOrder": {
            "type": "boolean"
          },
          "IsPlaced": {
            "type": "boolean"
          },
          "IsReserved": {
            "type": "boolean"
          },
          "IsShipped": {
            "type": "boolean"
          },
          "IsSuspended": {
            "type": "boolean"
          },
          "LastModifiedByID": {
            "type": "integer"
          },
          "MaxOpenAmountInTax": {
            "type": "number"
          },
          "MaxTotalAmountInTax": {
            "type": "number"
          },
          "MinOpenAmountInTax": {
            "type": "number"
          },
          "MinTotalAmountInTax": {
            "type": "number"
          },
          "NotProperties": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Properties that should not be present on the order"
          },
          "OrderBackendID": {
            "type": "string"
          },
          "OrderFulfillmentReferenceNumbers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "OrderIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "OrderLineID": {
            "type": "integer"
          },
          "OrderStatus": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderStatus"
          },
          "OrderType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderTypes"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "OriginatingOrganizationUnitID": {
            "type": "integer"
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "PaymentStatus": {
            "$ref": "#/components/schemas/EVA.Core.Orders.PaymentStatus"
          },
          "PaymentTypeID": {
            "type": "integer"
          },
          "PaymentTypeName": {
            "type": "string"
          },
          "PickupOrganizationUnitID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "ProductVariation": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "Properties": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Properties that should be present on the order"
          },
          "Query": {
            "type": "string"
          },
          "ReturnToSupplierRequestID": {
            "type": "integer"
          },
          "SerialNumber": {
            "type": "string"
          },
          "ShipFromOrganizationUnitID": {
            "type": "integer"
          },
          "ShipToCountryID": {
            "type": "string"
          },
          "ShipToOrganizationUnitID": {
            "type": "integer"
          },
          "ShippingMethodID": {
            "type": "integer"
          },
          "ShippingOrganizationUnitID": {
            "type": "integer"
          },
          "SoldFromOrganizationUnitID": {
            "type": "integer"
          },
          "SoldToOrganizationUnitID": {
            "type": "integer"
          },
          "StartConfirmationDate": {
            "type": "string",
            "format": "date-time"
          },
          "StartMaxExpectedAvailabilityDate": {
            "type": "string",
            "format": "date-time"
          },
          "StartMinExpectedAvailabilityDate": {
            "type": "string",
            "format": "date-time"
          },
          "StartOfferExpirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "StartRequestedDate": {
            "type": "string",
            "format": "date-time"
          },
          "StartShipmentDate": {
            "type": "string",
            "format": "date-time"
          },
          "StartTime": {
            "type": "string",
            "format": "date-time"
          },
          "UserAgentApplication": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.SearchOrdersResponse": {
        "type": "object",
        "properties": {
          "CustomerOrderStatuses": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ProductVariations": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "integer"
              }
            }
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Orders.OrderSearchResultItem"
          },
          "UserAgents": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "integer"
              }
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.SetCustomerReferencesOnOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "CustomerOrderID": {
            "type": "string"
          },
          "CustomerReference": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.SetDeliveryOrderData": {
        "required": [
          "OrderID",
          "DeliveryOrderData"
        ],
        "type": "object",
        "properties": {
          "DeliveryOrderData": {
            "$ref": "#/components/schemas/EVA.Core.Orders.DeliveryOrderData"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.SetDiscountProductOption": {
        "required": [
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.SetFiscalOrderData": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "FiscalID": {
            "type": "string"
          },
          "FiscalRemark": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          },
          "VatNumber": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.SetOrderBackendIdentifier": {
        "required": [
          "OrderID",
          "BackendSystemID",
          "BackendID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string",
            "description": "A unique identifier for the order, within the context of given `BackendSystemID`"
          },
          "BackendSystemID": {
            "type": "string",
            "description": "A code, free of choice for the calling 3rd party application creating the order"
          },
          "OrderID": {
            "type": "integer",
            "description": "The EVA order identifier"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.SetOrderSoldBy": {
        "required": [
          "UserID",
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer",
            "description": "The Order to set the SoldBy for. Must be an Order of type Sales."
          },
          "OrderLineID": {
            "type": "integer",
            "description": "If specified the SoldBy will only be set for the given OrderLine.\nIf SetOrderSoldBy is again called at a later time for the whole order (so without specifying an OrderLineID) then this value is not preserved.\n\nWhen the SoldBy has been set on an individual OrderLine then that SoldBy is not automatically set on newly created OrderLines."
          },
          "UserID": {
            "type": "integer",
            "description": "The User that will become the SoldBy. Must be of type Employee."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.SetPickupOrganizationUnit": {
        "required": [
          "OrderID",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.SetRemarkOnOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "Remark": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.SetRequestedDate": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "OrderLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.SetRequestedDate_OrderLineDto"
            }
          },
          "RequestedDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.SetRequestedDate_OrderLineDto": {
        "required": [
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          },
          "RequestedDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.SetSerialNumbers": {
        "required": [
          "OrderLineID",
          "SerialNumbers"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "SerialNumbers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.SetShippingMethod": {
        "required": [
          "ShippingMethodID",
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "OrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "RequestedDeliveryDate": {
            "type": "string",
            "description": "This date can be used to request a specific delivery date. If null, it will be sent at the first available date.",
            "format": "date-time"
          },
          "ShippingMethodID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.SetTransportOrderLineData": {
        "required": [
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "OrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "TransportOrderLineData": {
            "$ref": "#/components/schemas/EVA.Core.Orders.TransportOrderLineData"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.SetWarehouseOrderData": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "WarehouseOrderData": {
            "$ref": "#/components/schemas/EVA.Core.Orders.WarehouseOrderData"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ShipExternalOrder": {
        "required": [
          "FinalShipment",
          "Shipments"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string",
            "description": "Reference to the order that is being shipped - required when `ID` is omitted"
          },
          "BackendSystemID": {
            "type": "string",
            "description": "Reference to the system from which the order originated - required when `ID` is omitted"
          },
          "FinalShipment": {
            "type": "boolean",
            "description": "Indicates if this is the last shipment. If this is set to true and there are still lines that are not shipped, the lines will be cancelled"
          },
          "ID": {
            "type": "integer",
            "description": "ID of the order that is being shipped - required when `BackendID` and `BackendSystemID` are omitted"
          },
          "Shipments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ShipExternalOrder_Shipment"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ShipExternalOrder_Shipment": {
        "required": [
          "BackendSystemID",
          "BackendID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string",
            "description": "Reference number of the shipment"
          },
          "BackendSystemID": {
            "type": "string",
            "description": "Identifier of the system that created the shipment"
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldKeyValue"
            },
            "description": "Optional additional custom fields"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ShipExternalOrder_ShipmentLine"
            }
          },
          "PackageID": {
            "type": "integer"
          },
          "Packages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ShipExternalOrder_ShipmentPackage"
            }
          },
          "ShipFromOrganizationUnitID": {
            "type": "integer",
            "description": "If provided the Shipment will be created as being shipped from this OrganizationUnit, which affects which stock is mutated and the financial consequences of that."
          },
          "TrackingCode": {
            "type": "string",
            "description": "Optional tracking code that is stored on the shipment."
          },
          "TrackingLink": {
            "type": "string",
            "description": "Optional tracking link that is stored on the shipment"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ShipExternalOrder_ShipmentLine": {
        "required": [
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string",
            "description": "Used to identify the order line - required if ID and Barcode are omitted"
          },
          "Barcode": {
            "type": "string",
            "description": "Used to identify the order line - required if ID and BackendID are omitted"
          },
          "ID": {
            "type": "integer",
            "description": "Used to identify the order line - required if BackendID and Barcode are omitted"
          },
          "Quantity": {
            "type": "integer",
            "description": "Number of products that have been shipped"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ShipExternalOrder_ShipmentPackage": {
        "required": [
          "PackageID"
        ],
        "type": "object",
        "properties": {
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ShipExternalOrder_ShipmentLine"
            }
          },
          "PackageID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ShipExternalOrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ShipmentIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ShipOrder": {
        "required": [
          "FinalShipment",
          "OrderID",
          "Force"
        ],
        "type": "object",
        "properties": {
          "FinalShipment": {
            "type": "boolean"
          },
          "Force": {
            "type": "boolean",
            "description": "Use with caution.\nSet this to true if you want to skip requirements that would otherwise cause validation errors. Like shipping delivery lines, which you usually don't want from a shop."
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ShipOrder_ShipmentOrderLine"
            }
          },
          "OrderID": {
            "type": "integer"
          },
          "ShippedFromOrganizationUnitID": {
            "type": "integer",
            "description": "The OrganizationUnit the shipment was physically shipped from."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ShipOrder_ShipmentOrderLine": {
        "required": [
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "QuantityShipped": {
            "type": "integer"
          },
          "ShipmentBackendID": {
            "type": "string"
          },
          "TrackingCode": {
            "type": "string"
          },
          "TrackingLink": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ShipOrderLines": {
        "required": [
          "ShipmentDate"
        ],
        "type": "object",
        "properties": {
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ShipOrderLines_Line"
            }
          },
          "ShipmentBackendID": {
            "type": "string"
          },
          "ShipmentDate": {
            "type": "string",
            "format": "date-time"
          },
          "ShippedFromOrganizationUnitID": {
            "type": "integer",
            "description": "The OrganizationUnit the shipment was physically shipped from."
          },
          "TrackingCode": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ShipOrderLines_Line": {
        "required": [
          "ID",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "BackendReference": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ShipOrderLinesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ShipmentID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ShipOrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Shipping.ShipmentResultMessage"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ShipmentIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "ShippedOrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Shipping.ShipmentResultMessage": {
        "type": "object",
        "properties": {
          "Code": {
            "type": "string"
          },
          "Message": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ShoppingCartResponse": {
        "type": "object",
        "properties": {
          "AdditionalOrderData": {
            "$ref": "#/components/schemas/EVA.Core.Orders.AdditionalOrderData"
          },
          "Amounts": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OpenOrderAmounts"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ShoppingCart": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrderDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.SimpleOrderLine": {
        "required": [
          "TotalAmount",
          "TotalAmountInTax",
          "OrderLineID",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "Properties": {
            "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
          },
          "Quantity": {
            "type": "integer"
          },
          "TotalAmount": {
            "type": "number"
          },
          "TotalAmountInTax": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.SimpleShoppingCartResponse": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.SingleOrderLink": {
        "type": "object",
        "properties": {
          "OrderLink": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderDataForSingleOrderLink"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.Orders.AssociationTypeForSingleOrderLink"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.SplitOrderLine": {
        "required": [
          "OrderLineID",
          "QuantityToSplit"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "QuantityToSplit": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.SplitOrderLineResponse": {
        "required": [
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrderLineID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.StockOrganizationUnit": {
        "required": [
          "Reason",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          },
          "OrganizationUnitName": {
            "type": "string"
          },
          "Reason": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Returns.ReturnableStockOrganizationUnitReasons"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Suspended.ListSuspendedOrdersFilter": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "IsPaid": {
            "type": "boolean"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Taxes.GetTaxExemptionReasons": {
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer",
            "description": "If you have an OrderID available it can be specified to get a more accurate list of tax exemption reasons that is independent of your current OrganizationUnit.\nFor example if you have a US order but you are currently logged into a non-US organization, the result of this service won't be accurate unless you specify the OrderID."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Taxes.GetTaxExemptionReasonsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Reasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Taxes.GetTaxExemptionReasonsResponse_TaxExemptionReason"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.Taxes.GetTaxExemptionReasonsResponse_TaxExemptionReason": {
        "type": "object",
        "properties": {
          "Code": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.TransferOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.TransferOrderToOrganizationUnit": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.TransportOrderLineData": {
        "type": "object",
        "properties": {
          "PlannedDate": {
            "type": "string",
            "format": "date-time"
          },
          "Priority": {
            "type": "integer"
          },
          "Timeslot": {
            "type": "string"
          },
          "TransportID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.UpdateContractNumber": {
        "required": [
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "ContractNumber": {
            "type": "string"
          },
          "OrderLineID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.UpdateOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "AutomaticCancellationDate": {
            "type": "object"
          },
          "CustomOrderTypeID": {
            "type": "object"
          },
          "OrderCustomStatusID": {
            "type": "object"
          },
          "OrderCustomTypeID": {
            "type": "object"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.UpdateOrderAddressResponse": {
        "type": "object",
        "properties": {
          "BillingAddress": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDto"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "PickupAddress": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDto"
          },
          "ShippingAddress": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.UpdateOrderAddresses": {
        "required": [
          "CopyShippingAddressFromCustomer",
          "OrderID",
          "CopyBillingAddressFromCustomer"
        ],
        "type": "object",
        "properties": {
          "BillToAddress": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDataDto"
          },
          "CopyBillingAddressFromCustomer": {
            "type": "boolean"
          },
          "CopyShippingAddressFromCustomer": {
            "type": "boolean"
          },
          "OrderID": {
            "type": "integer"
          },
          "PickupAddress": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDataDto"
          },
          "ShipToAddress": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDataDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.UpdateOrderAddressesResponse": {
        "required": [
          "CreditcardAllowed"
        ],
        "type": "object",
        "properties": {
          "BillToAddress": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDto"
          },
          "CreditcardAllowed": {
            "type": "boolean"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "PickupAddress": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDto"
          },
          "ShipToAddress": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.UpdateOrderBillingAddress": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "Address": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDataDto"
          },
          "AddressBookID": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.UpdateOrderCheckoutOptions": {
        "required": [
          "OrderID",
          "Options"
        ],
        "type": "object",
        "properties": {
          "Options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.CheckoutOrderOption"
            }
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.UpdateOrderCurrency": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "CurrencyID": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.UpdateOrderCustomFields": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldKeyValue"
            }
          },
          "CustomFieldsByBackendID": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldByBackendValue"
            }
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.UpdateOrderCustomStatus": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "object"
          },
          "Description": {
            "type": "object"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.UpdateOrderCustomType": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "object"
          },
          "Description": {
            "type": "object"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.UpdateOrderLineCustomFields": {
        "required": [
          "ID",
          "CustomFields"
        ],
        "type": "object",
        "properties": {
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldKeyValue"
            }
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.UpdateOrderLineStockLabel": {
        "required": [
          "StockLabelID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "StockLabelID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.UpdateOrderLink": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "PrimaryOrderID": {
            "type": "integer"
          },
          "RelatedOrderID": {
            "type": "integer"
          },
          "TypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.UpdateOrderLinkType": {
        "required": [
          "ID",
          "Name"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.UpdateOrderOptions": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "AllowPartialFulfillment": {
            "type": "boolean"
          },
          "IgnoreDiscounts": {
            "type": "boolean"
          },
          "IgnoreGiftWrappingCosts": {
            "type": "boolean"
          },
          "IgnoreShippingCosts": {
            "type": "boolean"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.UpdateOrderPickupAddress": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "Address": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDataDto"
          },
          "AddressBookID": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.UpdateOrderShippingAddress": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "Address": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDataDto"
          },
          "AddressBookID": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.UpdateOrderShippingStatus": {
        "required": [
          "Lines"
        ],
        "type": "object",
        "properties": {
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.UpdateOrderShippingStatusLine"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.UpdateOrderShippingStatusLine": {
        "required": [
          "Type"
        ],
        "type": "object",
        "properties": {
          "BackendOrderID": {
            "type": "string",
            "description": "Unique identifier for the order, in respect to the `BackendSystemID`"
          },
          "BackendOrderLineID": {
            "type": "string",
            "description": "BackendID of the EVA order line this update is specific for"
          },
          "BackendSystemID": {
            "type": "string",
            "description": "Owner of the `BackendOrderID`"
          },
          "Date": {
            "type": "string",
            "description": "Date the event occurred - leave empty for 'now'.",
            "format": "date-time"
          },
          "Description": {
            "type": "string",
            "description": "Optional, additional description, most commonly for the carrier status update code description for CarrierStatus types"
          },
          "OrderID": {
            "type": "integer",
            "description": "Identifier of the EVA order this update is specific for"
          },
          "OrderLineID": {
            "type": "integer",
            "description": "Identifier of the EVA order line this update is specific for"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.Orders.OrderShippingStatusType"
          },
          "Value": {
            "type": "string",
            "description": "Optional, additional information, most commonly for the carrier status update code (B01, D01, ...) for CarrierStatus types"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.UpdateSerialNumber": {
        "required": [
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "SerialNumber": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ValidateExportSchedule": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "OrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ValidateExportScheduleResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ValidationResult": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Export.OrderExportValidationResult"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ValidateOrderShipment": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ValidateOrderShipment_ShipmentOrderLine"
            }
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ValidateOrderShipment_ShipmentOrderLine": {
        "required": [
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "QuantityShipped": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ValidateOrderShipmentResponse": {
        "required": [
          "OpenAmountForShipment",
          "PaidAmount",
          "IsValid"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "IsValid": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OpenAmountForShipment": {
            "type": "number"
          },
          "PaidAmount": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ValidateRequiredDataForOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "RequiredFor": {
            "$ref": "#/components/schemas/EVA.Core.Validation.RequiredFor"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.ValidateRequiredDataForOrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ValidatedData": {
            "$ref": "#/components/schemas/EVA.Core.Validation.RequiredDataValidationResult"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.VerifyCustomer": {
        "required": [
          "VerificationCode",
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "VerificationCode": {
            "type": "string",
            "description": "Retrieved from the `ParseBarcode` result `VerificationCode`"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.VerifyOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Orders.WarehouseOrderData": {
        "required": [
          "AllowPartialPick"
        ],
        "type": "object",
        "properties": {
          "AllowPartialPick": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnitTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.BulkUpdateOrganizationUnitSettings": {
        "type": "object",
        "properties": {
          "AssortmentID": {
            "type": "object"
          },
          "AttachedToUserID": {
            "type": "object"
          },
          "CashHandlerID": {
            "type": "object"
          },
          "CostPriceCalculationMethod": {
            "type": "object"
          },
          "CountryID": {
            "type": "object"
          },
          "CountrySubdivisionID": {
            "type": "object"
          },
          "EnableEndlessSupplierStock": {
            "type": "object"
          },
          "LanguageID": {
            "type": "object"
          },
          "OrganizationUnitIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "RegisterCashLimit": {
            "type": "object"
          },
          "ReturnOrganizationUnitID": {
            "type": "object"
          },
          "RoleSetID": {
            "type": "object"
          },
          "SafeCashLimit": {
            "type": "object"
          },
          "Subnet": {
            "type": "object"
          },
          "TimeZone": {
            "type": "object"
          },
          "Type": {
            "type": "object"
          },
          "UseForAccounting": {
            "type": "object"
          },
          "VisibilityGroupID": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.CreateAnonymousToken": {
        "required": [
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "LanguageID": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.CreateAnonymousTokenResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Token": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.CreateOrganizationUnit": {
        "type": "object",
        "properties": {
          "ToCreate": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.CreateOrganizationUnitDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.CreateOrganizationUnitDto": {
        "required": [
          "Type",
          "UseForAccounting",
          "ParentID",
          "Status",
          "EnableEndlessSupplierStock",
          "Name",
          "CostPriceCurrencyID",
          "CurrencyID"
        ],
        "type": "object",
        "properties": {
          "Address": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDataDto"
          },
          "AssortmentID": {
            "type": "integer"
          },
          "AttachedToUserID": {
            "type": "integer"
          },
          "BIC": {
            "type": "string"
          },
          "BackendCompanyID": {
            "type": "string"
          },
          "BackendID": {
            "type": "string"
          },
          "BackendRelationID": {
            "type": "string"
          },
          "BankAccount": {
            "type": "string"
          },
          "BranchNumber": {
            "type": "string"
          },
          "CashHandlerID": {
            "type": "integer"
          },
          "CompanyID": {
            "type": "integer"
          },
          "CostPriceCalculationMethod": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.CostPriceCalculationMethod"
          },
          "CostPriceCurrencyID": {
            "type": "string"
          },
          "CountryID": {
            "type": "string"
          },
          "CountrySubdivisionID": {
            "type": "string"
          },
          "CurrencyID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string"
          },
          "EnableEndlessSupplierStock": {
            "type": "boolean"
          },
          "GlobalLocationNumber": {
            "type": "string"
          },
          "IpAddress": {
            "type": "string"
          },
          "LanguageID": {
            "type": "string"
          },
          "Latitude": {
            "type": "number"
          },
          "Longitude": {
            "type": "number"
          },
          "Name": {
            "type": "string"
          },
          "Notes": {
            "type": "string"
          },
          "OpeningHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.CreateOrganizationUnitDto_OpeningHour"
            }
          },
          "ParentID": {
            "type": "integer"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "RegisterCashLimit": {
            "type": "number"
          },
          "ReturnOrganizationUnitID": {
            "type": "integer"
          },
          "RoleSetID": {
            "type": "integer"
          },
          "SafeCashLimit": {
            "type": "number"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrganizationUnitStatus"
          },
          "Subnet": {
            "type": "string"
          },
          "TimeZone": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnitTypes"
          },
          "UseForAccounting": {
            "type": "boolean"
          },
          "VisibilityGroupID": {
            "type": "integer"
          },
          "Website": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.CreateOrganizationUnitDto_OpeningHour": {
        "required": [
          "TypeID"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "DayOfWeek": {
            "$ref": "#/components/schemas/EVA.Core.DayOfWeek"
          },
          "Description": {
            "type": "string"
          },
          "EndTime": {
            "type": "string"
          },
          "StartTime": {
            "type": "string"
          },
          "TypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.DeleteAnonymousToken": {
        "type": "object",
        "properties": {
          "Token": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.DeleteOrganizationUnit": {
        "required": [
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.Dto.DayOpeningHours": {
        "required": [
          "IsClosed"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "IsClosed": {
            "type": "boolean"
          },
          "TimeSlots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.Dto.TimeSlot"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.Dto.ExtendedOpeningHours": {
        "required": [
          "TypeID",
          "Tuesday",
          "Saturday",
          "Sunday",
          "Friday",
          "TypeName",
          "Monday",
          "SpecialOpeningHours",
          "Wednesday",
          "Thursday"
        ],
        "type": "object",
        "properties": {
          "Friday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.Dto.DayOpeningHours"
          },
          "Monday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.Dto.DayOpeningHours"
          },
          "Saturday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.Dto.DayOpeningHours"
          },
          "SpecialOpeningHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.Dto.SpecialOpeningHours"
            }
          },
          "Sunday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.Dto.DayOpeningHours"
          },
          "Thursday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.Dto.DayOpeningHours"
          },
          "Tuesday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.Dto.DayOpeningHours"
          },
          "TypeBackendID": {
            "type": "string"
          },
          "TypeID": {
            "type": "integer"
          },
          "TypeName": {
            "type": "string"
          },
          "Wednesday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.Dto.DayOpeningHours"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.Dto.OpeningHoursDto": {
        "required": [
          "IsActive",
          "TypeID",
          "IsSpecial",
          "ID",
          "IsClosed",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "DayOfWeek": {
            "$ref": "#/components/schemas/EVA.Core.DayOfWeek"
          },
          "Description": {
            "type": "string"
          },
          "EndTime": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "IsActive": {
            "type": "boolean"
          },
          "IsClosed": {
            "type": "boolean"
          },
          "IsSpecial": {
            "type": "boolean"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "OrganizationUnitName": {
            "type": "string",
            "description": "Only set when returned outside OrganizationUnit context"
          },
          "StartTime": {
            "type": "string"
          },
          "TypeID": {
            "type": "integer"
          },
          "TypeName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.Dto.OrganizationUnitDto": {
        "required": [
          "Type",
          "ID",
          "Status",
          "OpeningHours",
          "Name",
          "CostPriceCurrencyID",
          "ExtendedOpeningHours",
          "CurrencyID",
          "CountryID"
        ],
        "type": "object",
        "properties": {
          "Address": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDto"
          },
          "AddressID": {
            "type": "integer"
          },
          "BIC": {
            "type": "string"
          },
          "BackendID": {
            "type": "string"
          },
          "CompanyID": {
            "type": "integer"
          },
          "CostPriceCurrencyID": {
            "type": "string"
          },
          "CountryID": {
            "type": "string"
          },
          "CurrencyID": {
            "type": "string"
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.CustomFields.CustomFieldResponse"
            }
          },
          "Description": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string"
          },
          "ExtendedOpeningHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.Dto.ExtendedOpeningHours"
            }
          },
          "ID": {
            "type": "integer"
          },
          "Latitude": {
            "type": "number"
          },
          "Longitude": {
            "type": "number"
          },
          "Name": {
            "type": "string"
          },
          "OpeningHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.Dto.OpeningHoursDto"
            }
          },
          "ParentID": {
            "type": "integer"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrganizationUnitStatus"
          },
          "Subnet": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnitTypes"
          },
          "Website": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.Dto.SpecialOpeningHours": {
        "required": [
          "Date",
          "IsClosed"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string"
          },
          "IsClosed": {
            "type": "boolean"
          },
          "TimeSlots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.Dto.TimeSlot"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.Dto.TimeSlot": {
        "required": [
          "EndTime",
          "StartTime"
        ],
        "type": "object",
        "properties": {
          "EndTime": {
            "type": "string"
          },
          "StartTime": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetAnonymousToken": {
        "required": [
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "LanguageID": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetAnonymousTokenResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Token": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetAvailableCashHandlers": {
        "required": [
          "CurrencyID"
        ],
        "type": "object",
        "properties": {
          "CurrencyID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetAvailableCashHandlersResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Handlers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetAvailableCashHandlersResponse_CashHandler"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetAvailableCashHandlersResponse_CashHandler": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "CurrencyID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetFlatOrganizationUnitTree": {
        "required": [
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetFlatOrganizationUnitTreeResponse": {
        "required": [
          "OrganizationUnits"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrganizationUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetFlatOrganizationUnitTreeResponse_OrganizationUnitDto"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetFlatOrganizationUnitTreeResponse_OrganizationUnitDto": {
        "required": [
          "ID",
          "ParentID",
          "Name"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "ParentID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetOrganizationUnitDetailed": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetOrganizationUnitDetailedResponse": {
        "required": [
          "Type",
          "ID",
          "Status"
        ],
        "type": "object",
        "properties": {
          "Address": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDto"
          },
          "AddressID": {
            "type": "integer"
          },
          "BIC": {
            "type": "string"
          },
          "BackendID": {
            "type": "string"
          },
          "BackendRelationID": {
            "type": "string"
          },
          "BankAccount": {
            "type": "string"
          },
          "CompanyID": {
            "type": "integer"
          },
          "CompanyName": {
            "type": "string"
          },
          "CurrencyID": {
            "type": "string"
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.CustomFields.CustomFieldResponse"
            }
          },
          "Description": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ExtendedOpeningHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.Dto.ExtendedOpeningHours"
            }
          },
          "ID": {
            "type": "integer"
          },
          "Latitude": {
            "type": "number"
          },
          "Longitude": {
            "type": "number"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Name": {
            "type": "string"
          },
          "OpeningHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.Dto.OpeningHoursDto"
            }
          },
          "ParentID": {
            "type": "integer"
          },
          "ParentName": {
            "type": "string"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "RegisterCashLimit": {
            "type": "number"
          },
          "SafeCashLimit": {
            "type": "number"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrganizationUnitStatus"
          },
          "Subnet": {
            "type": "string"
          },
          "TimeZone": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnitTypes"
          },
          "VisibilityGroupID": {
            "type": "integer"
          },
          "VisibilityGroupName": {
            "type": "string"
          },
          "Website": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetOrganizationUnitNotes": {
        "required": [
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetOrganizationUnitNotesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Notes": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetOrganizationUnitSettings": {
        "required": [
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetOrganizationUnitSettingsResponse": {
        "required": [
          "Type",
          "UseForAccounting",
          "CostPriceCalculationMethod",
          "ID",
          "RoleSetID"
        ],
        "type": "object",
        "properties": {
          "AssortmentID": {
            "type": "integer"
          },
          "AssortmentName": {
            "type": "string"
          },
          "AttachedToUserID": {
            "type": "integer"
          },
          "BackendCompanyID": {
            "type": "string"
          },
          "BackendID": {
            "type": "string"
          },
          "BackendRelationID": {
            "type": "string"
          },
          "BranchNumber": {
            "type": "string"
          },
          "CashHandlerID": {
            "type": "integer"
          },
          "CashHandlerName": {
            "type": "string"
          },
          "CostPriceCalculationMethod": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.CostPriceCalculationMethod"
          },
          "CostPriceCurrencyID": {
            "type": "string"
          },
          "CountryID": {
            "type": "string"
          },
          "CurrencyID": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "GlobalLocationNumber": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "IpAddress": {
            "type": "string"
          },
          "LanguageID": {
            "type": "string"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ParentID": {
            "type": "integer"
          },
          "Region": {
            "type": "string"
          },
          "RegisterCashLimit": {
            "type": "number"
          },
          "ReturnOrganizationUnitID": {
            "type": "integer"
          },
          "ReturnOrganizationUnitName": {
            "type": "string"
          },
          "RoleSetID": {
            "type": "integer"
          },
          "RoleSetName": {
            "type": "string"
          },
          "SafeCashLimit": {
            "type": "number"
          },
          "Subnet": {
            "type": "string"
          },
          "TimeZone": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnitTypes"
          },
          "UseForAccounting": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetOrganizationUnitSummary": {
        "required": [
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetOrganizationUnitSummaryResponse": {
        "required": [
          "ID",
          "Longitude",
          "Latitude"
        ],
        "type": "object",
        "properties": {
          "Address": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDto"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Latitude": {
            "type": "number"
          },
          "Longitude": {
            "type": "number"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Name": {
            "type": "string"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "RegularOpeningHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Dates.RegularOpeningHours"
            }
          },
          "UpcomingOpeningHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Dates.WeekOpeningsDto"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetOrganizationUnitTree": {
        "required": [
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetOrganizationUnitTreeResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OrganizationUnitTreeDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetOrganizationUnitsStructure": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetOrganizationUnitsStructureResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrganizationUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OrganizationUnitStructure"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetRequiredOrganizationUnitFields": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetRequiredOrganizationUnitFieldsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "RequiredFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetSetsByOrganizationUnit": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetSetsByOrganizationUnitResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetSetsByOrganizationUnitResponse_OrganizationUnitSetDetails"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetSetsByOrganizationUnitResponse_OrganizationUnitSetDetails": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "Subsets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetSetsByOrganizationUnitResponse_OrganizationUnitSetDetails"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetShopsByProximity": {
        "required": [
          "Longitude",
          "HasStock",
          "Latitude"
        ],
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string",
            "description": "Country code of the user (ISO 3166-1)"
          },
          "HasStock": {
            "type": "boolean",
            "description": "Filter only stores with available stock"
          },
          "Latitude": {
            "type": "number"
          },
          "Limit": {
            "type": "integer",
            "description": "Amount of stores to return, defaults to setting `GetShopsByProximityDefaultLimit` / 10"
          },
          "Longitude": {
            "type": "number"
          },
          "ProductID": {
            "type": "integer"
          },
          "Range": {
            "type": "integer",
            "description": "Range around the coordinates to look for shops, in meters, defaults to setting `DefaultShopProximityRange` / 50_000"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrganizationUnitStatus"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetShopsByProximityResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Shops": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetShopsByProximityResponse_ShopInfo"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetShopsByProximityResponse_ShopInfo": {
        "required": [
          "Distance",
          "ID",
          "Longitude",
          "Latitude"
        ],
        "type": "object",
        "properties": {
          "Address": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDto"
          },
          "Distance": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "Latitude": {
            "type": "number"
          },
          "Longitude": {
            "type": "number"
          },
          "Name": {
            "type": "string"
          },
          "PhoneNumber": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetWebshops": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetWebshopsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Webshops": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.GetWebshopsResponse_WebshopDto"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.GetWebshopsResponse_WebshopDto": {
        "required": [
          "ID",
          "Name"
        ],
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.ImportOrganizationUnits": {
        "type": "object",
        "properties": {
          "OrganizationUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.ImportOrganizationUnits_ImportOrganizationUnit"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.ImportOrganizationUnits_ImportOrganizationUnit": {
        "required": [
          "ID",
          "ParentID",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Address": {
            "type": "object"
          },
          "CompanyID": {
            "type": "object"
          },
          "CostPriceCurrencyID": {
            "type": "string"
          },
          "CountryID": {
            "type": "object"
          },
          "CountrySubdivisionID": {
            "type": "object"
          },
          "CurrencyID": {
            "type": "string"
          },
          "CustomFields": {
            "type": "object",
            "description": "Optional additional custom fields"
          },
          "Description": {
            "type": "object"
          },
          "EmailAddress": {
            "type": "object"
          },
          "ID": {
            "type": "string",
            "description": "Your identifier for an organization unit (mapped as `BackendID`)"
          },
          "IsDeleted": {
            "type": "object"
          },
          "LanguageID": {
            "type": "object"
          },
          "Latitude": {
            "type": "object"
          },
          "Longitude": {
            "type": "object"
          },
          "Name": {
            "type": "string",
            "description": "Name of the organization unit"
          },
          "OpeningHours": {
            "type": "object"
          },
          "ParentID": {
            "type": "string",
            "description": "Your identifier for a parent organization unit (mapped as `BackendID`)"
          },
          "PhoneNumber": {
            "type": "object"
          },
          "Region": {
            "type": "object"
          },
          "ReturnOrganizationUnitID": {
            "type": "object"
          },
          "Status": {
            "type": "object"
          },
          "Subnet": {
            "type": "object"
          },
          "TimeZone": {
            "type": "object"
          },
          "Type": {
            "type": "object"
          },
          "VatNumber": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.ImportOrganizationUnitsResponse": {
        "type": "object",
        "properties": {
          "Created": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Updated": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.ListOpeningHoursTemplatesFilter": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "OpeningHoursTypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.ListOpeningHoursTemplatesOrganizationUnitSetsFilter": {
        "type": "object",
        "properties": {
          "OpeningHoursTemplateID": {
            "type": "integer"
          },
          "OpeningHoursTypeID": {
            "type": "integer"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.ListOrganizationUnitSummaries": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.OrganizationUnits.ListOrganizationUnitsFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.ListOrganizationUnitSummariesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.OrganizationUnits.ListOrganizationUnitSummariesResponse_OrganizationUnit"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.ListOrganizationUnitSummariesResponse_OrganizationUnit": {
        "required": [
          "ID",
          "Name",
          "CurrencyID",
          "CountryID"
        ],
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "CurrencyID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "LanguageID": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "ParentID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.ListOrganizationUnitsDetailed": {
        "type": "object",
        "properties": {
          "Excluded": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.ListOrganizationUnitsDetailed_ExcludedProperties"
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.OrganizationUnits.ListOrganizationUnitsFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.ListOrganizationUnitsDetailed_ExcludedProperties": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.ListOrganizationUnitsDetailedResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.OrganizationUnits.ListOrganizationUnitsDetailedResponse_OrganizationUnit"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.ListOrganizationUnitsDetailedResponse_OrganizationUnit": {
        "required": [
          "Type",
          "ID",
          "Status",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Address": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDto"
          },
          "BIC": {
            "type": "string"
          },
          "BackendID": {
            "type": "string"
          },
          "CompanyID": {
            "type": "integer"
          },
          "CurrencyID": {
            "type": "string"
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.CustomFields.CustomFieldResponse"
            }
          },
          "Description": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Latitude": {
            "type": "number"
          },
          "Longitude": {
            "type": "number"
          },
          "Name": {
            "type": "string"
          },
          "ParentID": {
            "type": "integer"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "RegularOpeningHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Dates.RegularOpeningHours"
            }
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrganizationUnitStatus"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnitTypes"
          },
          "UpcomingOpeningHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Dates.WeekOpeningsDto"
            }
          },
          "Website": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.ListOrganizationUnitsFilter": {
        "type": "object",
        "properties": {
          "BackendIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "CompanyID": {
            "type": "integer"
          },
          "CountryIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "CurrencyID": {
            "type": "string"
          },
          "Functionality": {
            "type": "string"
          },
          "FunctionalityScope": {
            "$ref": "#/components/schemas/EVA.Core.Security.FunctionalityScope"
          },
          "IDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "Name": {
            "type": "string"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "ParentID": {
            "type": "integer"
          },
          "PaymentTypeID": {
            "type": "integer"
          },
          "RoleSetID": {
            "type": "integer"
          },
          "StatusID": {
            "type": "integer"
          },
          "TypeID": {
            "type": "integer"
          },
          "VisibilityGroupID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.ListShopsByProximity": {
        "required": [
          "Longitude",
          "Latitude"
        ],
        "type": "object",
        "properties": {
          "Latitude": {
            "type": "number",
            "description": "Latitude of a user or device of some kind to search stores that are nearby."
          },
          "Longitude": {
            "type": "number",
            "description": "Longitude of a user or device of some kind to search stores that are nearby."
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.ListShopsByProximityResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.OrganizationUnits.ListShopsByProximityResponse_ShopInfo"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.ListShopsByProximityResponse_ShopInfo": {
        "required": [
          "ID",
          "Longitude",
          "Latitude"
        ],
        "type": "object",
        "properties": {
          "Address": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDto"
          },
          "ID": {
            "type": "integer"
          },
          "Latitude": {
            "type": "number"
          },
          "Longitude": {
            "type": "number"
          },
          "Name": {
            "type": "string"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "RegularOpeningHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Dates.RegularOpeningHours"
            }
          },
          "UpcomingOpeningHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Dates.WeekOpeningsDto"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.ListShopsInArea": {
        "required": [
          "SouthEast",
          "NorthWest"
        ],
        "type": "object",
        "properties": {
          "NorthWest": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.ListShopsInArea_Coordinate"
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SouthEast": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.ListShopsInArea_Coordinate"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrganizationUnitStatus"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.ListShopsInArea_Coordinate": {
        "required": [
          "Longitude",
          "Latitude"
        ],
        "type": "object",
        "properties": {
          "Latitude": {
            "type": "number"
          },
          "Longitude": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.ListShopsInAreaResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.OrganizationUnits.ListShopsInAreaResponse_ShopInfo"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.ListShopsInAreaResponse_ShopInfo": {
        "required": [
          "ID",
          "Longitude",
          "Latitude"
        ],
        "type": "object",
        "properties": {
          "Address": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDto"
          },
          "ID": {
            "type": "integer"
          },
          "Latitude": {
            "type": "number"
          },
          "Longitude": {
            "type": "number"
          },
          "Name": {
            "type": "string"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "RegularOpeningHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Dates.RegularOpeningHours"
            }
          },
          "UpcomingOpeningHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Dates.WeekOpeningsDto"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.OpeningHoursTemplateDay": {
        "required": [
          "IsClosed"
        ],
        "type": "object",
        "properties": {
          "DayOpeningTimes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateTimeSlot"
            }
          },
          "Description": {
            "type": "string"
          },
          "IsClosed": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.OpeningHoursTemplateTimeSlot": {
        "required": [
          "EndTime",
          "StartTime"
        ],
        "type": "object",
        "properties": {
          "EndTime": {
            "type": "string"
          },
          "StartTime": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.OrganizationUnitStructure": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OrganizationUnitStructure"
            }
          },
          "ElevationFunctionalities": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.Security.FunctionalityScope"
            }
          },
          "Functionalities": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.Security.FunctionalityScope"
            }
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.OrganizationUnitTreeDto": {
        "required": [
          "ID",
          "Children",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OrganizationUnitTreeDto"
            }
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.SetOrganizationUnitNotes": {
        "required": [
          "Notes",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "Notes": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.UpdateCustomFieldsForOrganizationUnits": {
        "type": "object",
        "properties": {
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldKeyValue"
            },
            "description": "The values in here will be merged with existing custom field values"
          },
          "OrganizationUnitIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "OrganizationUnitSetID": {
            "type": "integer",
            "description": "When set, OrganizationUnitIDs will be ignored and instead all organization units for this set will be updated"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.UpdateOrganizationUnit": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Address": {
            "type": "object"
          },
          "BIC": {
            "type": "object"
          },
          "BankAccount": {
            "type": "object"
          },
          "BranchNumber": {
            "type": "object"
          },
          "CompanyID": {
            "type": "object"
          },
          "CustomFields": {
            "type": "object",
            "description": "Optional additional custom fields"
          },
          "Description": {
            "type": "object"
          },
          "EmailAddress": {
            "type": "object"
          },
          "ID": {
            "type": "integer"
          },
          "Latitude": {
            "type": "object"
          },
          "Longitude": {
            "type": "object"
          },
          "Name": {
            "type": "object"
          },
          "PhoneNumber": {
            "type": "object"
          },
          "Status": {
            "type": "object"
          },
          "Website": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.OrganizationUnits.UpdateOrganizationUnitSettings": {
        "required": [
          "UseForAccounting",
          "ID",
          "EnableEndlessSupplierStock",
          "Name",
          "CountryID"
        ],
        "type": "object",
        "properties": {
          "Address": {
            "type": "object"
          },
          "AssortmentID": {
            "type": "object"
          },
          "AttachedToUserID": {
            "type": "object"
          },
          "BIC": {
            "type": "object"
          },
          "BackendCompanyID": {
            "type": "object"
          },
          "BackendID": {
            "type": "object"
          },
          "BackendRelationID": {
            "type": "object"
          },
          "BankAccount": {
            "type": "object"
          },
          "BranchNumber": {
            "type": "object"
          },
          "CashHandlerID": {
            "type": "object"
          },
          "CompanyID": {
            "type": "object"
          },
          "CostPriceCalculationMethod": {
            "type": "object"
          },
          "CountryID": {
            "type": "object"
          },
          "CountrySubdivisionID": {
            "type": "object"
          },
          "CustomFields": {
            "type": "object",
            "description": "Optional additional custom fields"
          },
          "Description": {
            "type": "object"
          },
          "EmailAddress": {
            "type": "object"
          },
          "EnableEndlessSupplierStock": {
            "type": "object"
          },
          "GlobalLocationNumber": {
            "type": "object"
          },
          "ID": {
            "type": "integer"
          },
          "IpAddress": {
            "type": "object"
          },
          "LanguageID": {
            "type": "object"
          },
          "Latitude": {
            "type": "object"
          },
          "Longitude": {
            "type": "object"
          },
          "Name": {
            "type": "object"
          },
          "ParentID": {
            "type": "object"
          },
          "PhoneNumber": {
            "type": "object"
          },
          "RegisterCashLimit": {
            "type": "object"
          },
          "ReturnOrganizationUnitID": {
            "type": "object"
          },
          "RoleSetID": {
            "type": "object"
          },
          "SafeCashLimit": {
            "type": "object"
          },
          "Status": {
            "type": "object"
          },
          "Subnet": {
            "type": "object"
          },
          "TimeZone": {
            "type": "object"
          },
          "Type": {
            "type": "object"
          },
          "UseForAccounting": {
            "type": "object"
          },
          "VisibilityGroupID": {
            "type": "object"
          },
          "Website": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Addresses.ListAddressBookFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.ListAddressBookFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Airport.ListFlightsFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Airport.ListFlightsFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Currencies.ListCurrenciesFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Currencies.ListCurrenciesFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Devices.ListDevicesFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Devices.ListDevicesFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Devices.ListStationsFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Devices.ListStationsFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Finance.Cash.ListCashDepositsFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Finance.Cash.ListCashDepositsFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Finance.Cash.ListCashExpensesFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Finance.Cash.ListCashExpensesFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Finance.Cash.ListCashTransactionLedgerFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Finance.Cash.ListCashTransactionLedgerFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Finance.ListAuditsFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Finance.ListAuditsFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Finance.ListFinancialPeriodExports2Filter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Finance.ListFinancialPeriodExports2Filter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Finance.ListFinancialPeriodsFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Finance.ListFinancialPeriodsFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Finance.ListGeneralLedgersFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Finance.ListGeneralLedgersFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Invoicing.ListControlDocumentsFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Invoicing.ListControlDocumentsFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Invoicing.ListInvoiceFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Invoicing.ListInvoiceFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Invoicing.ListInvoiceLedgerFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Invoicing.ListInvoiceLedgerFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Invoicing.ListManualInvoicesFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Invoicing.ListManualInvoicesFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.MessageQueueing.ListMessageQueueErrorsFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.MessageQueueing.ListMessageQueueErrorsFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Orders.ListOrderCustomStatusFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderCustomStatusFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Orders.ListOrderCustomTypesFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderCustomTypesFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Orders.ListOrderLedgerFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderLedgerFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Orders.ListOrderLinesFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderLinesFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Orders.ListOrdersForCustomerFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Orders.ListOrdersForCustomerFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Orders.ReturnToSupplier.ListReturnToSupplierRequestsFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.ListReturnToSupplierRequestsFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Orders.Suspended.ListSuspendedOrdersFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Suspended.ListSuspendedOrdersFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.OrganizationUnits.ListOpeningHoursTemplatesFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.ListOpeningHoursTemplatesFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.OrganizationUnits.ListOpeningHoursTemplatesOrganizationUnitSetsFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.ListOpeningHoursTemplatesOrganizationUnitSetsFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.OrganizationUnits.ListOrganizationUnitsFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.ListOrganizationUnitsFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Payments.ListPaymentTransactionLedgerFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Payments.ListPaymentTransactionLedgerFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Pricing.ListTaxCodesFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Pricing.ListTaxCodesFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Pricing.ListTaxExemptionReasonModelFilters": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Pricing.ListTaxExemptionReasonModelFilters"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Pricing.ListTaxRateModelFilters": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Pricing.ListTaxRateModelFilters"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.ProductBundles.ListProductBundlesFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.ProductBundles.ListProductBundlesFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.RecurringTasks.ListRecurringTasks2_ListRecurringTasksFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.RecurringTasks.ListRecurringTasks2_ListRecurringTasksFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Repositories.ListOrderInterventionTasksFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Repositories.ListOrderInterventionTasksFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Security.ListApiKeysFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Security.ListApiKeysFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Shipments.ListPurchaseOrderShipmentsFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Shipments.ListPurchaseOrderShipmentsFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Shipments.ListShipmentLedgerFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Shipments.ListShipmentLedgerFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Shipments.ListShipmentLinesFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Shipments.ListShipmentLinesFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Shipments.ListShipmentLinesToInvoiceFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Shipments.ListShipmentLinesToInvoiceFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Shipments.ListShipmentPackagesFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "type": "object"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Shipments.ListShipmentsToInvoiceFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Shipments.ListShipmentsToInvoiceFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.StockMutations.ListStockMutationsFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.StockMutations.ListStockMutationsFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Suppliers.ListOrganizationUnitSuppliersFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Suppliers.ListOrganizationUnitSuppliersFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Translations.ListEntityTranslationsFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Translations.ListEntityTranslationsFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Translations.ListStringTranslationsFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Translations.ListStringTranslationsFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.Types.ReturnToSupplier.ListReturnToSupplierTaskOrderLineFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Types.ReturnToSupplier.ListReturnToSupplierTaskOrderLineFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.UserBorrowedProducts.ListUserBorrowedProductsFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.UserBorrowedProducts.ListUserBorrowedProductsFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.UserInteractions.ListUserInteractionsFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.UserInteractions.ListUserInteractionsFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.UserTasks.FullStockCountUserTask.ListFullStockCountLabelProductsFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.UserTasks.FullStockCountUserTask.ListFullStockCountLabelProductsFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.UserTasks.FullStockCountUserTask.ListFullStockCountLabelSummaryFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.UserTasks.FullStockCountUserTask.ListFullStockCountLabelSummaryFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.UserTasks.FullStockCountUserTask.ListFullStockCountLabelsFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.UserTasks.FullStockCountUserTask.ListFullStockCountLabelsFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.UserTasks.FullStockCountUserTask.ListFullStockCountResultFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.UserTasks.FullStockCountUserTask.ListFullStockCountResultFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.UserTasks.FullStockCountUserTask.ListFullStockCountSummaryFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.UserTasks.FullStockCountUserTask.ListFullStockCountSummaryFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.UserTasks.FullStockCountUserTask.ListFullStockCountsFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.UserTasks.FullStockCountUserTask.ListFullStockCountsFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.UserTasks.ListUserTaskTypeOrganizationUnitSetsFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.UserTasks.ListUserTaskTypeOrganizationUnitSetsFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.UserTasks.ListUserTasksFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.UserTasks.ListUserTasksFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.UserTasks.StockReplenishmentUserTask.ListStockReplenishmentTaskDataFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.UserTasks.StockReplenishmentUserTask.ListStockReplenishmentTaskDataFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.UserTasks.ZonedCycleCountUserTask.ListCycleCountGroupsFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.UserTasks.ZonedCycleCountUserTask.ListCycleCountGroupsFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.UserTasks.ZonedCycleCountUserTask.ListOrganizationUnitCycleCountZonesFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.UserTasks.ZonedCycleCountUserTask.ListOrganizationUnitCycleCountZonesFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.UserTasks.ZonedCycleCountUserTask.ListZonedCycleCountSchedulesFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.UserTasks.ZonedCycleCountUserTask.ListZonedCycleCountSchedulesFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_EVA.Core.UserTasks.ZonedCycleCountUserTask.ListZonedCycleCountsFilter": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.UserTasks.ZonedCycleCountUserTask.ListZonedCycleCountsFilter"
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageConfig_1_map_string_string": {
        "required": [
          "SortDirection"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageTokenConfig_1_EVA.Core.Finance.ListFinancialEventsFilter": {
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Finance.ListFinancialEventsFilter"
          },
          "Limit": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageTokenConfig_1_EVA.Core.Finance.ListGeneralLedgersFilter": {
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Finance.ListGeneralLedgersFilter"
          },
          "Limit": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageTokenConfig_1_EVA.Core.Invoicing.ListInvoiceCompanyMappingFilter": {
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Invoicing.ListInvoiceCompanyMappingFilter"
          },
          "Limit": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageTokenConfig_1_EVA.Core.ListScriptHistoryFilter": {
        "type": "object",
        "properties": {
          "Filter": {
            "type": "object"
          },
          "Limit": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageTokenConfig_1_EVA.Core.ListScriptsFilter": {
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.ListScriptsFilter"
          },
          "Limit": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageTokenConfig_1_EVA.Core.Orders.ListOrderFulfillmentLinesFilter": {
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderFulfillmentLinesFilter"
          },
          "Limit": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageTokenConfig_1_EVA.Core.Orders.ListOrderFulfillmentRejectionsFilter": {
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderFulfillmentRejectionsFilter"
          },
          "Limit": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageTokenConfig_1_EVA.Core.Orders.ListOrderFulfillmentsFilter": {
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderFulfillmentsFilter"
          },
          "Limit": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageTokenConfig_1_EVA.Core.Pricing.ListProductPricesFilter": {
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Pricing.ListProductPricesFilter"
          },
          "Limit": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageTokenConfig_1_EVA.Core.Security.ListApiKeysFilter": {
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Security.ListApiKeysFilter"
          },
          "Limit": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageTokenConfig_1_EVA.Core.StockMutations.ListStockFilter": {
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.StockMutations.ListStockFilter"
          },
          "Limit": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageTokenConfig_1_EVA.Core.TransputJobs.ListTransputJobsFilter": {
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.TransputJobs.ListTransputJobsFilter"
          },
          "Limit": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PageTokenConfig_1_EVA.Core.UserTasks.Custom.ListCustomUserTaskTemplateFilter": {
        "type": "object",
        "properties": {
          "Filter": {
            "type": "object"
          },
          "Limit": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Addresses.AddressBookDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Addresses.AddressBookDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Airport.FlightDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Airport.FlightDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.DataModels.CurrencyDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.CurrencyDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Devices.Dto.StationDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Devices.Dto.StationDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Devices.ListDevicesModel": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Devices.ListDevicesModel"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Finance.Cash.ListCashDepositsItem": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.Cash.ListCashDepositsItem"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Finance.Cash.ListCashExpensesItem": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.Cash.ListCashExpensesItem"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Finance.Cash.ListCashTransactionLedgerGroup": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.Cash.ListCashTransactionLedgerGroup"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Finance.Cash.ListCashTransactionLedgerItem": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.Cash.ListCashTransactionLedgerItem"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Finance.Dto.FinancialPeriodDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.Dto.FinancialPeriodDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Finance.Dto.GeneralLedgerDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.Dto.GeneralLedgerDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Finance.FinancialPeriodAuditDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.FinancialPeriodAuditDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Finance.ListFinancialPeriodExports2Response_FinancialPeriodExport": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.ListFinancialPeriodExports2Response_FinancialPeriodExport"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Finance.ListGeneralLedgersResponse_GeneralLedger": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Finance.ListGeneralLedgersResponse_GeneralLedger"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Invoices.ListInvoiceExportsForInvoiceResponse_InvoiceExportDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoices.ListInvoiceExportsForInvoiceResponse_InvoiceExportDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Invoices.ListInvoiceLedgerResponse_InvoiceLedgerDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoices.ListInvoiceLedgerResponse_InvoiceLedgerDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Invoices.ListShipmentLinesToInvoiceResponse_Model": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoices.ListShipmentLinesToInvoiceResponse_Model"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Invoices.ListShipmentsToInvoiceResponse_Model": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoices.ListShipmentsToInvoiceResponse_Model"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Invoicing.InvoiceControlDocumentData": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoicing.InvoiceControlDocumentData"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Invoicing.ListInvoicesDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoicing.ListInvoicesDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Invoicing.ManualInvoiceSummary": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Invoicing.ManualInvoiceSummary"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.MessageQueue.MessageQueueErrorDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.MessageQueue.MessageQueueErrorDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Orders.CommittedOrderLine": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.CommittedOrderLine"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Orders.Dto.OrderDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrderDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Orders.Dto.OrderLineDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrderLineDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Orders.ListOrderCustomStatusResponse_ListOrderCustomStatusModel": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderCustomStatusResponse_ListOrderCustomStatusModel"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Orders.ListOrderCustomTypesResponse_ListOrderCustomTypeModel": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderCustomTypesResponse_ListOrderCustomTypeModel"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Orders.ListOrderExportsForOrderResponse_OrderExportDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderExportsForOrderResponse_OrderExportDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Orders.ListOrderLedgerForOrderResponse_OrderLedgerDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderLedgerForOrderResponse_OrderLedgerDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Orders.ListOrderLinesInvoiceSummaryResponse_Model": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ListOrderLinesInvoiceSummaryResponse_Model"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Orders.OrderSearchResultItem": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.OrderSearchResultItem"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Orders.OrderWithCustomerReferences": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.OrderWithCustomerReferences"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Orders.ReturnToSupplier.ReturnToSupplierRequestModel": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.ReturnToSupplier.ReturnToSupplierRequestModel"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.OrganizationUnits.ListOrganizationUnitSummariesResponse_OrganizationUnit": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.ListOrganizationUnitSummariesResponse_OrganizationUnit"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.OrganizationUnits.ListOrganizationUnitsDetailedResponse_OrganizationUnit": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.ListOrganizationUnitsDetailedResponse_OrganizationUnit"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.OrganizationUnits.ListShopsByProximityResponse_ShopInfo": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.ListShopsByProximityResponse_ShopInfo"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.OrganizationUnits.ListShopsInAreaResponse_ShopInfo": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.ListShopsInAreaResponse_ShopInfo"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Payments.ListPaymentTransactionLedgerResponse_PaymentTransactionLedgerDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Payments.ListPaymentTransactionLedgerResponse_PaymentTransactionLedgerDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Pricing.ManualTaxExemptionReason": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Pricing.ManualTaxExemptionReason"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Pricing.TaxCodeItem": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Pricing.TaxCodeItem"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Pricing.TaxRateModel": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Pricing.TaxRateModel"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.ProductBundles.ListProductBundlesResponseResult": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.ProductBundles.ListProductBundlesResponseResult"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Products.GetProductStructureResponse": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Products.GetProductStructureResponse"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Products.ListBrandsResponse_BrandDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Products.ListBrandsResponse_BrandDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.RecurringTasks.RecurringTask": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.RecurringTasks.RecurringTask"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Services.CustomerInteractionTasks.ListCustomerInteractionTasksResponse_CustomerInteractionTaskDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.ListCustomerInteractionTasksResponse_CustomerInteractionTaskDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Services.FullStockCountServices.ListFullStockCountDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.ListFullStockCountDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelProductDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelProductDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelSummaryResponse_Label": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelSummaryResponse_Label"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Services.ListUserTasksResponse_UserTask": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ListUserTasksResponse_UserTask"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Services.OrderInterventionTasks.OrderInterventionTaskDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.OrderInterventionTasks.OrderInterventionTaskDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Services.StockReplenishment.StockReplenishmentTaskDataDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.StockReplenishment.StockReplenishmentTaskDataDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Services.ZonedCycleCounts.ListCycleCountZoneGroupsResponse_CycleCountZoneGroupDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.ListCycleCountZoneGroupsResponse_CycleCountZoneGroupDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Shipments.ListShipmentExportsForShipmentResponse_ShipmentExportDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Shipments.ListShipmentExportsForShipmentResponse_ShipmentExportDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Shipments.ListShipmentLedgerForShipmentResponse_ShipmentLedgerDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Shipments.ListShipmentLedgerForShipmentResponse_ShipmentLedgerDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Shipments.PurchaseOrderShipmentDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Shipments.PurchaseOrderShipmentDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Shipments.ShipmentLineDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Shipments.ShipmentLineDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Shipments.ShipmentPackageDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Shipments.ShipmentPackageDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.StockMutations.StockMutationDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.StockMutations.StockMutationDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Suppliers.ListOrganizationUnitSuppliersModel": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Suppliers.ListOrganizationUnitSuppliersModel"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.SuspendedOrders.ListSuspendedOrdersResponse_SuspendedOrderDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.SuspendedOrders.ListSuspendedOrdersResponse_SuspendedOrderDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Translations.ListEntityTranslation": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Translations.ListEntityTranslation"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Translations.ListStringTranslation": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Translations.ListStringTranslation"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Types.ReturnToSupplier.ReturnToSupplierTaskOrderLine": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Types.ReturnToSupplier.ReturnToSupplierTaskOrderLine"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Types.ReturnToSupplier.ReturnToSupplierTaskShipmentLine": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Types.ReturnToSupplier.ReturnToSupplierTaskShipmentLine"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.UserInteractions.ListUserInteractionsResponse_UserInteractionDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.UserInteractions.ListUserInteractionsResponse_UserInteractionDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.UserTasks.Dto.UserTaskTypeOrganizationUnitSetDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.UserTasks.Dto.UserTaskTypeOrganizationUnitSetDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.UserTasks.FullStockCountUserTask.FullStockCountResult": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.UserTasks.FullStockCountUserTask.FullStockCountResult"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.UserTasks.FullStockCountUserTask.FullStockCountSummaryRecord": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.UserTasks.FullStockCountUserTask.FullStockCountSummaryRecord"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.UserTasks.ZonedCycleCountUserTask.CycleCountZonesForOrganizationUnitDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.UserTasks.ZonedCycleCountUserTask.CycleCountZonesForOrganizationUnitDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.UserTasks.ZonedCycleCountUserTask.ListZonedCycleCountsDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.UserTasks.ZonedCycleCountUserTask.ListZonedCycleCountsDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.UserTasks.ZonedCycleCountUserTask.ZonedCycleCountScheduleDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.UserTasks.ZonedCycleCountUserTask.ZonedCycleCountScheduleDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Users.BorrowedProducts.ListUserBorrowedProductsResponse_Model": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Users.BorrowedProducts.ListUserBorrowedProductsResponse_Model"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Users.ListApiKeysItem": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Users.ListApiKeysItem"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Users.SearchUsersResponse_UserSearchDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Users.SearchUsersResponse_UserSearchDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Users.SimpleUserDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Users.SimpleUserDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.Users.UserGroupDto": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Users.UserGroupDto"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.nsOpeningHours.ListOpeningHoursTemplatesOrganizationUnitSetsResponse_Data": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.ListOpeningHoursTemplatesOrganizationUnitSetsResponse_Data"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PagedResult_1_EVA.Core.nsOpeningHours.ListOpeningHoursTemplatesResponse_Data": {
        "required": [
          "Offset",
          "SortDirection",
          "Total",
          "NumberOfPages",
          "CurrentPage",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CurrentPage": {
            "type": "integer"
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer"
          },
          "NumberOfPages": {
            "type": "integer"
          },
          "Offset": {
            "type": "integer"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.ListOpeningHoursTemplatesResponse_Data"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "SortDirection": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "SortProperty": {
            "type": "string"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Parsing.CompletionCategories": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Parsing.CompletionSuggestion": {
        "required": [
          "Category",
          "Priority"
        ],
        "type": "object",
        "properties": {
          "Category": {
            "$ref": "#/components/schemas/EVA.Core.Parsing.CompletionCategories"
          },
          "Code": {
            "type": "string"
          },
          "Documentation": {
            "type": "string"
          },
          "Label": {
            "type": "string"
          },
          "Priority": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Parsing.DocumentationResult": {
        "type": "object",
        "properties": {
          "Component": {
            "type": "string"
          },
          "Documentation": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PaymentProofs.PrintThermalPaymentProof": {
        "required": [
          "StationID",
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "StationID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.ApproveCapture": {
        "required": [
          "PaymentTransactionCaptureID"
        ],
        "type": "object",
        "properties": {
          "PaymentTransactionCaptureID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.ApprovePayment": {
        "required": [
          "PaymentID"
        ],
        "type": "object",
        "properties": {
          "PaymentID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.ApprovePaymentResponse": {
        "required": [
          "HasBeenApproved"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "HasBeenApproved": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Reason": {
            "$ref": "#/components/schemas/EVA.Core.Payments.ApprovementFailureReasons"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.ApprovementFailureReasons": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Payments.CancelPayment": {
        "required": [
          "PaymentID"
        ],
        "type": "object",
        "properties": {
          "PaymentID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.CapturePayment": {
        "required": [
          "PaymentTransactionID"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "PaymentTransactionID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.CapturePaymentResponse": {
        "required": [
          "Success"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OpenAmount": {
            "type": "number"
          },
          "OrderAmountToCapture": {
            "type": "number"
          },
          "PaymentTransaction": {
            "$ref": "#/components/schemas/EVA.Core.Payments.Dto.PaymentTransactionDto"
          },
          "Success": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.CaptureShipment": {
        "required": [
          "ShipmentID"
        ],
        "type": "object",
        "properties": {
          "ShipmentID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.CaptureShipmentResponse": {
        "required": [
          "Success"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Success": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.CreatePayment": {
        "required": [
          "PaymentTypeID",
          "OrderID",
          "AutoShipAfterConfirm"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "AutoShipAfterConfirm": {
            "type": "boolean",
            "description": "When the created payment is confirmed and the order is paid, the order will be shipped automatically when possible."
          },
          "CurrencyID": {
            "type": "string",
            "description": "If the payment is done in another currency than the Order, this is required"
          },
          "OrderID": {
            "type": "integer"
          },
          "PaymentTypeID": {
            "type": "integer"
          },
          "Properties": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Payments.PaymentMethodWithReferenceRequestProperties"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Payments.Custom.CustomPaymentMethodRequestProperties"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.GiftCards.GiftCardPaymentMethodRequestProperties"
              },
              {
                "$ref": "#/components/schemas/EVA.Payment.Buckaroo.BuckarooPaymentMethodPayData"
              },
              {
                "$ref": "#/components/schemas/EVA.Payment.Mollie.MolliePaymentMethodRequestProperties"
              },
              {
                "$ref": "#/components/schemas/EVA.Payment.Adyen.PosSdk.AdyenPosSdkPaymentMethodRequestProperties"
              },
              {
                "$ref": "#/components/schemas/EVA.Payment.Adyen.Legacy.SDK.AdyenCheckoutSDKPaymentMethodRequestProperties"
              },
              {
                "$ref": "#/components/schemas/EVA.Payment.Adyen.CheckoutAPI.AdyenCheckoutAPIPaymentMethodRequestProperties"
              },
              {
                "$ref": "#/components/schemas/EVA.Payment.Adyen.CheckoutAPI.DropIn.AdyenDropInPaymentMethodRequestProperties"
              },
              {
                "$ref": "#/components/schemas/EVA.Payment.MultiSafepay.MultiSafepayPaymentMethodRequestProperties"
              },
              {
                "$ref": "#/components/schemas/EVA.Payment.Saferpay.SaferpayPaymentMethodRequestProperties"
              },
              {
                "$ref": "#/components/schemas/EVA.Payment.Stripe.StripePaymentMethodRequestProperties"
              },
              {
                "$ref": "#/components/schemas/EVA.Payment.Core.UserCard.UserCardPaymentMethodRequestProperties"
              },
              {
                "$ref": "#/components/schemas/EVA.Payment.Core.Rembours.RemboursPaymentMethodRequestProperties"
              },
              {
                "$ref": "#/components/schemas/EVA.Payment.Core.Manual.ManualPaymentMethodRequestProperties"
              },
              {
                "$ref": "#/components/schemas/EVA.Payment.Core.Loyalty.LoyaltyPaymentMethodRequestProperties"
              },
              {
                "$ref": "#/components/schemas/EVA.Payment.Core.GiftCard.API.APIGiftCardPaymentMethodRequestProperties"
              },
              {
                "$ref": "#/components/schemas/EVA.Payment.Core.EVAPay.EVAPayPaymentMethodRequestProperties"
              },
              {
                "$ref": "#/components/schemas/EVA.Payment.Core.Cash.CashPaymentMethodRequestProperties"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.CreatePaymentResponse": {
        "required": [
          "OpenAmount"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OpenAmount": {
            "type": "number"
          },
          "PaymentTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Payments.Dto.PaymentTransactionDto"
            }
          },
          "Properties": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EVA.Payment.Buckaroo.BuckarooPaymentMethodPayResult"
              },
              {
                "$ref": "#/components/schemas/EVA.Payment.Mollie.MolliePaymentMethodResultProperties"
              },
              {
                "$ref": "#/components/schemas/EVA.Payment.Adyen.PosSdk.AdyenPosSdkPaymentMethodResultProperties"
              },
              {
                "$ref": "#/components/schemas/EVA.Payment.Adyen.Legacy.SDK.AdyenCheckoutSDKPaymentMethodResultProperties"
              },
              {
                "$ref": "#/components/schemas/EVA.Payment.Adyen.CheckoutAPI.AdyenCheckoutAPIPaymentMethodResultProperties"
              },
              {
                "$ref": "#/components/schemas/EVA.Payment.Adyen.CheckoutAPI.DropIn.AdyenDropInPaymentMethodResultProperties"
              },
              {
                "$ref": "#/components/schemas/EVA.Payment.MultiSafepay.MultiSafepayPaymentMethodResultProperties"
              },
              {
                "$ref": "#/components/schemas/EVA.Payment.Saferpay.SaferpayPaymentMethodResponseProperties"
              },
              {
                "$ref": "#/components/schemas/EVA.Payment.Stripe.StripePaymentMethodResultProperties"
              },
              {
                "$ref": "#/components/schemas/EVA.Payment.Core.GiftCard.GiftCardRefundPaymentMethodResultProperties"
              },
              {
                "$ref": "#/components/schemas/EVA.Payment.Core.EVAPay.EVAPayPaymentMethodResultProperties"
              },
              {
                "$ref": "#/components/schemas/EVA.Payment.Core.Cash.CashPaymentMethodResultProperties"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.CreatePaymentTransactionLedger": {
        "required": [
          "PaymentTransactionID",
          "LedgerType"
        ],
        "type": "object",
        "properties": {
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string"
          },
          "LedgerType": {
            "type": "string"
          },
          "PaymentTransactionID": {
            "type": "integer"
          },
          "Value": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.CreateRefund": {
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "CurrencyID": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          },
          "PaymentTransactionID": {
            "type": "integer"
          },
          "PaymentTypeID": {
            "type": "integer"
          },
          "Properties": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.CreateRefundResponse": {
        "required": [
          "RefundedOnOrder",
          "Success"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "PaymentTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Payments.Dto.PaymentTransactionDto"
            }
          },
          "Properties": {
            "type": "object"
          },
          "RefundedOnOrder": {
            "type": "boolean"
          },
          "Success": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.Custom.CustomPaymentMethodRequestProperties": {
        "type": "object",
        "properties": {
          "IsConfirmed": {
            "type": "boolean"
          },
          "Values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldValue"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.Dto.PaymentTransactionDto": {
        "required": [
          "Type",
          "IsAuthorizationAdjustment",
          "TypeID",
          "IsAuthorizationExpired",
          "CaptureMoment",
          "HasUnresolvedDispute",
          "ID",
          "PendingOrConfirmed",
          "Status",
          "IsConfirmed",
          "PaidAmount",
          "RequiresCapture",
          "Amount",
          "Change",
          "HasDispute",
          "CurrencyID",
          "IsRefund"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "AmountPendingCapture": {
            "type": "number"
          },
          "AuthorizationExpirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "AvailableActions": {
            "$ref": "#/components/schemas/EVA.Core.Payments.PaymentTransactionActions"
          },
          "BackendID": {
            "type": "string"
          },
          "BackendSystemID": {
            "type": "string"
          },
          "CapturableAmount": {
            "type": "number"
          },
          "CaptureMoment": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.PaymentTypeCaptureMoment"
          },
          "CapturedAmount": {
            "type": "number"
          },
          "Change": {
            "type": "number"
          },
          "CurrencyID": {
            "type": "string"
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.CustomFields.CustomFieldResponse"
            }
          },
          "Description": {
            "type": "string"
          },
          "DeviceID": {
            "type": "integer"
          },
          "ErrorDetails": {
            "type": "string"
          },
          "ExchangeRate": {
            "type": "number"
          },
          "ForeignAmount": {
            "type": "number"
          },
          "ForeignCurrencyID": {
            "type": "string"
          },
          "ForeignPaidAmount": {
            "type": "number"
          },
          "GroupID": {
            "type": "string",
            "format": "uuid"
          },
          "HasDispute": {
            "type": "boolean"
          },
          "HasUnresolvedDispute": {
            "type": "boolean"
          },
          "ID": {
            "type": "integer"
          },
          "IsAuthorizationAdjustment": {
            "type": "boolean"
          },
          "IsAuthorizationExpired": {
            "type": "boolean"
          },
          "IsCaptured": {
            "type": "boolean"
          },
          "IsConfirmed": {
            "type": "boolean"
          },
          "IsRefund": {
            "type": "boolean"
          },
          "IsSettled": {
            "type": "boolean"
          },
          "OrderID": {
            "type": "integer"
          },
          "PaidAmount": {
            "type": "number"
          },
          "PaymentDate": {
            "type": "string",
            "format": "date-time"
          },
          "PaymentDetails": {
            "type": "string"
          },
          "PaymentName": {
            "type": "string"
          },
          "PendingOrConfirmed": {
            "type": "boolean"
          },
          "RequiresCapture": {
            "type": "boolean"
          },
          "SettledAmount": {
            "type": "number"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.PaymentStatuses"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.Payments.Dto.PaymentTypeDto"
          },
          "TypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.Dto.PaymentTypeDto": {
        "required": [
          "IsRoundingType",
          "PrintOnDocuments",
          "Name",
          "Code"
        ],
        "type": "object",
        "properties": {
          "Code": {
            "type": "string"
          },
          "IsRoundingType": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          },
          "PrintOnDocuments": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.GetActivePaymentTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Payments.GetActivePaymentTypesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.GetAvailablePaymentMethods": {
        "required": [
          "ReturnUnusablePaymentMethods"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "ReturnUnusablePaymentMethods": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.GetAvailablePaymentMethodsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "PaymentMethods": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.AvailablePaymentMethod"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.GetAvailableRefundPaymentMethodsForOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.GetAvailableRefundPaymentMethodsResponse": {
        "required": [
          "IsAutoRefundAvailable",
          "Methods"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "IsAutoRefundAvailable": {
            "type": "boolean",
            "description": "Indicates if this order can be (partially) refunded with RefundOrder."
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Payments.RefundPaymentMethod"
            }
          },
          "OrderAmountAvailableForRefund": {
            "type": "number",
            "description": "The amount currently available for refund on the given order"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.GetPaymentTransaction": {
        "required": [
          "PaymentTransactionID"
        ],
        "type": "object",
        "properties": {
          "PaymentTransactionID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.GetPaymentTransactionResponse": {
        "required": [
          "PaymentTransaction"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "PaymentTransaction": {
            "$ref": "#/components/schemas/EVA.Core.Payments.Dto.PaymentTransactionDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.GetPaymentTransactionsForInvoice": {
        "required": [
          "InvoiceID"
        ],
        "type": "object",
        "properties": {
          "InvoiceID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.GetPaymentTransactionsForOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.GetPaymentTransactionsResponse": {
        "required": [
          "PaymentTransactions"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "PaymentTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Payments.GetPaymentTransactionsResponse_PaymentTransaction"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.GetPaymentTransactionsResponse_PaymentTransaction": {
        "required": [
          "Type",
          "IsAuthorizationAdjustment",
          "TypeID",
          "IsAuthorizationExpired",
          "CaptureMoment",
          "HasUnresolvedDispute",
          "ID",
          "PendingOrConfirmed",
          "Status",
          "IsConfirmed",
          "PaidAmount",
          "RequiresCapture",
          "Amount",
          "Change",
          "HasDispute",
          "CurrencyID",
          "IsRefund"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number"
          },
          "AmountPendingCapture": {
            "type": "number"
          },
          "AuthorizationExpirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "AvailableActions": {
            "$ref": "#/components/schemas/EVA.Core.Payments.PaymentTransactionActions"
          },
          "BackendID": {
            "type": "string"
          },
          "BackendSystemID": {
            "type": "string"
          },
          "CapturableAmount": {
            "type": "number"
          },
          "CaptureMoment": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.PaymentTypeCaptureMoment"
          },
          "CapturedAmount": {
            "type": "number"
          },
          "Change": {
            "type": "number"
          },
          "CurrencyID": {
            "type": "string"
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.CustomFields.CustomFieldResponse"
            }
          },
          "Description": {
            "type": "string"
          },
          "DeviceID": {
            "type": "integer"
          },
          "DeviceSerialNumber": {
            "type": "string"
          },
          "ErrorDetails": {
            "type": "string"
          },
          "ExchangeRate": {
            "type": "number"
          },
          "ForeignAmount": {
            "type": "number"
          },
          "ForeignCurrencyID": {
            "type": "string"
          },
          "ForeignPaidAmount": {
            "type": "number"
          },
          "GroupID": {
            "type": "string",
            "format": "uuid"
          },
          "HasDispute": {
            "type": "boolean"
          },
          "HasUnresolvedDispute": {
            "type": "boolean"
          },
          "ID": {
            "type": "integer"
          },
          "IsAuthorizationAdjustment": {
            "type": "boolean"
          },
          "IsAuthorizationExpired": {
            "type": "boolean"
          },
          "IsCaptured": {
            "type": "boolean"
          },
          "IsConfirmed": {
            "type": "boolean"
          },
          "IsRefund": {
            "type": "boolean"
          },
          "IsSettled": {
            "type": "boolean"
          },
          "OrderID": {
            "type": "integer"
          },
          "PaidAmount": {
            "type": "number"
          },
          "PaymentDate": {
            "type": "string",
            "format": "date-time"
          },
          "PaymentDetails": {
            "type": "string"
          },
          "PaymentName": {
            "type": "string"
          },
          "PendingOrConfirmed": {
            "type": "boolean"
          },
          "RequiresCapture": {
            "type": "boolean"
          },
          "SettledAmount": {
            "type": "number"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.PaymentStatuses"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.Payments.Dto.PaymentTypeDto"
          },
          "TypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.GetPreferredRefundMethod": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.GetPreferredRefundMethodResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "PaymentMethod": {
            "type": "string"
          },
          "PaymentTransaction": {
            "$ref": "#/components/schemas/EVA.Core.Payments.Dto.PaymentTransactionDto"
          },
          "PaymentType": {
            "$ref": "#/components/schemas/EVA.Core.Payments.Dto.PaymentTypeDto"
          },
          "Properties": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.HandlePaymentTransactionDispute": {
        "required": [
          "PaymentTransactionID"
        ],
        "type": "object",
        "properties": {
          "PaymentTransactionID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.ListPaymentTransactionLedger": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Payments.ListPaymentTransactionLedgerFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.ListPaymentTransactionLedgerFilter": {
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "PaymentTransactionID": {
            "type": "integer"
          },
          "TypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.ListPaymentTransactionLedgerResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Payments.ListPaymentTransactionLedgerResponse_PaymentTransactionLedgerDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.ListPaymentTransactionLedgerResponse_PaymentTransactionLedgerDto": {
        "required": [
          "CreatedBy",
          "TypeID",
          "PaymentTransactionID",
          "ID",
          "CreationTime",
          "TypeName"
        ],
        "type": "object",
        "properties": {
          "CreatedBy": {
            "$ref": "#/components/schemas/EVA.Core.Payments.ListPaymentTransactionLedgerResponse_UserDto"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "NewValue": {
            "type": "string"
          },
          "OldValue": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          },
          "PaymentTransactionID": {
            "type": "integer"
          },
          "TypeID": {
            "type": "integer"
          },
          "TypeName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.ListPaymentTransactionLedgerResponse_UserDto": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "FullName": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.PaymentMethodNotUsableError": {
        "type": "object",
        "properties": {
          "Message": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.PaymentMethodWithReferenceRequestProperties": {
        "type": "object",
        "properties": {
          "Reference": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.PaymentTransactionActions": {
        "required": [
          "Update",
          "Cancel",
          "Capture",
          "Approve",
          "Refund"
        ],
        "type": "object",
        "properties": {
          "Approve": {
            "type": "boolean"
          },
          "Cancel": {
            "type": "boolean"
          },
          "Capture": {
            "type": "boolean"
          },
          "Refund": {
            "type": "boolean"
          },
          "Update": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.RefundPaymentMethod": {
        "required": [
          "Types",
          "Transactions",
          "IsCustom",
          "Code"
        ],
        "type": "object",
        "properties": {
          "Code": {
            "type": "string"
          },
          "IsCustom": {
            "type": "boolean"
          },
          "Transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Payments.RefundablePaymentTransaction"
            }
          },
          "Types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.AvailablePaymentMethodType"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.RefundablePaymentTransaction": {
        "required": [
          "TypeID",
          "RefundableAmount",
          "ID",
          "CreationTime",
          "PaidAmount",
          "CanRefundWithoutInteraction",
          "CurrencyID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "CanRefundWithoutInteraction": {
            "type": "boolean"
          },
          "Code": {
            "type": "string"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "CurrencyID": {
            "type": "string"
          },
          "ForeignCurrencyID": {
            "type": "string"
          },
          "ForeignPaidAmount": {
            "type": "number"
          },
          "ID": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          },
          "PaidAmount": {
            "type": "number"
          },
          "RefundableAmount": {
            "type": "number"
          },
          "Type": {
            "type": "string"
          },
          "TypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.RequestPaymentUpdate": {
        "required": [
          "PaymentTransactionID"
        ],
        "type": "object",
        "properties": {
          "PaymentTransactionID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.RequestPaymentUpdateResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "PaymentTransaction": {
            "$ref": "#/components/schemas/EVA.Core.Payments.Dto.PaymentTransactionDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Payments.SetPreferredRefundMethod": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "PaymentTransactionID": {
            "type": "integer"
          },
          "PaymentTypeID": {
            "type": "integer"
          },
          "Properties": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.CreateManualTaxExemptionReason": {
        "required": [
          "Lines",
          "OrganizationUnitSetID",
          "Name",
          "Code"
        ],
        "type": "object",
        "properties": {
          "Code": {
            "type": "string"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Pricing.CreateManualTaxExemptionReason_CreateManualTaxExemptionReasonLine"
            }
          },
          "Name": {
            "type": "string"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.CreateManualTaxExemptionReason_CreateManualTaxExemptionReasonLine": {
        "required": [
          "TaxRate",
          "TaxName"
        ],
        "type": "object",
        "properties": {
          "TaxName": {
            "type": "string"
          },
          "TaxRate": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.CreateManualTaxExemptionReasonResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.CreateTaxCode": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "BackendTaxCodeID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "LedgerClassID": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.CreateTaxCodeResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.CreateTaxRate": {
        "required": [
          "Rate",
          "TaxCodeID"
        ],
        "type": "object",
        "properties": {
          "Category": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.TaxRateCategory"
          },
          "CountryID": {
            "type": "string"
          },
          "CountrySubdivisionID": {
            "type": "string"
          },
          "EndDate": {
            "type": "string",
            "format": "date-time"
          },
          "Rate": {
            "type": "number"
          },
          "StartDate": {
            "type": "string",
            "format": "date-time"
          },
          "TaxCodeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.CreateTaxRateResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.DeleteManualTaxExemptionReason": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.DeleteManualTaxExemptionReasonLine": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.DeleteTaxCode": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.DeleteTaxRate": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.ExplainProductPrices": {
        "required": [
          "PriceListID"
        ],
        "type": "object",
        "properties": {
          "PriceListID": {
            "type": "integer"
          },
          "ProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.ExplainProductPricesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Pricing.ExplainProductPricesResponse_ProductPricingExplanation"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.ExplainProductPricesResponse_ProductPricingExplanation": {
        "required": [
          "ProductID"
        ],
        "type": "object",
        "properties": {
          "Explanations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Pricing.ExplainProductPricesResponse_ProductPricingExplanation_Explanation"
            }
          },
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.ExplainProductPricesResponse_ProductPricingExplanation_Explanation": {
        "required": [
          "OldPrice",
          "NewPrice"
        ],
        "type": "object",
        "properties": {
          "Children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Pricing.ExplainProductPricesResponse_ProductPricingExplanation_Explanation"
            }
          },
          "Data": {
            "type": "object"
          },
          "Message": {
            "type": "string"
          },
          "NewPrice": {
            "type": "number"
          },
          "NodeType": {
            "type": "string"
          },
          "OldPrice": {
            "type": "number"
          },
          "PriceListID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.FactorType": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Pricing.GetPotentialProductPricing": {
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "ProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.GetPotentialProductPricingResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Pricing.GetPotentialProductPricingResponse_ProductPriceInfo"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.GetPotentialProductPricingResponse_CurrentPriceInfo": {
        "type": "object",
        "properties": {
          "CurrencyID": {
            "type": "string"
          },
          "OriginalUnitPrice": {
            "type": "number"
          },
          "OriginalUnitPriceInTax": {
            "type": "number"
          },
          "PricingGroupID": {
            "type": "string"
          },
          "UnitPrice": {
            "type": "number"
          },
          "UnitPriceInTax": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.GetPotentialProductPricingResponse_PotentialPriceInfo": {
        "type": "object",
        "properties": {
          "Condition": {
            "$ref": "#/components/schemas/EVA.Core.Pricing.GetPotentialProductPricingResponse_PotentialPriceInfo_ConditionInfo"
          },
          "CurrencyID": {
            "type": "string"
          },
          "OriginalUnitPrice": {
            "type": "number"
          },
          "OriginalUnitPriceInTax": {
            "type": "number"
          },
          "PricingGroupID": {
            "type": "string"
          },
          "UnitPrice": {
            "type": "number"
          },
          "UnitPriceInTax": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.GetPotentialProductPricingResponse_PotentialPriceInfo_ConditionInfo": {
        "type": "object",
        "properties": {
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Pricing.GetPotentialProductPricingResponse_PotentialPriceInfo_ConditionInfo_CustomFieldCondition"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.GetPotentialProductPricingResponse_PotentialPriceInfo_ConditionInfo_CustomFieldCondition": {
        "type": "object",
        "properties": {
          "FieldName": {
            "type": "string"
          },
          "PricingGroupID": {
            "type": "string"
          },
          "RequiredValue": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.GetPotentialProductPricingResponse_ProductPriceInfo": {
        "type": "object",
        "properties": {
          "CurrentPrice": {
            "$ref": "#/components/schemas/EVA.Core.Pricing.GetPotentialProductPricingResponse_CurrentPriceInfo"
          },
          "PotentialPrices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Pricing.GetPotentialProductPricingResponse_PotentialPriceInfo"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.GetTaxRate": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.GetTaxRateResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.Pricing.TaxRateModel"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.ListManualTaxExemptionReasons": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Pricing.ListTaxExemptionReasonModelFilters"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.ListManualTaxExemptionReasonsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Pricing.ManualTaxExemptionReason"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.ListProductPrices": {
        "type": "object",
        "properties": {
          "InitialPageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageTokenConfig_1_EVA.Core.Pricing.ListProductPricesFilter"
          },
          "PageToken": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.ListProductPricesFilter": {
        "type": "object",
        "properties": {
          "PriceListAdjustmentTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "PriceListIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "PriceListUsageTypeIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "ProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.ListProductPricesItem": {
        "required": [
          "ProductID",
          "PriceListID"
        ],
        "type": "object",
        "properties": {
          "CurrencyID": {
            "type": "string"
          },
          "LabelID": {
            "type": "integer"
          },
          "LabelName": {
            "type": "string"
          },
          "Price": {
            "type": "number"
          },
          "PriceListID": {
            "type": "integer"
          },
          "PriceListName": {
            "type": "string"
          },
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.ListProductPricesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "NextPageToken": {
            "type": "string"
          },
          "PreviousPageToken": {
            "type": "string"
          },
          "Results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Pricing.ListProductPricesItem"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.ListTaxCodes": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Pricing.ListTaxCodesFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.ListTaxCodesFilter": {
        "required": [
          "ActiveOnly"
        ],
        "type": "object",
        "properties": {
          "ActiveOnly": {
            "type": "boolean",
            "description": "Only returns tax codes which currently have an active tax rate for your current country. Defaults to true."
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.ListTaxCodesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Pricing.TaxCodeItem"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.ListTaxExemptionReasonModelFilters": {
        "type": "object",
        "properties": {
          "Code": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.ListTaxRateModelFilters": {
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "CountrySubdivisionID": {
            "type": "string"
          },
          "OnlyActive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.ListTaxRates": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Pricing.ListTaxRateModelFilters"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.ListTaxRatesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Pricing.TaxRateModel"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.ManualTaxExemptionReason": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Code": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.PushPriceList": {
        "required": [
          "ID",
          "WaitForCompletion",
          "SystemID"
        ],
        "type": "object",
        "properties": {
          "ActiveForOrganizationUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Pricing.PushPriceList_ActiveOrganizationUnit"
            },
            "description": "The organization units that use this pricelist. If left empty will leave the current configuration unchanged. If specified, will replace the current configuration."
          },
          "Components": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Pricing.PushPriceList_Component"
            },
            "description": "The list of components that make up the pricelist. If left empty this will leave the current configuration unchanged. If specified only the components present will be modified. Components must be explictly deleted."
          },
          "CurrencyID": {
            "type": "string",
            "description": "The currency for the pricelist. Must be present for the creation of a pricelist but can be left empty in subsequent calls."
          },
          "ID": {
            "type": "string",
            "description": "The unique identifier for this pricelist."
          },
          "IsActive": {
            "type": "object",
            "description": "Whether or not the pricelist is active."
          },
          "Name": {
            "type": "object",
            "description": "The name of the pricelist. Must be present for the creation of a pricelist but can be left empty in subsequent calls."
          },
          "SpecifiedPricesIncludeTax": {
            "type": "object",
            "description": "If set to true then all prices specified on this price list will be interpreted as already VAT-included. If set to false then all prices will be interpreted as VAT-excluded. If not specified then the default value is true.\n\nSo if a price entry of 90 EUR is added to this pricelist with SpecifiedPricesIncludeTax = true (or not specified) then the price will be interpreted as 90 EUR already including VAT.\nIf SpecifiedPricesIncludeTax = false then the price will be interpreted as 90 EUR excluding VAT so that will be added on top for any orders created with this price."
          },
          "SystemID": {
            "type": "string",
            "description": "A string that identifies the system that was used to call this service. In combination with the ID of the pricelist, this is what uniquely identifies the pricelist in EVA.\nThe SystemID must be the same for every call, if it's different from a previous call then a new pricelist will be created."
          },
          "TimeZone": {
            "type": "object",
            "description": "The timezone that will be used to interpret activation times for prices."
          },
          "WaitForCompletion": {
            "type": "boolean",
            "description": "If specified as true, the call to PushPriceList will not return until all uploaded prices have been stored and all prices have been recalculated. Normally this process runs in the background."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.PushPriceList_ActiveOrganizationUnit": {
        "required": [
          "UsageType",
          "Delete"
        ],
        "type": "object",
        "properties": {
          "Delete": {
            "type": "boolean"
          },
          "OrganizationUnitID": {
            "type": "string"
          },
          "PricingGroupID": {
            "type": "object"
          },
          "TargetOrganizationUnitID": {
            "type": "object"
          },
          "UsageType": {
            "$ref": "#/components/schemas/EVA.Core.Pricing.PushPriceList_PriceListUsageTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.PushPriceList_Component": {
        "required": [
          "Type",
          "Delete"
        ],
        "type": "object",
        "properties": {
          "CopyPricesFromOtherPriceListData": {
            "$ref": "#/components/schemas/EVA.Core.Pricing.PushPriceList_CopyPricesFromOtherPriceListData"
          },
          "Delete": {
            "type": "boolean",
            "description": "If specified as true, the component will be deleted."
          },
          "EndDate": {
            "type": "object",
            "description": "Determines when this component will become inactive. After this date the component will not be included in the calculation of the pricelist."
          },
          "ID": {
            "type": "string",
            "description": "The unique identifier for this component. Required."
          },
          "MarkupData": {
            "$ref": "#/components/schemas/EVA.Core.Pricing.PushPriceList_MarkupData"
          },
          "Name": {
            "type": "object",
            "description": "The name of the component. If left empty on creation of the component the ID will be used as the name."
          },
          "PriceEntriesData": {
            "$ref": "#/components/schemas/EVA.Core.Pricing.PushPriceList_PriceEntriesData"
          },
          "PricingGroupID": {
            "type": "object",
            "description": "The PricingGroupID that this component is active for. Components with a PricingGroupID are only active for users that are members of that group. If left empty the component will be active for all users."
          },
          "SequenceNumber": {
            "type": "object",
            "description": "Components are applied in the order of their sequence number, from lowest to highest."
          },
          "StartDate": {
            "type": "object",
            "description": "Determines when this component will become active. Until then the component will not be included in the calculation of the pricelist."
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.Pricing.PushPriceList_ComponentTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.PushPriceList_ComponentTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Pricing.PushPriceList_CopyPricesFromOtherPriceListData": {
        "required": [
          "ExcludeProductsInFilter"
        ],
        "type": "object",
        "properties": {
          "ExcludeProductsInFilter": {
            "type": "boolean",
            "description": "If true, all products except the matching ones will have their prices copied. If false, only the matching ones will have their prices copied."
          },
          "PriceListID": {
            "type": "string",
            "description": "The ID of the pricelist to copy prices from."
          },
          "ProductSearchTemplateID": {
            "type": "integer",
            "description": "The ID of the ProductSearchTemplate to use to filter the products to copy. If left empty all products will be copied."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.PushPriceList_MarkupData": {
        "required": [
          "Type",
          "FactorValue",
          "ExcludeProductsInFilter"
        ],
        "type": "object",
        "properties": {
          "ExcludeProductsInFilter": {
            "type": "boolean",
            "description": "If true, all products except the matching ones will have their prices copied. If false, only the matching ones will have their prices copied."
          },
          "FactorValue": {
            "type": "number",
            "description": "The value of the markup/markdown. If Type is Amount, this is the amount to add to the price.\nIf Type is Percentage, this is the amount that the Price will be multiplied by.\n\nA 10% markup should be specified as 1.10, a 25% discount should be specified as 0.75."
          },
          "ProductSearchTemplateID": {
            "type": "integer",
            "description": "The ID of the ProductSearchTemplate to use to filter the products to copy. If left empty all products will be copied."
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.Pricing.FactorType"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.PushPriceList_PriceEntriesData": {
        "type": "object",
        "properties": {
          "BlobID": {
            "type": "string",
            "description": "The blob that refers to the price entry data that was previously uploaded to a Blob in EVA. If left empty the inline data will be used.\n\nThe data in the blob must be in the following format:\n\n[\n    {\n      \"ProductID\": \"<ProductID>\",\n      \"Price\": <Price>\n    },\n    ...\n]",
            "format": "uuid"
          },
          "Prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Pricing.PushPriceList_PriceEntriesData_PriceEntryPrice"
            },
            "description": "The inline data that will be used to create the price entries. If left empty the blob will be used."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.PushPriceList_PriceEntriesData_PriceEntryPrice": {
        "type": "object",
        "properties": {
          "Price": {
            "type": "number"
          },
          "ProductID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.PushPriceList_PriceListUsageTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Pricing.PushPriceListResponse": {
        "required": [
          "PriceListID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "PriceListID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.TaxCodeItem": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "BackendTaxCodeID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "LedgerClassID": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.TaxRateModel": {
        "required": [
          "Rate",
          "Category",
          "ID",
          "TaxCodeName",
          "TaxCodeID",
          "CountryID"
        ],
        "type": "object",
        "properties": {
          "Category": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.TaxRateCategory"
          },
          "CountryID": {
            "type": "string"
          },
          "CountrySubdivisionID": {
            "type": "string"
          },
          "EndDate": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer"
          },
          "Rate": {
            "type": "number"
          },
          "StartDate": {
            "type": "string",
            "format": "date-time"
          },
          "TaxCodeID": {
            "type": "integer"
          },
          "TaxCodeName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.UpdateManualTaxExemptionReason": {
        "required": [
          "OrganizationUnitSetID",
          "ID",
          "Name",
          "Code"
        ],
        "type": "object",
        "properties": {
          "Code": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.UpdateSimplePrices": {
        "required": [
          "Prices",
          "SkipPriceListRecalculation"
        ],
        "type": "object",
        "properties": {
          "PriceListBackendID": {
            "type": "string"
          },
          "PriceListBackendSystemID": {
            "type": "string"
          },
          "PriceListID": {
            "type": "integer"
          },
          "Prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Pricing.UpdateSimplePrices_Price"
            }
          },
          "SkipPriceListRecalculation": {
            "type": "boolean",
            "description": "Set this to true when batching multiple price updates or when the change can wait a couple minutes, recalculation will be done within 15min"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.UpdateSimplePrices_Price": {
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "CustomID": {
            "type": "string"
          },
          "NewPrice": {
            "type": "number",
            "description": "Leave empty to delete the price for this product"
          },
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.UpdateTaxCode": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "object"
          },
          "BackendTaxCodeID": {
            "type": "object"
          },
          "Description": {
            "type": "object"
          },
          "ID": {
            "type": "integer"
          },
          "LedgerClassID": {
            "type": "object"
          },
          "Name": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Pricing.UpdateTaxRate": {
        "required": [
          "Rate",
          "ID"
        ],
        "type": "object",
        "properties": {
          "Category": {
            "type": "object",
            "description": "Defines in which category the provided Rate falls for the provided CountryID. For example, a rate of 25% in the country Denmark should have Category = High as 25% is the high VAT rate in Denmark.\n\nIf the TaxCode used for this TaxRate is one of the predefined ones (High, Low, Zero, Exempt, Intermediate) this parameter is ignored but Category must be provided when using a custom TaxCode.\n\nThe Category `Dynamic` should be used for countries such as the US where the actual tax rate is context dependent and calculated dynamically."
          },
          "CountryID": {
            "type": "object"
          },
          "CountrySubdivisionID": {
            "type": "object"
          },
          "EndDate": {
            "type": "object"
          },
          "ID": {
            "type": "integer"
          },
          "Rate": {
            "type": "object"
          },
          "StartDate": {
            "type": "object"
          },
          "TaxCodeID": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Printing.Print": {
        "required": [
          "Type",
          "StationID",
          "BlobID"
        ],
        "type": "object",
        "properties": {
          "BlobID": {
            "type": "string",
            "format": "uuid"
          },
          "StationID": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.Printing.PrintType"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Printing.PrintType": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Printing.RenderThermalPrintResult": {
        "required": [
          "BlobID",
          "OutputFormat"
        ],
        "type": "object",
        "properties": {
          "BlobID": {
            "type": "string",
            "description": "The blob that contains the result of the thermal print job. If an incorrect blob is specified, an error will be returned.",
            "format": "uuid"
          },
          "OutputFormat": {
            "$ref": "#/components/schemas/EVA.Core.Printing.RenderThermalPrintResultOutputFormat"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Printing.RenderThermalPrintResultOutputFormat": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Printing.RenderThermalPrintResultResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Html": {
            "type": "string"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "PdfUrl": {
            "type": "string"
          },
          "PngUrl": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Printing.ReprintThermalPrintResult": {
        "required": [
          "BlobID"
        ],
        "type": "object",
        "properties": {
          "BlobID": {
            "type": "string",
            "description": "The blob that contains the result of the thermal print job. If an incorrect blob is specified, an error will be returned.",
            "format": "uuid"
          },
          "StationID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.AddBundleProductToOrder": {
        "required": [
          "OrderID",
          "BundleProductID"
        ],
        "type": "object",
        "properties": {
          "BundleProductID": {
            "type": "integer"
          },
          "LineActionType": {
            "$ref": "#/components/schemas/EVA.Core.Enumerations.LineActionTypes"
          },
          "LineSelection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.ProductBundles.BundleProductOrderLineSelection"
            }
          },
          "OrderID": {
            "type": "integer"
          },
          "ParentOrderLineID": {
            "type": "integer",
            "description": "If specified the new bundle OrderLine becomes a child of the specified OrderLine."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.AddBundleProductToOrderResponse": {
        "required": [
          "OrderLineID",
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderLineID": {
            "type": "integer",
            "description": "Created or updated OrderLineID"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.ApplyBundleProductSelection": {
        "required": [
          "OrderID",
          "BundleProductOrderLineID"
        ],
        "type": "object",
        "properties": {
          "BundleProductOrderLineID": {
            "type": "integer"
          },
          "LineActionType": {
            "$ref": "#/components/schemas/EVA.Core.Enumerations.LineActionTypes"
          },
          "LineSelection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.ProductBundles.BundleProductOrderLineSelection"
            }
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.BundleProductContainingProduct": {
        "required": [
          "BundleProductID"
        ],
        "type": "object",
        "properties": {
          "BundlePricing": {
            "$ref": "#/components/schemas/EVA.Core.ProductBundles.BundleProductPriceInfo"
          },
          "BundleProductContent": {
            "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
          },
          "BundleProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.BundleProductLine": {
        "required": [
          "ID",
          "IncludedInBundlePrice",
          "IsRequired",
          "IsDeleted"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "DefaultProductID": {
            "type": "integer"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "IncludedInBundlePrice": {
            "type": "boolean"
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "IsRequired": {
            "type": "boolean"
          },
          "MaxSelectedOptionsCount": {
            "type": "integer"
          },
          "Options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.ProductBundles.BundleProductLineOption"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.BundleProductLineOption": {
        "required": [
          "Sequence",
          "ProductID",
          "ID",
          "Quantity",
          "ProductBundleLineID",
          "AdditionalProductQuantity"
        ],
        "type": "object",
        "properties": {
          "AdditionalProductID": {
            "type": "integer"
          },
          "AdditionalProductQuantity": {
            "type": "integer"
          },
          "AdditionalUnitPriceInTax": {
            "type": "number"
          },
          "ExcludesProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "ID": {
            "type": "integer"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.ProductBundles.BundleProductLine"
            }
          },
          "ProductBundleLineID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          },
          "Sequence": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.BundleProductOrderLineSelection": {
        "required": [
          "SelectedProductID",
          "ProductBundleLineID"
        ],
        "type": "object",
        "properties": {
          "LineSelection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.ProductBundles.BundleProductOrderLineSelection"
            }
          },
          "ProductBundleLineID": {
            "type": "integer"
          },
          "SelectedProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.BundleProductPriceInfo": {
        "required": [
          "UnitPriceInTax",
          "TaxRate",
          "UnitPrice"
        ],
        "type": "object",
        "properties": {
          "CurrencyID": {
            "type": "string"
          },
          "OriginalUnitPrice": {
            "type": "number"
          },
          "OriginalUnitPriceInTax": {
            "type": "number"
          },
          "TaxRate": {
            "type": "number"
          },
          "UnitPrice": {
            "type": "number"
          },
          "UnitPriceInTax": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.CreateProductBundle": {
        "required": [
          "Type",
          "BundleProductID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "BundleProductID": {
            "type": "integer"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.ProductBundles.CreateProductBundleLine"
            }
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ProductBundleTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.CreateProductBundleLine": {
        "required": [
          "Type"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "DefaultProductID": {
            "type": "integer"
          },
          "Description": {
            "type": "string"
          },
          "MaxSelectedOptionsCount": {
            "type": "integer"
          },
          "Options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.ProductBundles.CreateProductBundleLineOption"
            }
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ProductBundleLineTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.CreateProductBundleLineOption": {
        "required": [
          "ProductID",
          "AdditionalProductQuantity"
        ],
        "type": "object",
        "properties": {
          "AdditionalProductID": {
            "type": "integer"
          },
          "AdditionalProductQuantity": {
            "type": "integer"
          },
          "ExcludesProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "ProductID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.DeleteProductBundle": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.GetBundleProductDetailResponse": {
        "required": [
          "BundleProductID",
          "IsDeleted"
        ],
        "type": "object",
        "properties": {
          "BundleProductID": {
            "type": "integer"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.ProductBundles.BundleProductLine"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.ProductBundles.GetBundleProductProduct"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.GetBundleProductDetails": {
        "required": [
          "BundleProductID"
        ],
        "type": "object",
        "properties": {
          "BundleProductID": {
            "type": "integer"
          },
          "IncludedFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.GetBundleProductProduct": {
        "required": [
          "Type",
          "ID"
        ],
        "type": "object",
        "properties": {
          "Content": {
            "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
          },
          "CustomID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Pricing": {
            "$ref": "#/components/schemas/EVA.Core.ProductBundles.BundleProductPriceInfo"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ProductTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.GetBundleProductsForProduct": {
        "required": [
          "ProductID"
        ],
        "type": "object",
        "properties": {
          "IncludedFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.GetBundleProductsForProductResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.ProductBundles.BundleProductContainingProduct"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.GetPotentialBundleProductsForOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "IncludedFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "OrderID": {
            "type": "integer"
          },
          "ProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.GetPotentialBundleProductsForOrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.ProductBundles.GetPotentialBundleProductsForOrderResponse_BundleProduct"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.GetPotentialBundleProductsForOrderResponse_BundleProduct": {
        "required": [
          "BundleProductID"
        ],
        "type": "object",
        "properties": {
          "BundlePricing": {
            "$ref": "#/components/schemas/EVA.Core.ProductBundles.BundleProductPriceInfo"
          },
          "BundleProductContent": {
            "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
          },
          "BundleProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.GetProductBundle": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "IncludedFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.GetProductBundleResponse": {
        "required": [
          "Type",
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "BundlePricing": {
            "$ref": "#/components/schemas/EVA.Core.ProductBundles.BundleProductPriceInfo"
          },
          "BundleProduct": {
            "$ref": "#/components/schemas/EVA.Core.ProductBundles.ProductBundlesProductInfo"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.ProductBundles.GetProductBundleResponse_Line"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ProductBundleTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.GetProductBundleResponse_Line": {
        "required": [
          "Type",
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "DefaultProduct": {
            "$ref": "#/components/schemas/EVA.Core.ProductBundles.ProductBundlesProductInfo"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "MaxSelectedOptionsCount": {
            "type": "integer"
          },
          "Options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.ProductBundles.GetProductBundleResponse_LineOption"
            }
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ProductBundleLineTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.GetProductBundleResponse_LineOption": {
        "required": [
          "Sequence",
          "ID",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "ExcludesProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "ID": {
            "type": "integer"
          },
          "Product": {
            "$ref": "#/components/schemas/EVA.Core.ProductBundles.ProductBundlesProductInfo"
          },
          "Quantity": {
            "type": "integer"
          },
          "Sequence": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.ListProductBundles": {
        "type": "object",
        "properties": {
          "IncludedFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.ProductBundles.ListProductBundlesFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.ListProductBundlesFilter": {
        "type": "object",
        "properties": {
          "ProductBundleBackendID": {
            "type": "string",
            "description": "The ProductBundle BackendID"
          },
          "ProductBundleID": {
            "type": "integer",
            "description": "The ProductBundleID"
          },
          "ProductBundleProductBackendID": {
            "type": "string",
            "description": "The ProductBundle Product BackendID"
          },
          "ProductBundleProductCustomID": {
            "type": "string",
            "description": "The ProductBundle Product CustomID"
          },
          "ProductBundleProductID": {
            "type": "integer",
            "description": "The ProductBundle ProductID"
          },
          "ProductBundleProductName": {
            "type": "string",
            "description": "The ProductBundle Product Name"
          },
          "ProductBundleType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ProductBundleTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.ListProductBundlesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.ProductBundles.ListProductBundlesResponseResult"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.ListProductBundlesResponseResult": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "BundlePricing": {
            "$ref": "#/components/schemas/EVA.Core.ProductBundles.BundleProductPriceInfo"
          },
          "BundleProduct": {
            "$ref": "#/components/schemas/EVA.Core.ProductBundles.ProductBundlesProductInfo"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.ProductBundlesProductInfo": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Content": {
            "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
          },
          "CustomID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.UpdateProductBundle": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.ProductBundles.UpdateProductBundleLine"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.UpdateProductBundleLine": {
        "required": [
          "Type"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "DefaultProductID": {
            "type": "integer"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer",
            "description": "Can be left null for new lines to be added to the bundle."
          },
          "MaxSelectedOptionsCount": {
            "type": "integer"
          },
          "Options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.ProductBundles.UpdateProductBundleLineOption"
            }
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ProductBundleLineTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ProductBundles.UpdateProductBundleLineOption": {
        "required": [
          "ProductID",
          "AdditionalProductQuantity"
        ],
        "type": "object",
        "properties": {
          "AdditionalProductID": {
            "type": "integer"
          },
          "AdditionalProductQuantity": {
            "type": "integer"
          },
          "ExcludesProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "ProductID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.ConfigurableProductDetailFilter": {
        "required": [
          "HideUnmatched"
        ],
        "type": "object",
        "properties": {
          "HideUnmatched": {
            "type": "boolean"
          },
          "Properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Products.ConfigurableProductDetailFilterProperty"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.ConfigurableProductDetailFilterProperty": {
        "type": "object",
        "properties": {
          "Property": {
            "type": "string"
          },
          "Values": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.ConfigurableProductDto": {
        "required": [
          "Type",
          "ProductID",
          "HasDimensions",
          "Status"
        ],
        "type": "object",
        "properties": {
          "Children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Products.ConfigurableProductDto"
            }
          },
          "ConfigurableProperty": {
            "type": "string"
          },
          "HasDimensions": {
            "type": "boolean"
          },
          "LogicalLevel": {
            "type": "string"
          },
          "MatchesFilter": {
            "type": "boolean"
          },
          "ProductID": {
            "type": "integer"
          },
          "Properties": {
            "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ProductStatus"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ProductTypes"
          },
          "Value": {
            "type": "object"
          },
          "Values": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.CreateProductStructure": {
        "type": "object",
        "properties": {
          "Code": {
            "type": "string"
          },
          "CountryID": {
            "type": "string"
          },
          "Definition": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ProductStructureDefinition"
          },
          "LanguageID": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.CreateProductStructureResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.DeleteProductStructure": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.Dto.ProductDto": {
        "required": [
          "Type",
          "CatalogID",
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "BrandID": {
            "type": "integer"
          },
          "BrandName": {
            "type": "string"
          },
          "CatalogID": {
            "type": "integer"
          },
          "CustomID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "LedgerClassID": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "PrimitiveName": {
            "type": "string"
          },
          "Properties": {
            "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ProductTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.EditProductStructure": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Code": {
            "type": "string"
          },
          "CountryID": {
            "type": "string"
          },
          "Definition": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ProductStructureDefinition"
          },
          "ID": {
            "type": "integer"
          },
          "LanguageID": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.EditProductStructureResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetConfigurableProductDetail": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.Products.ConfigurableProductDetailFilter"
          },
          "ID": {
            "type": "integer"
          },
          "IncludedFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetConfigurableProductDetailResponse": {
        "type": "object",
        "properties": {
          "Configurable": {
            "$ref": "#/components/schemas/EVA.Core.Products.ConfigurableProductDto"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetConfigurableProductsDetail": {
        "type": "object",
        "properties": {
          "IncludedFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetConfigurableProductsDetailResponse": {
        "type": "object",
        "properties": {
          "Configurables": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.Products.ConfigurableProductDto"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetGreetingCards": {
        "type": "object",
        "properties": {
          "IncludedFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetGreetingCardsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetProductDetail": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetProductDetailResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Relations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Products.ProductRelationDTO"
            }
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetProductPrices": {
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          },
          "ProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "TargetOrganizationUnitID": {
            "type": "integer"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetProductPricesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Products.PriceInfo"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetProductPricing": {
        "required": [
          "ProductID"
        ],
        "type": "object",
        "properties": {
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetProductPricingResponse": {
        "required": [
          "UnitPriceInTax",
          "TaxRate",
          "UnitPrice"
        ],
        "type": "object",
        "properties": {
          "CostPriceCurrencyID": {
            "type": "string"
          },
          "CurrencyID": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OriginalUnitPrice": {
            "type": "number"
          },
          "OriginalUnitPriceInTax": {
            "type": "number"
          },
          "TaxRate": {
            "type": "number"
          },
          "UnitCost": {
            "type": "number"
          },
          "UnitPrice": {
            "type": "number"
          },
          "UnitPriceInTax": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetProductRelations": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetProductRelationsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Relations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Products.ProductRelationDTO"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetProductRequirementValuesForOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetProductRequirementValuesForOrderLine": {
        "required": [
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetProductRequirementValuesForOrderLineResponse": {
        "required": [
          "OrderLineID",
          "ProductID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "ProductPrimitiveName": {
            "type": "string"
          },
          "Requirements": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetProductRequirementValuesForOrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Requirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Products.GetProductRequirementValuesForOrderResponse_ProductRequirement"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetProductRequirementValuesForOrderResponse_ProductRequirement": {
        "required": [
          "OrderLineID",
          "ProductID"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "ProductPrimitiveName": {
            "type": "string"
          },
          "Requirements": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetProductSearchSuggestions": {
        "type": "object",
        "properties": {
          "MaxSuggestions": {
            "type": "integer"
          },
          "Text": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetProductSearchSuggestionsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Suggestions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Search.SuggestionModel"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetProductStructure": {
        "type": "object",
        "properties": {
          "Code": {
            "type": "string"
          },
          "CountryID": {
            "type": "string"
          },
          "LanguageID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetProductStructureResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Code": {
            "type": "string"
          },
          "CountryID": {
            "type": "string"
          },
          "Definition": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ProductStructureDefinition"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "LanguageID": {
            "type": "string"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetProductUnitOfMeasureQuantities": {
        "type": "object",
        "properties": {
          "Products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Products.GetProductUnitOfMeasureQuantities_Model"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetProductUnitOfMeasureQuantities_Model": {
        "required": [
          "ID",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetProductUnitOfMeasureQuantitiesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Products.GetProductUnitOfMeasureQuantitiesResponse_Model"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetProductUnitOfMeasureQuantitiesResponse_Model": {
        "required": [
          "ProductID"
        ],
        "type": "object",
        "properties": {
          "ProductID": {
            "type": "integer"
          },
          "UnitOfMeasures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Products.GetProductUnitOfMeasureQuantitiesResponse_Result"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetProductUnitOfMeasureQuantitiesResponse_Result": {
        "required": [
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "Quantity": {
            "type": "integer"
          },
          "Value": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetProducts": {
        "required": [
          "ProductIDs",
          "IncludedFields"
        ],
        "type": "object",
        "properties": {
          "IncludedFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.GetProductsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Products": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.ListBrands": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.ListBrandsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Products.ListBrandsResponse_BrandDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.ListBrandsResponse_BrandDto": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.ListProductStructures": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.ListProductStructuresResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Products.GetProductStructureResponse"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.PriceInfo": {
        "required": [
          "PriceListUsageTypeID",
          "ProductID",
          "TaxRate",
          "PriceListID",
          "Price",
          "PriceInTax"
        ],
        "type": "object",
        "properties": {
          "CurrencyID": {
            "type": "string"
          },
          "Price": {
            "type": "number"
          },
          "PriceInTax": {
            "type": "number"
          },
          "PriceListID": {
            "type": "integer"
          },
          "PriceListUsageTypeID": {
            "type": "integer"
          },
          "PriceListUsageTypeName": {
            "type": "string"
          },
          "ProductID": {
            "type": "integer"
          },
          "TaxRate": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.PrintProductPriceLabel": {
        "required": [
          "ID",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer",
            "description": "The ID of the product"
          },
          "Quantity": {
            "type": "integer",
            "description": "How many copies of the price label should be printed"
          },
          "StationID": {
            "type": "integer",
            "description": "ID of the printer where the label(s) will be printed"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.PrintProductPriceLabelResponse": {
        "required": [
          "Success"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Success": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.ProductRelationDTO": {
        "required": [
          "Direction",
          "PrimaryProductID",
          "StockRelationType"
        ],
        "type": "object",
        "properties": {
          "Direction": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ProductRelationDirection"
          },
          "PrimaryName": {
            "type": "string"
          },
          "PrimaryProductID": {
            "type": "integer"
          },
          "RelatedProductID": {
            "type": "integer"
          },
          "SecondaryName": {
            "type": "string"
          },
          "StockRelationType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.StockRelationType"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.ResolveProductBackendIDs": {
        "required": [
          "BackendIDs"
        ],
        "type": "object",
        "properties": {
          "BackendIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.ResolveProductBackendIDsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ResolvedBackendIDs": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "UnresolvedBackendIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.SearchProducts": {
        "required": [
          "Explain"
        ],
        "type": "object",
        "properties": {
          "AggregationOptions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.Search.AggregationFilterModel"
            }
          },
          "AggregationState": {
            "type": "string"
          },
          "Explain": {
            "type": "boolean",
            "description": "If Explain is set to true the response will contain an explanation of how the search was performed. This is ignored if you do not have the ProductSearchExplanations functionality."
          },
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.Search.FilterModel"
            }
          },
          "IncludedFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Options": {
            "$ref": "#/components/schemas/EVA.Core.Products.SearchProductsOptions"
          },
          "Page": {
            "type": "integer"
          },
          "PageSize": {
            "type": "integer"
          },
          "ProductSearchTemplateID": {
            "type": "integer"
          },
          "Query": {
            "type": "string"
          },
          "SearchStrategyCode": {
            "type": "string"
          },
          "Sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.SortFieldDescriptor"
            }
          },
          "UserTypeOverride": {
            "$ref": "#/components/schemas/EVA.Core.UserTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.SearchProductsOptions": {
        "required": [
          "IncludeProductRelations",
          "IncludePrefigureDiscounts"
        ],
        "type": "object",
        "properties": {
          "AvailabilityOptions": {
            "$ref": "#/components/schemas/EVA.Core.Stock.GetProductAvailabilityOptions"
          },
          "IncludePrefigureDiscounts": {
            "type": "boolean",
            "description": "Include the results of a PrefigureDiscounts call in the result"
          },
          "IncludeProductRelations": {
            "type": "boolean",
            "description": "Include the product relations"
          },
          "OrderID": {
            "type": "integer",
            "description": "Order to use for additional options"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.SearchProductsOptionsResponse": {
        "type": "object",
        "properties": {
          "AvailabilityPickupOrganizationUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.ProductAvailabilityPickupOrganizationUnit"
            }
          },
          "AvailabilityResult": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.Stock.ProductAvailabilityResult"
            }
          },
          "PrefiguredDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Discounts.PrefigureDiscountResult"
            }
          },
          "ProductRelations": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EVA.Core.Products.SearchProductsOptionsResponse_ProductRelation"
              }
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.SearchProductsOptionsResponse_ProductRelation": {
        "required": [
          "Direction",
          "PrimaryProductID",
          "StockRelationType"
        ],
        "type": "object",
        "properties": {
          "Direction": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ProductRelationDirection"
          },
          "PrimaryName": {
            "type": "string"
          },
          "PrimaryProductID": {
            "type": "integer"
          },
          "RelatedProductID": {
            "type": "integer"
          },
          "SecondaryName": {
            "type": "string"
          },
          "StockRelationType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.StockRelationType"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.SearchProductsResponse": {
        "required": [
          "Page",
          "Total",
          "PageSize"
        ],
        "type": "object",
        "properties": {
          "AggregationOptions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.Search.AggregationFilterModel"
            }
          },
          "AggregationState": {
            "type": "string"
          },
          "Aggregations": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Explanation": {
            "$ref": "#/components/schemas/EVA.Core.Search.ProductSearchExplanationModel"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Options": {
            "$ref": "#/components/schemas/EVA.Core.Products.SearchProductsOptionsResponse"
          },
          "Page": {
            "type": "integer"
          },
          "PageSize": {
            "type": "integer"
          },
          "Products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
            }
          },
          "Sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.SortFieldDescriptor"
            }
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Products.UpdateProductRequirementValuesForOrderLine": {
        "required": [
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "Values": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.AddPurchaseOrderLines": {
        "required": [
          "Lines",
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.AddPurchaseOrderLines_Line"
            }
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.AddPurchaseOrderLines_Line": {
        "required": [
          "ProductID",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "ProductID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          },
          "Reference": {
            "type": "string"
          },
          "RequestedDate": {
            "type": "string",
            "format": "date-time"
          },
          "StockLabelID": {
            "type": "integer"
          },
          "UnitPrice": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.AddPurchaseOrderLinesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.AddPurchaseOrderLinesResponse_ResultLine"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.AddPurchaseOrderLinesResponse_ResultLine": {
        "required": [
          "ProductID",
          "ID",
          "Quantity",
          "UnitPrice"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          },
          "Reference": {
            "type": "string"
          },
          "RequestedDate": {
            "type": "string",
            "format": "date-time"
          },
          "UnitPrice": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.ConfirmPurchaseOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "object"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.CreatePurchaseOrder": {
        "required": [
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "AutomaticCancellationDate": {
            "type": "string",
            "format": "date-time"
          },
          "BackendID": {
            "type": "string"
          },
          "CustomOrderTypeID": {
            "type": "integer"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "SupplierID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.CreatePurchaseOrderResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.CreatePurchaseOrderResponseWithUpdateIndicator": {
        "required": [
          "IsUpdated",
          "ID",
          "IsCreated"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "IsCreated": {
            "type": "boolean"
          },
          "IsUpdated": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.CreateShipmentReceipt": {
        "required": [
          "Lines",
          "ShipmentID",
          "CompletesShipment"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "BackendSystemID": {
            "type": "string"
          },
          "CompletesShipment": {
            "type": "boolean"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.CreateShipmentReceipt_Line"
            }
          },
          "ShipmentID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.CreateShipmentReceipt_Line": {
        "required": [
          "CompletesShipmentLine",
          "QuantityReceived",
          "ShipmentLineID"
        ],
        "type": "object",
        "properties": {
          "CompletesShipmentLine": {
            "type": "boolean"
          },
          "QuantityReceived": {
            "type": "integer"
          },
          "ShipmentLineID": {
            "type": "integer"
          },
          "StockLabelID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.CreateShipmentReceiptResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.FullyReceiveShipment": {
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.FullyReceiveShipmentResponse": {
        "required": [
          "ReservedOrdersCount"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ReservedOrdersCount": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.FullyShipPurchaseOrder": {
        "required": [
          "PurchaseOrderID"
        ],
        "type": "object",
        "properties": {
          "BackendSystemID": {
            "type": "string"
          },
          "PurchaseOrderID": {
            "type": "integer"
          },
          "ShipmentBackendID": {
            "type": "string"
          },
          "ShippedFromOrganizationUnitID": {
            "type": "integer",
            "description": "The OrganizationUnit the shipment was physically shipped from."
          },
          "TrackingCode": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.GetOrganizationUnitCreditBalance": {
        "required": [
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.GetOrganizationUnitCreditBalanceResponse": {
        "required": [
          "CreditBalance"
        ],
        "type": "object",
        "properties": {
          "CreditBalance": {
            "type": "number"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.GetProductSupplierInfoForProducts": {
        "required": [
          "ProductIDs"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          },
          "ProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.GetProductSupplierInfoForProductsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ProductSupplierInfos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.GetProductSupplierInfoForProductsResponse_ProductSupplierInfo"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.GetProductSupplierInfoForProductsResponse_Barcode": {
        "required": [
          "UnitOfMeasureID",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "Code": {
            "type": "string"
          },
          "Quantity": {
            "type": "integer"
          },
          "UnitOfMeasureID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.GetProductSupplierInfoForProductsResponse_ProductSupplierInfo": {
        "required": [
          "UnitCost",
          "ProductID",
          "SupplierProductID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Barcodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.GetProductSupplierInfoForProductsResponse_Barcode"
            }
          },
          "PreferredMinimumOrderQuantity": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "Supplier": {
            "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.GetProductSupplierInfoForProductsResponse_Supplier"
          },
          "SupplierProductBackendID": {
            "type": "string"
          },
          "SupplierProductID": {
            "type": "integer"
          },
          "UnitCost": {
            "type": "number"
          },
          "UnitOfMeasures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.GetProductSupplierInfoForProductsResponse_UnitOfMeasure"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.GetProductSupplierInfoForProductsResponse_Supplier": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.GetProductSupplierInfoForProductsResponse_UnitOfMeasure": {
        "required": [
          "ID",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Quantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.GetShipmentDetails": {
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.GetShipmentDetailsResponse": {
        "required": [
          "IsCompleted",
          "ReceiveMethod"
        ],
        "type": "object",
        "properties": {
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.CustomFields.CustomFieldResponse"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ReceiveMethod": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ShipmentReceiveMethods"
          },
          "ShipmentDate": {
            "type": "string",
            "format": "date-time"
          },
          "ShippedFrom": {
            "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.GetShipmentDetailsResponse_ShipOrganizationUnitDetails"
          },
          "ShippedTo": {
            "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.GetShipmentDetailsResponse_ShipOrganizationUnitDetails"
          },
          "TrackingCode": {
            "type": "string"
          },
          "WorkSet": {
            "$ref": "#/components/schemas/EVA.Core.Shipments.ReceiveShipmentWorkSet"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.GetShipmentDetailsResponse_ShipOrganizationUnitDetails": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.GetShipmentReceipt": {
        "required": [
          "ShipmentReceiptID"
        ],
        "type": "object",
        "properties": {
          "ShipmentReceiptID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.GetShipmentReceiptResponse": {
        "required": [
          "Lines",
          "TotalQuantityReceived",
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "BackendSystemID": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.GetShipmentReceiptResponse_LineDto"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "TotalQuantityReceived": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.GetShipmentReceiptResponse_LineDto": {
        "required": [
          "StockLabel",
          "ShipmentLine",
          "QuantityReceived"
        ],
        "type": "object",
        "properties": {
          "QuantityReceived": {
            "type": "integer"
          },
          "ShipmentLine": {
            "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.GetShipmentReceiptResponse_LineDto_ShipmentLineDto"
          },
          "StockLabel": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.GetShipmentReceiptResponse_LineDto_ShipmentLineDto": {
        "required": [
          "OrderLineID",
          "OrderID",
          "QuantityDelivered",
          "DeliveryType",
          "QuantityShipped"
        ],
        "type": "object",
        "properties": {
          "BackendReference": {
            "type": "string"
          },
          "DeliveryType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ShipmentLineDeliveryTypes"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "QuantityDelivered": {
            "type": "integer"
          },
          "QuantityShipped": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.GetSupplierStockForProduct": {
        "required": [
          "ProductID",
          "SupplierID",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "SupplierID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.GetSupplierStockForProductResponse": {
        "required": [
          "AvailableStock"
        ],
        "type": "object",
        "properties": {
          "AvailableStock": {
            "type": "integer"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.ModifyPurchaseOrderLine": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          },
          "Reference": {
            "type": "string"
          },
          "RequestedDate": {
            "type": "string",
            "format": "date-time"
          },
          "StockLabelID": {
            "type": "integer"
          },
          "UnitPrice": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.RaisePurchaseOrderImportedEvent": {
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "BackendSystemID": {
            "type": "string"
          },
          "PurchaseOrderID": {
            "type": "integer"
          },
          "ShipToOrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.ReceivePurchaseOrderShipment": {
        "required": [
          "Lines",
          "ShipmentID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "BackendSystemID": {
            "type": "string"
          },
          "CompleteShipment": {
            "type": "boolean",
            "description": "If passed in as true this will close the shipment for further receipts."
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.ReceivePurchaseOrderShipment_Line"
            }
          },
          "ShipmentID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.ReceivePurchaseOrderShipment_Line": {
        "required": [
          "QuantityReceived"
        ],
        "type": "object",
        "properties": {
          "ProductID": {
            "type": "integer"
          },
          "QuantityReceived": {
            "type": "integer"
          },
          "ShipmentLineID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.ReceivePurchaseOrderShipmentResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.ReceiveShipment": {
        "required": [
          "Lines",
          "ShipmentID"
        ],
        "type": "object",
        "properties": {
          "CompleteShipment": {
            "type": "boolean"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.ReceiveShipment_Line"
            }
          },
          "ShipmentID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.ReceiveShipment_Line": {
        "required": [
          "ProductID"
        ],
        "type": "object",
        "properties": {
          "ProductID": {
            "type": "integer"
          },
          "Receipts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.ReceiveShipment_Line_Receipt"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.ReceiveShipment_Line_Receipt": {
        "required": [
          "QuantityReceived"
        ],
        "type": "object",
        "properties": {
          "QuantityReceived": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.ShipPurchaseOrder": {
        "required": [
          "OrderID",
          "ShipmentDate"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.ShipPurchaseOrderLine"
            }
          },
          "OrderID": {
            "type": "integer"
          },
          "ShipmentDate": {
            "type": "string",
            "format": "date-time"
          },
          "ShippedFromOrganizationUnitID": {
            "type": "integer",
            "description": "The OrganizationUnit the shipment was physically shipped from."
          },
          "TrackingCode": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.ShipPurchaseOrderLine": {
        "required": [
          "QuantityToShip",
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "QuantityToShip": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.ShipPurchaseOrderResponse": {
        "required": [
          "ShipmentID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ShipmentID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.SupplierCreateOrUpdatePurchaseOrder": {
        "required": [
          "Lines",
          "Receive",
          "Ship",
          "ShipFromOrganizationUnitID",
          "ShipToOrganizationUnitID",
          "BackendID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string",
            "description": "Identifer of the order from the 3rd party"
          },
          "BackendSystemID": {
            "type": "string",
            "description": "Identifier of the 3rd party system that created the order"
          },
          "CustomFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "ExpectedDeliveryDate": {
            "type": "string",
            "description": "Date that the supplier expects to deliver the shipment(s) of the purchase order",
            "format": "date-time"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.SupplierCreateOrUpdatePurchaseOrder_SupplierCreateOrUpdatePurchaseOrderLine"
            },
            "description": "Contents of the purchase order."
          },
          "Receive": {
            "type": "boolean",
            "description": "Receive the order immediately after shipping, works only if `Ship` is set to true"
          },
          "Ship": {
            "type": "boolean",
            "description": "Ship the order immediately after creation"
          },
          "ShipFromOrganizationUnitBackendID": {
            "type": "string",
            "description": "BackendID of the OrganizationUnit who will be supplying the stock"
          },
          "ShipFromOrganizationUnitID": {
            "type": "integer",
            "description": "OrganizationUnit who will be supplying the stock."
          },
          "ShipToOrganizationUnitBackendID": {
            "type": "string",
            "description": "BackendID of the OrganizationUnit that will be receiving the purchase order shipment(s)"
          },
          "ShipToOrganizationUnitID": {
            "type": "integer",
            "description": "OrganizationUnit that will be receiving the purchase order shipment(s)."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.SupplierCreateOrUpdatePurchaseOrder_SupplierCreateOrUpdatePurchaseOrderLine": {
        "required": [
          "ProductID",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "CustomID": {
            "type": "string",
            "description": "Identifier of the product"
          },
          "ProductID": {
            "type": "integer",
            "description": "Identifier of the product"
          },
          "Quantity": {
            "type": "integer",
            "description": "Quantity that is expected to be shipped"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.SupplierCreatePurchaseOrder": {
        "required": [
          "Lines",
          "Receive",
          "Ship",
          "ShipFromOrganizationUnitID",
          "ShipToOrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string",
            "description": "Identifier of the order from the 3rd party"
          },
          "BackendSystemID": {
            "type": "string",
            "description": "Identifier of the 3rd party system that created the order"
          },
          "CustomFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "ExpectedDeliveryDate": {
            "type": "string",
            "description": "Date that the supplier expects to deliver the shipment(s) of the purchase order",
            "format": "date-time"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.SupplierCreatePurchaseOrder_SupplierCreatePurchaseOrderBatchableLine"
            },
            "description": "Contents of the purchase order.\nNote: Only one key property can be used to identify the product. When different properties are used, the request will be invalid.\nThis will become redundant when ProductID is the only property left."
          },
          "Receive": {
            "type": "boolean",
            "description": "Receive the order immediately after shipping, works only if `Ship` is set to true"
          },
          "Ship": {
            "type": "boolean",
            "description": "Ship the order immediately after creation"
          },
          "ShipFromOrganizationUnitBackendID": {
            "type": "string",
            "description": "BackendID of the OrganizationUnit who will be supplying the stock"
          },
          "ShipFromOrganizationUnitID": {
            "type": "integer",
            "description": "OrganizationUnit who will be supplying the stock."
          },
          "ShipToOrganizationUnitBackendID": {
            "type": "string",
            "description": "BackendID of the OrganizationUnit that will be receiving the purchase order shipment(s)"
          },
          "ShipToOrganizationUnitID": {
            "type": "integer",
            "description": "OrganizationUnit that will be receiving the purchase order shipment(s)."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.SupplierCreatePurchaseOrder_SupplierCreatePurchaseOrderBatchableLine": {
        "required": [
          "ProductID",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string",
            "description": "Backend ID of the product"
          },
          "Barcode": {
            "type": "string",
            "description": "Barcode of the product"
          },
          "CustomID": {
            "type": "string",
            "description": "Custom ID of the product"
          },
          "ProductID": {
            "type": "integer",
            "description": "Identifier of the product"
          },
          "Quantity": {
            "type": "integer",
            "description": "Quantity that is expected to be shipped"
          },
          "UnitPrice": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.SupplierShipPurchaseOrder": {
        "required": [
          "Confirmations"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "BackendSystemID": {
            "type": "string"
          },
          "Confirmations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.SupplierShipPurchaseOrderConfirmation"
            }
          },
          "ID": {
            "type": "integer"
          },
          "ShipToOrganizationUnitBackendID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.SupplierShipPurchaseOrderConfirmation": {
        "required": [
          "Lines",
          "BackendID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "CustomFieldsByBackendID": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldValue"
            }
          },
          "ExpectedDeliveryDate": {
            "type": "string",
            "format": "date-time"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.SupplierShipPurchaseOrderConfirmationLine"
            }
          },
          "TrackingCode": {
            "type": "string"
          },
          "TrackingLink": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.SupplierShipPurchaseOrderConfirmationLine": {
        "required": [
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string",
            "description": "Identifier of the product"
          },
          "Barcode": {
            "type": "string",
            "description": "Please use `BackendID`"
          },
          "CustomID": {
            "type": "string",
            "description": "Please use `BackendID`"
          },
          "Quantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.SupplierUpdatePurchaseOrder": {
        "required": [
          "Lines"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string",
            "description": "Identifier of the order from the 3rd party"
          },
          "BackendSystemID": {
            "type": "string",
            "description": "Identifier of the 3rd party system that created the order"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.PurchaseOrders.SupplierUpdatePurchaseOrder_SupplierUpdatePurchaseOrderLine"
            },
            "description": "Contents of the purchase order.\nNote: Only one key property can be used to identify the product. When different properties are used, the request will be invalid.\nThis will become redundant when ProductID is the only property left."
          },
          "ShipToOrganizationUnitBackendID": {
            "type": "string",
            "description": "BackendID of the OrganizationUnit that will be receiving the purchase order shipment(s)"
          },
          "ShipToOrganizationUnitID": {
            "type": "integer",
            "description": "OrganizationUnit that will be receiving the purchase order shipment(s)."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.PurchaseOrders.SupplierUpdatePurchaseOrder_SupplierUpdatePurchaseOrderLine": {
        "required": [
          "ProductID",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "CustomID": {
            "type": "string",
            "description": "Custom ID of the product"
          },
          "ExpectedDeliveryDate": {
            "type": "string",
            "description": "Date that the supplier expects to deliver this orderline. If you supply multiple lines with the same ProductID, we only take the latest date.",
            "format": "date-time"
          },
          "ProductID": {
            "type": "integer",
            "description": "Identifier of the product"
          },
          "Quantity": {
            "type": "integer",
            "description": "Quantity that is expected to be shipped"
          },
          "UnitPrice": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Push.AddPushNotificationDevice": {
        "required": [
          "MobileAppID",
          "DeviceOS",
          "DeviceToken",
          "BackendSystemID"
        ],
        "type": "object",
        "properties": {
          "BackendSystemID": {
            "type": "string"
          },
          "DeviceOS": {
            "type": "string"
          },
          "DeviceToken": {
            "type": "string"
          },
          "MobileAppID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Push.RegisterAppForNotifications": {
        "required": [
          "DeviceToken",
          "BackendID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string",
            "description": "Application identifier"
          },
          "DeviceID": {
            "type": "string",
            "description": "Only fill when multiple apps on the same device are involved. Identifier that uniquely identifies the device where the app is running on. Should be the same for multiple apps on the same device."
          },
          "DeviceToken": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Push.RemovePushNotificationDevice": {
        "type": "object",
        "properties": {
          "BackendSystemID": {
            "type": "string"
          },
          "DeviceToken": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.QuickBuys.CreateQuickBuy": {
        "required": [
          "Type",
          "OrganizationUnitSetID",
          "ProductSearchTemplateID",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "ProductSearchTemplateID": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.QuickBuyType"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.QuickBuys.CreateQuickBuyResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.QuickBuys.DeleteQuickBuy": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.QuickBuys.GetQuickBuy": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.QuickBuys.GetQuickBuyOptions": {
        "required": [
          "ProductProperties"
        ],
        "type": "object",
        "properties": {
          "ProductProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.QuickBuys.GetQuickBuyOptionsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.QuickBuys.GetQuickBuyOptionsResponse_QuickBuyOption"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.QuickBuys.GetQuickBuyOptionsResponse_QuickBuyOption": {
        "required": [
          "Type",
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
            }
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.QuickBuyType"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.QuickBuys.GetQuickBuyResponse": {
        "required": [
          "Type",
          "OrganizationUnitSetID",
          "ID",
          "ProductSearchTemplateID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Name": {
            "type": "string"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "ProductSearchTemplateID": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.QuickBuyType"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.QuickBuys.GetQuickBuys": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.QuickBuys.GetQuickBuysResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.QuickBuys.GetQuickBuysResponse_QuickBuyItem"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.QuickBuys.GetQuickBuysResponse_QuickBuyItem": {
        "required": [
          "Type",
          "OrganizationUnitSetID",
          "ID",
          "ProductSearchTemplateID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "ProductSearchTemplateID": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.QuickBuyType"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.QuickBuys.UpdateQuickBuy": {
        "required": [
          "Type",
          "OrganizationUnitSetID",
          "ID",
          "ProductSearchTemplateID",
          "Name"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "ProductSearchTemplateID": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.QuickBuyType"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.RecurringTasks.CreateRecurringTask": {
        "type": "object",
        "properties": {
          "Arguments": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Cron": {
            "type": "string"
          },
          "FullName": {
            "type": "string"
          },
          "ID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.RecurringTasks.DeleteRecurringTask": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.RecurringTasks.EnqueueTask": {
        "type": "object",
        "properties": {
          "Arguments": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "FullName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.RecurringTasks.ListAvailableRecurringTasks": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.RecurringTasks.ListAvailableRecurringTasksResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.RecurringTasks.ListAvailableRecurringTasksResponse_TaskPluginDto"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.RecurringTasks.ListAvailableRecurringTasksResponse_TaskPluginDto": {
        "type": "object",
        "properties": {
          "AvailableSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.RecurringTasks.TaskPluginSettings"
            }
          },
          "DefaultCron": {
            "type": "string"
          },
          "DefaultName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "FullName": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.RecurringTasks.ListRecurringTasks": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.RecurringTasks.ListRecurringTasks2": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.RecurringTasks.ListRecurringTasks2_ListRecurringTasksFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.RecurringTasks.ListRecurringTasks2_ListRecurringTasksFilter": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string"
          },
          "LastState": {
            "type": "string"
          },
          "Query": {
            "type": "string"
          },
          "TypeName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.RecurringTasks.ListRecurringTasks2Response": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.RecurringTasks.RecurringTask"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.RecurringTasks.ListRecurringTasksResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.RecurringTasks.RecurringTask"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.RecurringTasks.RecurringTask": {
        "required": [
          "IsDeleted"
        ],
        "type": "object",
        "properties": {
          "Args": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "Cron": {
            "type": "string"
          },
          "ID": {
            "type": "string"
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "LastExecution": {
            "type": "string",
            "format": "date-time"
          },
          "LastState": {
            "type": "string"
          },
          "NextExecution": {
            "type": "string",
            "format": "date-time"
          },
          "Type": {
            "type": "string"
          },
          "TypeName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.RecurringTasks.TaskPluginSettings": {
        "required": [
          "Required"
        ],
        "type": "object",
        "properties": {
          "Default": {
            "type": "object"
          },
          "Description": {
            "type": "string"
          },
          "Key": {
            "type": "string"
          },
          "Required": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.RecurringTasks.TriggerRecurringTask": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.RecurringTasks.TriggerRecurringTaskResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "JobId": {
            "type": "string"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.RecurringTasks.UpdateRecurringTask": {
        "required": [
          "ID",
          "FullName",
          "Cron"
        ],
        "type": "object",
        "properties": {
          "Arguments": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Cron": {
            "type": "string"
          },
          "FullName": {
            "type": "string"
          },
          "ID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Repositories.ListOrderInterventionTasksFilter": {
        "required": [
          "IsCompleted"
        ],
        "type": "object",
        "properties": {
          "IsCompleted": {
            "type": "boolean"
          },
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ResourceInfo": {
        "required": [
          "BlobID"
        ],
        "type": "object",
        "properties": {
          "BlobID": {
            "type": "string",
            "format": "uuid"
          },
          "Url": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ResourceResponseMessage": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Url": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ResourceWithBlobIDResponseMessage": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ResourceInfo": {
            "$ref": "#/components/schemas/EVA.Core.ResourceInfo"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ResponseMessageMetadata": {
        "type": "object",
        "properties": {
          "ExternalIDs": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "UnresolvedExternalIDs": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Scripting.AvailableVariablesResult": {
        "type": "object",
        "properties": {
          "Variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Transpilation.VariableNode"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Scripting.BuildScript": {
        "required": [
          "Dialect",
          "Script",
          "ReplacementAST"
        ],
        "type": "object",
        "properties": {
          "Dialect": {
            "type": "string"
          },
          "ReplacementAST": {
            "type": "object"
          },
          "Script": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Scripting.BuildScriptResponse": {
        "required": [
          "HasErrors"
        ],
        "type": "object",
        "properties": {
          "AST": {
            "type": "object"
          },
          "CodeSnippet": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Scripting.ScriptError"
            }
          },
          "HasErrors": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Script": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Scripting.CreateScript": {
        "required": [
          "IsActive"
        ],
        "type": "object",
        "properties": {
          "Dialect": {
            "type": "string"
          },
          "IsActive": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          },
          "Source": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Scripting.CreateScriptResponse": {
        "required": [
          "HasErrors"
        ],
        "type": "object",
        "properties": {
          "AST": {
            "type": "object"
          },
          "AvailableVariables": {
            "$ref": "#/components/schemas/EVA.Core.Scripting.AvailableVariablesResult"
          },
          "CSharpSource": {
            "type": "string"
          },
          "CompletionSuggestions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Parsing.CompletionSuggestion"
            }
          },
          "Documentation": {
            "$ref": "#/components/schemas/EVA.Core.Parsing.DocumentationResult"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Scripting.ScriptError"
            }
          },
          "HasErrors": {
            "type": "boolean"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Scripting.DeleteScript": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Scripting.ExplainScript": {
        "required": [
          "Source"
        ],
        "type": "object",
        "properties": {
          "Dialect": {
            "type": "string"
          },
          "Source": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Scripting.ExplainScriptResponse": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Scripting.GetScript": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Scripting.GetScriptDialects": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Scripting.GetScriptDialectsResponse": {
        "type": "object",
        "properties": {
          "Dialects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Scripting.GetScriptDialectsResponse_Dialect"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Scripting.GetScriptDialectsResponse_Dialect": {
        "type": "object",
        "properties": {
          "Keywords": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Scripting.GetScriptExtensionPoints": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Scripting.GetScriptExtensionPointsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ExtensionPoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Scripting.GetScriptExtensionPointsResponse_ExtensionPoint"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Scripting.GetScriptExtensionPointsResponse_ExtensionPoint": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Scripting.GetScriptNodeCompletionOptions": {
        "required": [
          "NodeID"
        ],
        "type": "object",
        "properties": {
          "AST": {
            "type": "object"
          },
          "Dialect": {
            "type": "string"
          },
          "NodeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Scripting.GetScriptNodeCompletionOptionsResponse": {
        "type": "object",
        "properties": {
          "Alternatives": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "NextStatements": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "SelfCompletion": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Scripting.GetScriptResponse": {
        "required": [
          "IsActive",
          "ID"
        ],
        "type": "object",
        "properties": {
          "Dialect": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "IsActive": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Name": {
            "type": "string"
          },
          "RevisionComment": {
            "type": "string"
          },
          "Source": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Scripting.ListScriptHistory": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer",
            "description": "ID of the script"
          },
          "InitialPageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageTokenConfig_1_EVA.Core.ListScriptHistoryFilter"
          },
          "PageToken": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Scripting.ListScriptHistoryResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "NextPageToken": {
            "type": "string"
          },
          "PreviousPageToken": {
            "type": "string"
          },
          "Results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.ListScriptsItem"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Scripting.ListScripts": {
        "type": "object",
        "properties": {
          "InitialPageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageTokenConfig_1_EVA.Core.ListScriptsFilter"
          },
          "PageToken": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Scripting.ListScriptsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "NextPageToken": {
            "type": "string"
          },
          "PreviousPageToken": {
            "type": "string"
          },
          "Results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.ListScriptsItem"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Scripting.ParseScript": {
        "required": [
          "IncludeCompletionSuggestions",
          "IncludeAST"
        ],
        "type": "object",
        "properties": {
          "AvailableVariablesRequest": {
            "$ref": "#/components/schemas/EVA.Core.Scripting.ParseScript_AvailableVariablesRequestInfo"
          },
          "CompletionSource": {
            "type": "string",
            "description": "The script that you want to have auto-completion suggestions for.\nThis can be different than the full Source as you only want to provide completion suggestions at the current cursor position,\nso you can provide the full source for validation purposes and provide the script up to the cursor position for auto-completion suggestions."
          },
          "Dialect": {
            "type": "string"
          },
          "DocumentationRequest": {
            "$ref": "#/components/schemas/EVA.Core.Scripting.ParseScript_DocumentationRequestInfo"
          },
          "IncludeAST": {
            "type": "boolean"
          },
          "IncludeCompletionSuggestions": {
            "type": "boolean"
          },
          "Source": {
            "type": "string",
            "description": "The script to parse."
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.Scripting.ParseTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Scripting.ParseScript_AvailableVariablesRequestInfo": {
        "required": [
          "Line",
          "Column"
        ],
        "type": "object",
        "properties": {
          "Column": {
            "type": "integer",
            "description": "The 0-based column number of the position in the script that you would like to know the available variables for."
          },
          "Line": {
            "type": "integer",
            "description": "The 1-based line number of the position in the script that you would like to know the available variables for."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Scripting.ParseScript_DocumentationRequestInfo": {
        "required": [
          "Line",
          "Column"
        ],
        "type": "object",
        "properties": {
          "Column": {
            "type": "integer",
            "description": "The 0-based column number of the position in the script that you would like documentation for."
          },
          "Line": {
            "type": "integer",
            "description": "The 1-based line number of the position in the script that you would like documentation for."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Scripting.ParseScriptResponse": {
        "required": [
          "HasErrors"
        ],
        "type": "object",
        "properties": {
          "AST": {
            "type": "object"
          },
          "AvailableVariables": {
            "$ref": "#/components/schemas/EVA.Core.Scripting.AvailableVariablesResult"
          },
          "CSharpSource": {
            "type": "string"
          },
          "CompletionSuggestions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Parsing.CompletionSuggestion"
            }
          },
          "Documentation": {
            "$ref": "#/components/schemas/EVA.Core.Parsing.DocumentationResult"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Scripting.ScriptError"
            }
          },
          "HasErrors": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Scripting.ParseTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Scripting.ScriptError": {
        "required": [
          "SourceColumn",
          "SourceLineNumber"
        ],
        "type": "object",
        "properties": {
          "Message": {
            "type": "string"
          },
          "SourceColumn": {
            "type": "integer"
          },
          "SourceLine": {
            "type": "string"
          },
          "SourceLineNumber": {
            "type": "integer"
          },
          "Type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Scripting.UpdateScript": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Dialect": {
            "type": "object"
          },
          "ID": {
            "type": "integer"
          },
          "IsActive": {
            "type": "object"
          },
          "Name": {
            "type": "object"
          },
          "RevisionComment": {
            "type": "string"
          },
          "Source": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Scripting.UpdateScriptResponse": {
        "required": [
          "HasErrors"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Scripting.ScriptError"
            }
          },
          "HasErrors": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ScrollablePageConfig_1_EVA.Core.EventLedger.EventLedgerFilters": {
        "type": "object",
        "properties": {
          "Filter": {
            "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerFilters"
          },
          "Limit": {
            "type": "integer"
          },
          "NextResultToken": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.ScrollablePagedResult_1_EVA.Core.EventLedger.EventLedgerDocument": {
        "type": "object",
        "properties": {
          "NextResultToken": {
            "type": "string"
          },
          "Page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.EventLedger.EventLedgerDocument"
            }
          },
          "PreviousResultToken": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Search.AggregationFilterModel": {
        "required": [
          "StatsAggregation",
          "Negation",
          "ExactMatch",
          "TermsAggregation"
        ],
        "type": "object",
        "properties": {
          "AggregationOptions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.Search.AggregationFilterModel"
            }
          },
          "ExactMatch": {
            "type": "boolean"
          },
          "From": {
            "type": "string"
          },
          "IncludeMissing": {
            "type": "boolean"
          },
          "MaxAggregationTerms": {
            "type": "integer"
          },
          "Negation": {
            "type": "boolean"
          },
          "StatsAggregation": {
            "type": "boolean"
          },
          "TermsAggregation": {
            "type": "boolean"
          },
          "To": {
            "type": "string"
          },
          "Values": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Search.FilterModel": {
        "required": [
          "Negation",
          "ExactMatch"
        ],
        "type": "object",
        "properties": {
          "ExactMatch": {
            "type": "boolean"
          },
          "From": {
            "type": "string"
          },
          "IncludeMissing": {
            "type": "boolean"
          },
          "Negation": {
            "type": "boolean"
          },
          "To": {
            "type": "string"
          },
          "Values": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Search.IProductSearchItem": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Barcodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "BrandName": {
            "type": "string"
          },
          "ConfigurableProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "CurrencyID": {
            "type": "string"
          },
          "CustomID": {
            "type": "string"
          },
          "DisplayPrice": {
            "type": "number"
          },
          "DisplayValue": {
            "type": "string"
          },
          "ExcludeFromGiftWrapping": {
            "type": "boolean"
          },
          "ID": {
            "type": "integer"
          },
          "LogicalLevel": {
            "type": "string"
          },
          "LogicalLevelHierarchy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Search.ProductSearchItemLogicalLevelHierarchyEntry"
            }
          },
          "LongDescription": {
            "type": "string"
          },
          "MaxQuantityPerOrder": {
            "type": "integer"
          },
          "Media": {
            "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItemProductMedia"
          },
          "Name": {
            "type": "string"
          },
          "OriginalPrice": {
            "type": "number"
          },
          "ParentHierarchy": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "Parents": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "PrimaryImage": {
            "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItemPrimaryImage"
          },
          "ProductRequirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Search.ProductSearchItemProductRequirementMetadata"
            }
          },
          "PublicationStatuses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ShortDescription": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ProductStatus"
          },
          "TaxExemptionCode": {
            "type": "string"
          },
          "TaxExemptionReason": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ProductTypes"
          },
          "Unstackable": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Search.IProductSearchItemMediaEntry": {
        "type": "object",
        "properties": {
          "Blob": {
            "type": "string"
          },
          "ID": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Sequence": {
            "type": "integer"
          },
          "Type": {
            "type": "string"
          },
          "Url": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Search.IProductSearchItemPrimaryImage": {
        "type": "object",
        "properties": {
          "Blob": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "Url": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Search.IProductSearchItemProductMedia": {
        "type": "object",
        "properties": {
          "Gallery": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ImageCount": {
            "type": "integer"
          },
          "Media": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItemMediaEntry"
            }
          },
          "PrimaryImage": {
            "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItemPrimaryImage"
          },
          "Swatches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItemMediaEntry"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Search.ProductSearchExplanationModel": {
        "type": "object",
        "properties": {
          "Query": {
            "type": "object"
          },
          "SearchStrategy": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Search.ProductSearchItemLogicalLevelHierarchyEntry": {
        "required": [
          "ProductID"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Search.ProductSearchItemProductRequirementMetadata": {
        "required": [
          "ID",
          "IsRequired",
          "IsArray"
        ],
        "type": "object",
        "properties": {
          "Data": {
            "type": "object"
          },
          "DataType": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "IsArray": {
            "type": "boolean"
          },
          "IsRequired": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          },
          "Options": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldOptions"
          },
          "OrderType": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Search.SuggestionModel": {
        "required": [
          "Score"
        ],
        "type": "object",
        "properties": {
          "Payload": {
            "type": "object"
          },
          "Score": {
            "type": "number"
          },
          "Text": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Security.FunctionalityScope": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Security.ListApiKeysFilter": {
        "type": "object",
        "properties": {
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Security.ListKeysItem": {
        "required": [
          "IsPublicSession",
          "IsActive",
          "CreatedByUserID",
          "UserID",
          "ID",
          "CreationTime"
        ],
        "type": "object",
        "properties": {
          "CreatedByUserID": {
            "type": "integer"
          },
          "CreatedByUserName": {
            "type": "string"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string"
          },
          "ExpirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer"
          },
          "IsActive": {
            "type": "boolean"
          },
          "IsPublicSession": {
            "type": "boolean"
          },
          "LanguageID": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "OrganizationUnitName": {
            "type": "string"
          },
          "UserID": {
            "type": "integer"
          },
          "UserName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Security.Passkey.PasskeyAuthenticateMessage": {
        "required": [
          "UserID"
        ],
        "type": "object",
        "properties": {
          "Challenge": {
            "type": "string"
          },
          "Signature": {
            "type": "string"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Security.TwoFactor.TwoFactorAuthenticatorData": {
        "required": [
          "Type",
          "SecurityLevel",
          "Status"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "SecurityLevel": {
            "type": "integer"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.Security.TwoFactor.TwoFactorAuthenticatorStatus"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.Security.TwoFactor.TwoFactorAuthenticatorType"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Security.TwoFactor.TwoFactorAuthenticatorStatus": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Security.TwoFactor.TwoFactorAuthenticatorType": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.ServiceError": {
        "type": "object",
        "properties": {
          "Code": {
            "type": "string"
          },
          "Message": {
            "type": "string"
          },
          "RequestID": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.AvailableUserTaskDto": {
        "required": [
          "Sequence",
          "ID",
          "CreationTime",
          "CanBeIgnored",
          "Priority",
          "HasUrgency"
        ],
        "type": "object",
        "properties": {
          "CanBeIgnored": {
            "type": "boolean"
          },
          "Children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.AvailableUserTaskDto"
            }
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EVA.Core.UserTasks.SecondChanceProductRegistrationUserTask.SecondChanceProductRegistrationUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.UserTasks.FullStockCountUserTask.FullStockCountLabelUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.UserTasks.FullStockCountUserTask.FullStockCountUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.UserTasks.Custom.CustomUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Types.ZonedCycleCounts.ZonedCycleCountPreCountUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Types.ZonedCycleCounts.ZonedCycleCountUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Types.StockReservation.ReservationCleanupUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Types.StockReservation.ReservationDeviationUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Types.StockReservation.StockReservationUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Types.StockReplenishment.StockReplenishmentUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Types.StockMovementFollowUp.StockMovementFollowUpUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Types.ShipFromStore.ShipFromStoreUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Types.ShipFromStore.ShipFromStorePrintUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Types.ReturnToSupplier.ReturnToSupplierUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Types.PrintPriceLabel.PrintPriceLabelUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Types.Print.PrintUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Types.Composite.CompositeUserTaskData"
              }
            ]
          },
          "Deadline": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string"
          },
          "ExpectedCompletionTime": {
            "type": "string",
            "format": "date-time"
          },
          "ExpectedTimeToComplete": {
            "type": "string"
          },
          "HasUrgency": {
            "type": "boolean"
          },
          "ID": {
            "type": "integer"
          },
          "Labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ParentID": {
            "type": "integer"
          },
          "Priority": {
            "type": "integer"
          },
          "PriorityDescription": {
            "type": "string"
          },
          "Sequence": {
            "type": "integer"
          },
          "SubType": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.UserTasks.Dto.UserTaskTypeDto"
          },
          "User": {
            "$ref": "#/components/schemas/EVA.Core.Users.UserDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CreateCustomerReturn": {
        "required": [
          "Lines",
          "OrderID",
          "CreateInOriginalOrganizationUnit",
          "ReturnWithoutProducts"
        ],
        "type": "object",
        "properties": {
          "AmountToRefund": {
            "type": "number",
            "description": "When a ReturnWithoutProducts is done, but not the full amount should be refunded, a different amount can be provided - cannot exceed the worth of the returned products"
          },
          "BackendID": {
            "type": "string",
            "description": "Optional, attached to a possible newly created (return) order - requires `BackendSystemID`"
          },
          "BackendSystemID": {
            "type": "string",
            "description": "Optional, attached to a possible newly created (return) order - requires `BackendID`"
          },
          "CreateInOriginalOrganizationUnit": {
            "type": "boolean",
            "description": "Attach the order to the same OrganizationUnit as the returned order"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.CustomerReturnLine"
            },
            "description": "Lines to return"
          },
          "OrderID": {
            "type": "integer"
          },
          "RefundCorrectionReasonID": {
            "type": "integer",
            "description": "When not the whole amount is refunded, a reason for this correction can be set. This will only have an affect if `AmountToRefund` is lower than the total amount of this return."
          },
          "ReturnWithoutProducts": {
            "type": "boolean",
            "description": "The products will not be returned, so the return order will be shipped immediately and the stock will be corrected"
          },
          "SecurityCode": {
            "type": "string",
            "description": "User is allowed to create return order when a valid security code is provided. The user has to have the ReturnWithoutSecurityCode role when omitted. `CRM:Return:RequiresOrderSecurityCode` needs to be enabled."
          },
          "StockOrganizationUnitID": {
            "type": "integer",
            "description": "When the stock should be returned to a specific OrganizationUnit (see `GetReturnableStatusForOrder.StockOrganizationUnits`)"
          },
          "TargetOrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CreateCustomerReturnWithoutOrder": {
        "type": "object",
        "properties": {
          "CustomerID": {
            "type": "integer"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ProductReturnLine"
            }
          },
          "OriginalOrderReference": {
            "type": "string"
          },
          "OriginalOrderTimestamp": {
            "type": "string",
            "format": "date-time"
          },
          "ShipToOrganizationUnitID": {
            "type": "integer"
          },
          "SoldFromOrganizationUnitID": {
            "type": "integer"
          },
          "TargetOrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CreateUserTaskNotCompletedReason": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Usages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ReasonUsage"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CreateUserTaskPriority": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "From": {
            "type": "integer",
            "description": "Inclusive"
          },
          "LanguageID": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "To": {
            "type": "integer",
            "description": "Exclusive"
          },
          "UserTaskSubTypeID": {
            "type": "integer"
          },
          "UserTaskTypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CreateUserTaskPriorityResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CreateUserTaskTypeOrganizationUnitSet": {
        "required": [
          "OrganizationUnitSetID",
          "IgnoreForPeriodClosing",
          "Required",
          "UserTaskTypeID"
        ],
        "type": "object",
        "properties": {
          "IgnoreForPeriodClosing": {
            "type": "boolean"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "Required": {
            "type": "boolean"
          },
          "UserTaskTypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CustomerInteractionTasks.CompleteCustomerInteractionTask": {
        "type": "object",
        "properties": {
          "WorkSet": {
            "$ref": "#/components/schemas/EVA.Core.CustomerInteractions.CustomerInteractionWorkSet"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CustomerInteractionTasks.CreateCustomerInteractionTask": {
        "required": [
          "TypeID",
          "Priority",
          "CustomerID"
        ],
        "type": "object",
        "properties": {
          "CustomerID": {
            "type": "integer"
          },
          "Priority": {
            "$ref": "#/components/schemas/EVA.Core.CustomerInteractions.CustomerInteractionTaskPriorities"
          },
          "TypeID": {
            "type": "integer"
          },
          "UserTask": {
            "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.CustomerInteractionUserTaskDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CustomerInteractionTasks.CreateCustomerInteractionTaskResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CustomerInteractionTasks.CreateCustomerInteractionTaskType": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "FollowUpTypeID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CustomerInteractionTasks.CreateCustomerInteractionTaskTypeResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CustomerInteractionTasks.CustomerInteractionTaskTypeDto": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "FollowUpTypeID": {
            "type": "integer"
          },
          "FollowUpTypeName": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CustomerInteractionTasks.CustomerInteractionUserDto": {
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string"
          },
          "FullName": {
            "type": "string"
          },
          "PhoneNumber": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CustomerInteractionTasks.CustomerInteractionUserTaskDto": {
        "required": [
          "IsActive",
          "IsCompleted",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "CompletionTime": {
            "type": "string",
            "format": "date-time"
          },
          "DeadLine": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string"
          },
          "ExpectedCompletionTime": {
            "type": "string",
            "format": "date-time"
          },
          "ExpectedStartTime": {
            "type": "string",
            "format": "date-time"
          },
          "IsActive": {
            "type": "boolean"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "OrganizationUnitName": {
            "type": "string"
          },
          "StartTime": {
            "type": "string",
            "format": "date-time"
          },
          "User": {
            "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.CustomerInteractionUserDto"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CustomerInteractionTasks.DeleteCustomerInteractionTask": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CustomerInteractionTasks.DeleteCustomerInteractionTaskType": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CustomerInteractionTasks.DetachFromCustomerInteractionTask": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CustomerInteractionTasks.GetCustomerInteractionTaskByID": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CustomerInteractionTasks.GetCustomerInteractionTaskByIDResponse": {
        "required": [
          "ID",
          "UserTaskID",
          "Priority",
          "CustomerID"
        ],
        "type": "object",
        "properties": {
          "Customer": {
            "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.CustomerInteractionUserDto"
          },
          "CustomerID": {
            "type": "integer"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Priority": {
            "$ref": "#/components/schemas/EVA.Core.CustomerInteractions.CustomerInteractionTaskPriorities"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.CustomerInteractionTaskTypeDto"
          },
          "UserTask": {
            "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.CustomerInteractionUserTaskDto"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CustomerInteractionTasks.GetCustomerInteractionTaskTypeByID": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CustomerInteractionTasks.GetCustomerInteractionTaskTypeByIDResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "FollowUpTypeID": {
            "type": "integer"
          },
          "FollowUpTypeName": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CustomerInteractionTasks.GetCustomerInteractionTaskTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Services.CustomerInteractionTasks.GetCustomerInteractionTaskTypesResponse": {
        "type": "object",
        "properties": {
          "CustomerInteractionTaskTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.CustomerInteractionTaskTypeDto"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CustomerInteractionTasks.ListCustomerInteractionTasks": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CustomerInteractionTasks.ListCustomerInteractionTasksResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Services.CustomerInteractionTasks.ListCustomerInteractionTasksResponse_CustomerInteractionTaskDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CustomerInteractionTasks.ListCustomerInteractionTasksResponse_CustomerInteractionTaskDto": {
        "required": [
          "ID",
          "UserTaskID",
          "Priority",
          "CustomerID"
        ],
        "type": "object",
        "properties": {
          "Customer": {
            "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.CustomerInteractionUserDto"
          },
          "CustomerID": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "Priority": {
            "$ref": "#/components/schemas/EVA.Core.CustomerInteractions.CustomerInteractionTaskPriorities"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.CustomerInteractionTaskTypeDto"
          },
          "UserTask": {
            "$ref": "#/components/schemas/EVA.Core.Services.CustomerInteractionTasks.CustomerInteractionUserTaskDto"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CustomerInteractionTasks.StartCustomerInteractionTask": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CustomerInteractionTasks.StartCustomerInteractionTaskResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "WorkSet": {
            "$ref": "#/components/schemas/EVA.Core.CustomerInteractions.CustomerInteractionWorkSet"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CustomerInteractionTasks.UpdateCustomerInteractionTaskType": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "FollowUpTypeID": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CustomerReturnLine": {
        "required": [
          "OrderLineID",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          },
          "RefundCorrectionReasonID": {
            "type": "integer",
            "description": "When not the whole amount is refunded, a reason for this correction can be set. This will only have an affect if `UnitAmountToRefund` is lower than the total amount of this return line."
          },
          "Remark": {
            "type": "string"
          },
          "ReturnReasonID": {
            "type": "integer"
          },
          "UnitAmountToRefund": {
            "type": "number",
            "description": "When a ReturnWithoutProducts is done, but not the full amount should be refunded, a different amount can be provided - cannot exceed the worth of the returned products"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CycleCounts.GetCycleCountSettings": {
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CycleCounts.GetCycleCountSettingsResponse": {
        "required": [
          "CycleCountDays",
          "MaxCycleCountsPerShopPerDay",
          "GenerateCycleCountAfterNASC",
          "PastDueProductsOnly",
          "MaxCycleCountsPerShop",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "CycleCountDays": {
            "$ref": "#/components/schemas/EVA.Core.DaysOfWeek"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "GenerateCycleCountAfterNASC": {
            "type": "boolean"
          },
          "MaxCycleCountsPerShop": {
            "type": "integer"
          },
          "MaxCycleCountsPerShopPerDay": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "PastDueProductsOnly": {
            "type": "boolean"
          },
          "StockLabels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.CycleCounts.SetCycleCountSettings": {
        "type": "object",
        "properties": {
          "CycleCountDays": {
            "$ref": "#/components/schemas/EVA.Core.DaysOfWeek"
          },
          "GenerateCycleCountAfterNASC": {
            "type": "boolean"
          },
          "MaxCycleCountsPerShop": {
            "type": "integer"
          },
          "MaxCycleCountsPerShopPerDay": {
            "type": "integer"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "PastDueProductsOnly": {
            "type": "boolean"
          },
          "StockLabels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.DeactivateAllUserTasks": {
        "required": [
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.DeactivateUserTask": {
        "type": "object",
        "properties": {
          "ReasonID": {
            "type": "integer",
            "description": "A reason, if any, why the tasks were disabled. Optional."
          },
          "UserTaskIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.DeleteUserTaskNotCompletedReason": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.DeleteUserTaskPriority": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.DeleteUserTaskTypeOrganizationUnitSet": {
        "required": [
          "OrganizationUnitSetID",
          "UserTaskTypeID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "UserTaskTypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.DeviceStatusSummary": {
        "required": [
          "ID",
          "Status"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "ModificationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Name": {
            "type": "string"
          },
          "Status": {
            "type": "integer"
          },
          "Type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.AddLabelToFullStockCount": {
        "required": [
          "FullStockCountID",
          "StockLabelID"
        ],
        "type": "object",
        "properties": {
          "FullStockCountID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "StockLabelID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.AddLabelToFullStockCountResponse": {
        "required": [
          "ID",
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.AddProductToFullStockCountLabel": {
        "required": [
          "ProductID",
          "ID",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.AddProductToFullStockCountLabelResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.CancelFullStockCount": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "Reason": {
            "type": "string",
            "description": "A reason, if any, why the tasks were disabled. Optional."
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.CancelFullStockCountLabel": {
        "type": "object",
        "properties": {
          "FullStockCountLabelID": {
            "type": "integer"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.CompleteFullStockCount": {
        "required": [
          "UserTaskID",
          "DismissDeviationsAsStockMutations"
        ],
        "type": "object",
        "properties": {
          "DismissDeviationsAsStockMutations": {
            "type": "boolean",
            "description": "When set to true, deviations will NOT be processed as stock mutations."
          },
          "ProductsToRecount": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Products to recount after completion of given full stock count."
          },
          "RecountAllDeviations": {
            "type": "boolean",
            "description": "Recount all products in the full stock count that have a deviation."
          },
          "RecountAllProducts": {
            "type": "boolean",
            "description": "Recount all products in the full stock count."
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.CompleteFullStockCountLabel": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "Products": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.CreateFullStockCount": {
        "required": [
          "IsExternal",
          "ReturnCurrentStock"
        ],
        "type": "object",
        "properties": {
          "AllowStockMutationsDuringCount": {
            "type": "boolean",
            "description": "When this value is set to true, EVA will allow for stockmutations to be done during the fullstockcount.\nWARNING: setting this value to true will make the outcome of the fullstockcount unreliable, because quantities on the full stock count label products can be changed before or after a count has been done."
          },
          "CreateFullStockCountLabelsForShelves": {
            "type": "boolean",
            "description": "When supplied, it will automatically call `AddLabelToFullStockCount` for each Shelf defined in your replenishment configuration. Ignored when IsExternal is set to true."
          },
          "InitialFullStockCountLabels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.CreateFullStockCount_InitialFullStockCountLabel"
            },
            "description": "When supplied, it will automatically call `AddLabelToFullStockCount` for each InitialLabel. Ignored when IsExternal or CreateFullStockCountLabelsForShelves is set to true."
          },
          "IsExternal": {
            "type": "boolean",
            "description": "Indicates if the full stock count is done by an external party.\nWhen false, the full stock count will be created and all basic store functionalities will be blocked once started.\n\nWhen true, the full stock count will be created with a snapshot from the current stock. To set the result of the external full stock count, the 'UploadExternalFullStockCount' can be called.\nBasic store functionalities will remaining in working order. Deviations will be calculated based on stock mutations.\nThe UserTask will be started automatically."
          },
          "RecountInterval": {
            "type": "integer",
            "description": "When supplied, it will automatically create a validation recount based on the given recount interval. Ignored when IsExternal is set to true."
          },
          "ReturnCurrentStock": {
            "type": "boolean",
            "description": "When set to true, the service will return the current stock information."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.CreateFullStockCount_InitialFullStockCountLabel": {
        "required": [
          "StockLabelID"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "StockLabelID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.CreateFullStockCountResponse": {
        "required": [
          "ID",
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "CurrentStock": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.CreateFullStockCountResponse_ProductStock"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.CreateFullStockCountResponse_ProductStock": {
        "required": [
          "ProductID",
          "QuantityOnHand",
          "StockLabelID"
        ],
        "type": "object",
        "properties": {
          "ProductID": {
            "type": "integer"
          },
          "QuantityOnHand": {
            "type": "integer"
          },
          "StockLabelID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.DownloadFullStockCountLabelUploadTemplate": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.DownloadFullStockCountSummaryExcel": {
        "required": [
          "ID",
          "OnlyShowDeviations"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "IncludedProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "OnlyShowDeviations": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.DownloadFullStockCountSummaryPDF": {
        "required": [
          "ID",
          "OnlyShowDeviations"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "IncludedProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "OnlyShowDeviations": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.GetFullStockCount": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.GetFullStockCountResponse": {
        "required": [
          "Type",
          "AllowStockMutationsDuringCount",
          "IsActive",
          "IsExternal",
          "ID",
          "UserTaskID",
          "IsReady",
          "CreationTime",
          "Progress",
          "IsCompleted",
          "RecountInterval"
        ],
        "type": "object",
        "properties": {
          "AllowStockMutationsDuringCount": {
            "type": "boolean"
          },
          "CompletionTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByFullName": {
            "type": "string"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "IsActive": {
            "type": "boolean"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "IsExternal": {
            "type": "boolean"
          },
          "IsReady": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Progress": {
            "type": "number"
          },
          "RecountInterval": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.FullStockCountType"
          },
          "UserFullName": {
            "type": "string"
          },
          "UserID": {
            "type": "integer"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.ListFullStockCountDto": {
        "required": [
          "Type",
          "CreatedByID",
          "AllowStockMutationsDuringCount",
          "IsActive",
          "IsExternal",
          "ID",
          "UserTaskID",
          "CreationTime",
          "IsCompleted",
          "RecountInterval",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "AllowStockMutationsDuringCount": {
            "type": "boolean"
          },
          "CreatedByFullName": {
            "type": "string"
          },
          "CreatedByID": {
            "type": "integer"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer"
          },
          "IsActive": {
            "type": "boolean"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "IsExternal": {
            "type": "boolean"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "OrganizationUnitName": {
            "type": "string"
          },
          "RecountInterval": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.FullStockCountType"
          },
          "UserFullName": {
            "type": "string"
          },
          "UserID": {
            "type": "integer"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelDto": {
        "required": [
          "ID",
          "UserTaskID",
          "IsRecount",
          "State",
          "FullStockCountID",
          "StockLabelID"
        ],
        "type": "object",
        "properties": {
          "FullStockCountID": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "IsRecount": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          },
          "State": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.FullStockCountLabelState"
          },
          "StockLabelID": {
            "type": "integer"
          },
          "StockLabelName": {
            "type": "string"
          },
          "UserFullName": {
            "type": "string"
          },
          "UserID": {
            "type": "integer"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelProductDto": {
        "required": [
          "ProductID",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "CurrentCountUserID": {
            "type": "integer"
          },
          "PreviousCountUserID": {
            "type": "integer"
          },
          "PreviousQuantity": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "Properties": {
            "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
          },
          "Quantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelProducts": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "IncludedProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.UserTasks.FullStockCountUserTask.ListFullStockCountLabelProductsFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelProductsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelProductDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelSummary": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "IncludedFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.UserTasks.FullStockCountUserTask.ListFullStockCountLabelSummaryFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelSummaryResponse": {
        "required": [
          "AllowStockMutationsDuringCount",
          "FullStockCountIsCompleted",
          "FullStockCountIsExternal",
          "FullStockCountID"
        ],
        "type": "object",
        "properties": {
          "AllowStockMutationsDuringCount": {
            "type": "boolean"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "FullStockCountID": {
            "type": "integer"
          },
          "FullStockCountIsCompleted": {
            "type": "boolean"
          },
          "FullStockCountIsExternal": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelSummaryResponse_Label"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelSummaryResponse_CompletionUser": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelSummaryResponse_Label": {
        "required": [
          "State",
          "IsCompleted",
          "FullStockLabelID"
        ],
        "type": "object",
        "properties": {
          "CompletedBy": {
            "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelSummaryResponse_CompletionUser"
          },
          "FullStockLabelID": {
            "type": "integer"
          },
          "FullStockLabelName": {
            "type": "string"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "Products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelSummaryResponse_Product"
            }
          },
          "State": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.FullStockCountLabelState"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelSummaryResponse_Product": {
        "required": [
          "ProductID",
          "CountQuantity"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "CountQuantity": {
            "type": "integer"
          },
          "CustomID": {
            "type": "string"
          },
          "ProductID": {
            "type": "integer"
          },
          "Properties": {
            "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.ListFullStockCountLabels": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.UserTasks.FullStockCountUserTask.ListFullStockCountLabelsFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Services.FullStockCountServices.ListFullStockCountLabelDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.ListFullStockCountResult": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "IncludedProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.UserTasks.FullStockCountUserTask.ListFullStockCountResultFilter"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.ListFullStockCountResultResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "FullStockCountCompletionTime": {
            "type": "string",
            "format": "date-time"
          },
          "FullStockCountStartTime": {
            "type": "string",
            "format": "date-time"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.UserTasks.FullStockCountUserTask.FullStockCountResult"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.ListFullStockCountSummary": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "IncludedProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.UserTasks.FullStockCountUserTask.ListFullStockCountSummaryFilter"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.ListFullStockCounts": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.UserTasks.FullStockCountUserTask.ListFullStockCountsFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.ListFullStockCountsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Services.FullStockCountServices.ListFullStockCountDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.PrintFullStockCountLabels": {
        "type": "object",
        "properties": {
          "FullStockCountID": {
            "type": "integer",
            "description": "Prints all labels for this count - required if FullStockCountLabelID is empty"
          },
          "FullStockCountLabelID": {
            "type": "integer",
            "description": "Prints just this label - required if FullStockCountID is empty"
          },
          "StationID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.RecountFullStockCountLabel": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.RecountFullStockCountLabelResponse": {
        "required": [
          "ID",
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.RecountFullStockCountProduct": {
        "required": [
          "FullStockCountID"
        ],
        "type": "object",
        "properties": {
          "FullStockCountID": {
            "type": "integer"
          },
          "Recounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.RecountFullStockCountProduct_Recount"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.RecountFullStockCountProduct_Recount": {
        "required": [
          "ProductID",
          "StockLabelID"
        ],
        "type": "object",
        "properties": {
          "ProductID": {
            "type": "integer"
          },
          "StockLabelID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.StartFullStockCount": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.StartFullStockCountLabel": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.StartFullStockCountLabelResponse": {
        "required": [
          "ID",
          "UserTaskID",
          "IsRecount",
          "FullStockCountID",
          "StockLabelID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "FullStockCountID": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "IsRecount": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Name": {
            "type": "string"
          },
          "PredefinedProducts": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "StockLabelID": {
            "type": "integer"
          },
          "StockLabelName": {
            "type": "string"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.StartFullStockCountResponse": {
        "required": [
          "Type",
          "ID",
          "UserTaskID",
          "RecountInterval"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "RecountInterval": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.FullStockCountType"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.UploadFullStockCountLabels": {
        "required": [
          "Data",
          "FullStockCountID"
        ],
        "type": "object",
        "properties": {
          "Data": {
            "type": "string"
          },
          "FullStockCountID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.UploadFullStockCountLabelsResponse": {
        "type": "object",
        "properties": {
          "Added": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.UploadFullStockCountLabelsResponse_AddedLabel"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Rejected": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.UploadFullStockCountLabelsResponse_RejectedLabel"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.UploadFullStockCountLabelsResponse_AddedLabel": {
        "required": [
          "ID",
          "StockLabelID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "StockLabelID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.UploadFullStockCountLabelsResponse_RejectedLabel": {
        "required": [
          "Reason"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Reason": {
            "$ref": "#/components/schemas/EVA.Core.Services.FullStockCountServices.UploadFullStockCountLabelsResponse_RejectionReason"
          },
          "StockLabel": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.FullStockCountServices.UploadFullStockCountLabelsResponse_RejectionReason": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Services.GetCustomerReturn": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer",
            "description": "ID of the returned order"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.GetCustomerReturnResponse": {
        "required": [
          "ReturnWithoutProducts"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OriginalOrderID": {
            "type": "integer"
          },
          "OriginalOrderTimestamp": {
            "type": "string",
            "format": "date-time"
          },
          "ReferenceNumber": {
            "type": "string"
          },
          "ReturnWithoutProducts": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.GetOrdersForReturnOrder": {
        "required": [
          "ReturnOrderID"
        ],
        "type": "object",
        "properties": {
          "ReturnOrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.GetOrdersForReturnOrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.OriginalOrder"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.GetReturnOrdersForOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.GetReturnOrdersForOrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ReturnOrder"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.GetUserTaskCounts": {
        "required": [
          "IncludeAllTasks",
          "ExcludeChildOrganizations",
          "IncludeAssignedTasks"
        ],
        "type": "object",
        "properties": {
          "ExcludeChildOrganizations": {
            "type": "boolean",
            "description": "When specified, will include only tasks from the specified organization unit, excluding child organizations"
          },
          "IncludeAllTasks": {
            "type": "boolean",
            "description": "When specified, will include all tasks, regardless if the user can execute them"
          },
          "IncludeAssignedTasks": {
            "type": "boolean",
            "description": "When specified, will include all assigned tasks in the counts (regardless of whom it is assigned to)"
          },
          "OrganizationUnitID": {
            "type": "integer",
            "description": "Defaults to the current organization when omitted - includes child organizations"
          },
          "UserTaskTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Optionally (and additionally) filter on specified types"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.GetUserTaskCountsResponse": {
        "required": [
          "NumberOfTasks"
        ],
        "type": "object",
        "properties": {
          "DetailedNumberOfTasks": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.Services.GetUserTaskCountsResponse_UserTaskCount"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "NumberOfTasks": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.GetUserTaskCountsResponse_UserTaskCount": {
        "required": [
          "Count"
        ],
        "type": "object",
        "properties": {
          "Count": {
            "type": "integer"
          },
          "SubTypeCounts": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.GetUserTaskDetails": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.GetUserTaskDetailsResponse": {
        "type": "object",
        "properties": {
          "Details": {
            "$ref": "#/components/schemas/EVA.Core.UserTasks.Dto.UserTaskDto"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.GetUserTaskNotCompletedReasons": {
        "type": "object",
        "properties": {
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.GetUserTaskNotCompletedReasonsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Reasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.GetUserTaskNotCompletedReasonsResponse_Reason"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.GetUserTaskNotCompletedReasonsResponse_Reason": {
        "required": [
          "IsSystem",
          "ReasonID"
        ],
        "type": "object",
        "properties": {
          "IsSystem": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          },
          "ReasonID": {
            "type": "integer"
          },
          "Usages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ReasonUsageWithDescription"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.GetUserTaskPriorities": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Services.GetUserTaskPrioritiesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.UserTasks.Dto.UserTaskPriorityDto"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.GetUserTaskTypeOrganizationUnitSet": {
        "required": [
          "OrganizationUnitSetID",
          "UserTaskTypeID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "UserTaskTypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.GetUserTaskTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Services.GetUserTaskTypesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.UserTasks.Dto.UserTaskTypeDto"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ImAlive": {
        "type": "object",
        "properties": {
          "MacAddress": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.InitialCycleCountDto": {
        "required": [
          "ID",
          "Status",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.InitialCycleCountStatus"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.InitialCycleCountLabelDto": {
        "required": [
          "CreatedByID",
          "Number",
          "ID",
          "CreationTime",
          "Status"
        ],
        "type": "object",
        "properties": {
          "CountedByFullName": {
            "type": "string"
          },
          "CreatedByID": {
            "type": "integer"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer"
          },
          "InitialCycleCount": {
            "$ref": "#/components/schemas/EVA.Core.Services.InitialCycleCountDto"
          },
          "ItemEndCount": {
            "type": "integer"
          },
          "ItemPreCount": {
            "type": "integer"
          },
          "Number": {
            "type": "integer"
          },
          "PreCountedByFullName": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.InitialCycleCountLabelStatus"
          },
          "StockLabel": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.InitialCycleCounts.CanProcessInitialCycleCount": {
        "required": [
          "InitialCycleCountID"
        ],
        "type": "object",
        "properties": {
          "InitialCycleCountID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.InitialCycleCounts.CanProcessInitialCycleCountResponse": {
        "required": [
          "CanProcess"
        ],
        "type": "object",
        "properties": {
          "CanProcess": {
            "type": "boolean"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.InitialCycleCounts.CountProductForInitialCycleCount": {
        "required": [
          "ProductID",
          "Quantity",
          "LabelID"
        ],
        "type": "object",
        "properties": {
          "LabelID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.InitialCycleCounts.CreateInitialCycleCount": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Services.InitialCycleCounts.CreateInitialCycleCountResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.Services.InitialCycleCountDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.InitialCycleCounts.DeleteInitialCycleCountResult": {
        "required": [
          "StockLabel",
          "ProductID",
          "LabelID"
        ],
        "type": "object",
        "properties": {
          "LabelID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "StockLabel": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.InitialCycleCounts.GetCurrentInitialCycleCount": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Services.InitialCycleCounts.GetCurrentInitialCycleCountResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.Services.InitialCycleCountDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.InitialCycleCounts.GetInitialCycleCountLabel": {
        "required": [
          "LabelID"
        ],
        "type": "object",
        "properties": {
          "LabelID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.InitialCycleCounts.GetInitialCycleCountLabelResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Label": {
            "$ref": "#/components/schemas/EVA.Core.Services.InitialCycleCountLabelDto"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.InitialCycleCounts.ListInitialCycleCountLabels": {
        "required": [
          "InitialCycleCountID",
          "Start",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "InitialCycleCountID": {
            "type": "integer"
          },
          "Limit": {
            "type": "integer"
          },
          "Start": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.InitialCycleCounts.ListInitialCycleCountLabelsResponse": {
        "required": [
          "Total"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.InitialCycleCountLabelDto"
            }
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.InitialCycleCounts.ListInitialCycleCountResults": {
        "required": [
          "Start",
          "ShowAll",
          "Limit"
        ],
        "type": "object",
        "properties": {
          "CustomItemNumber": {
            "type": "string"
          },
          "LabelID": {
            "type": "integer"
          },
          "Limit": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "ShowAll": {
            "type": "boolean"
          },
          "Start": {
            "type": "integer"
          },
          "StockLabel": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.InitialCycleCounts.ListInitialCycleCountResultsResponse": {
        "required": [
          "Total"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.StockWithInitialCycleCountResultDto"
            }
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.InitialCycleCounts.MissingProductForInitialCycleCount": {
        "required": [
          "Quantity",
          "LabelID"
        ],
        "type": "object",
        "properties": {
          "Barcode": {
            "type": "string"
          },
          "LabelID": {
            "type": "integer"
          },
          "Photo": {
            "type": "string"
          },
          "PhotoMimeType": {
            "type": "string"
          },
          "Quantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.InitialCycleCounts.PreCountInitialCycleCountLabel": {
        "required": [
          "Quantity",
          "LabelID",
          "StockLabelID"
        ],
        "type": "object",
        "properties": {
          "LabelID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          },
          "StockLabelID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.InitialCycleCounts.ProcessInitialCycleCountResults": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Services.InitialCycleCounts.ProduceInitialCycleCountLabels": {
        "required": [
          "Destination",
          "Count",
          "ReprintLabels",
          "AsPDF"
        ],
        "type": "object",
        "properties": {
          "AsPDF": {
            "type": "boolean"
          },
          "Count": {
            "type": "integer"
          },
          "Destination": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.MessageTemplateDestinations"
          },
          "ReprintLabels": {
            "type": "boolean",
            "description": "If this is set all the labels that've currently been created will be re-generated, but no new labels will be created in the process."
          },
          "StationID": {
            "type": "integer",
            "description": "The ID of the station, which will be used to determine what printer to use to print the bar codes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.InitialCycleCounts.ValidatePreCount": {
        "required": [
          "LabelID"
        ],
        "type": "object",
        "properties": {
          "ConfirmedQuantity": {
            "type": "integer"
          },
          "LabelID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.InitialCycleCounts.ValidatePreCountResponse": {
        "required": [
          "Result"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.Services.InitialCycleCounts.ValidatePreCountResults"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.InitialCycleCounts.ValidatePreCountResults": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Services.ListAvailableUserTasks": {
        "type": "object",
        "properties": {
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            },
            "description": "Filter for a specific UserTaskType.Name using a property name and a list of values."
          },
          "IsStarted": {
            "type": "boolean",
            "description": "Return only Started/Open UserTasks"
          },
          "Labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Return only UserTasks with one of the specified labels"
          },
          "UserID": {
            "type": "integer",
            "description": "Return only UserTasks attached to this UserID"
          },
          "UserTaskSubTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Return only UserTasks with one of the specified subtypes"
          },
          "UserTaskTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Return only UserTasks of one of the specified types"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ListAvailableUserTasksResponse": {
        "type": "object",
        "properties": {
          "Aggregations": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EVA.Core.UserTasks.UserTaskDataAggregation"
                }
              }
            }
          },
          "AvailableTasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.AvailableUserTaskDto"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Labels": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ListOrganizationUnitWithDeviceDetails": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ListOrganizationUnitWithDeviceDetailsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Services.OrganizationUnitDeviceStatus"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ListOrganizationUnitsWithDeviceStatus": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Services.ListOrganizationUnitsWithDeviceStatusResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrganizationUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.OrganizationUnitDeviceStatus"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ListTasksThatBlockPeriodClosing": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Services.ListTasksThatBlockPeriodClosingResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.UserTasks.Dto.UserTaskDto"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ListUserTaskTypeOrganizationUnitSets": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.UserTasks.ListUserTaskTypeOrganizationUnitSetsFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ListUserTaskTypeOrganizationUnitSetsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.UserTasks.Dto.UserTaskTypeOrganizationUnitSetDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ListUserTasks": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.UserTasks.ListUserTasksFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ListUserTasksResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Services.ListUserTasksResponse_UserTask"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ListUserTasksResponse_OrganizationUnit": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ListUserTasksResponse_User": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "FullName": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ListUserTasksResponse_UserTask": {
        "required": [
          "IsActive",
          "ID",
          "Priority",
          "IsCompleted"
        ],
        "type": "object",
        "properties": {
          "CompletionTime": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "IsActive": {
            "type": "boolean"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "OrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Services.ListUserTasksResponse_OrganizationUnit"
          },
          "Priority": {
            "type": "integer"
          },
          "StartTime": {
            "type": "string",
            "format": "date-time"
          },
          "User": {
            "$ref": "#/components/schemas/EVA.Core.Services.ListUserTasksResponse_User"
          },
          "UserTaskSubType": {
            "$ref": "#/components/schemas/EVA.Core.Services.ListUserTasksResponse_UserTaskSubType"
          },
          "UserTaskType": {
            "$ref": "#/components/schemas/EVA.Core.Services.ListUserTasksResponse_UserTaskType"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ListUserTasksResponse_UserTaskSubType": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ListUserTasksResponse_UserTaskType": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.OrderInterventionTasks.CompleteOrderInterventionTask": {
        "required": [
          "WorkSet"
        ],
        "type": "object",
        "properties": {
          "WorkSet": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderInterventionWorkSet"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.OrderInterventionTasks.ListOrderInterventionTasks": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Repositories.ListOrderInterventionTasksFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.OrderInterventionTasks.ListOrderInterventionTasksResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Services.OrderInterventionTasks.OrderInterventionTaskDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.OrderInterventionTasks.OrderInterventionTaskDto": {
        "required": [
          "OrderID",
          "ID",
          "UserTaskID",
          "CreationTime"
        ],
        "type": "object",
        "properties": {
          "AssignedToUser": {
            "type": "string"
          },
          "Comment": {
            "type": "string"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          },
          "Reason": {
            "type": "string"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.OrderInterventionTasks.StartOrderInterventionTask": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.OrderInterventionTasks.StartOrderInterventionTaskResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "WorkSet": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderInterventionWorkSet"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.OrganizationUnitDeviceStatus": {
        "required": [
          "Type",
          "ID",
          "Status",
          "ApplicationID"
        ],
        "type": "object",
        "properties": {
          "ApplicationID": {
            "type": "integer"
          },
          "Devices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.DeviceStatusSummary"
            }
          },
          "ID": {
            "type": "integer"
          },
          "Latitude": {
            "type": "number"
          },
          "Longitude": {
            "type": "number"
          },
          "Name": {
            "type": "string"
          },
          "Status": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnitTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.OriginalOrder": {
        "required": [
          "IsShipped",
          "ID",
          "IsCompleted",
          "IsPaid"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "BackendSystemID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "IsPaid": {
            "type": "boolean"
          },
          "IsShipped": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ProductReturnLine": {
        "required": [
          "ProductID",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "ProductID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer",
            "description": "A positive number that indicates the quantity of products returned."
          },
          "Remark": {
            "type": "string"
          },
          "ReturnReasonID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.Products.PrintSecondChanceProductPriceLabel": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "StationID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ReasonUsage": {
        "type": "object",
        "properties": {
          "UserTaskSubTypeID": {
            "type": "integer"
          },
          "UserTaskTypeID": {
            "type": "integer"
          },
          "organizationUnitSetID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ReasonUsageWithDescription": {
        "type": "object",
        "properties": {
          "UserTaskSubType": {
            "type": "string"
          },
          "UserTaskSubTypeID": {
            "type": "integer"
          },
          "UserTaskType": {
            "type": "string"
          },
          "UserTaskTypeID": {
            "type": "integer"
          },
          "organizationUnitSetID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ReceiveReturnOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ReceiveReturnOrder_ReturnedLine"
            }
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ReceiveReturnOrder_ReturnedLine": {
        "required": [
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          },
          "Remark": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ReceiveReturnOrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ReceiveShipment.StartReceiveShipment": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ReceiveShipment.StartReceiveShipmentResponse": {
        "required": [
          "AllowSurplus",
          "IsCompleted",
          "ReceiveMethod"
        ],
        "type": "object",
        "properties": {
          "AllowSurplus": {
            "type": "boolean"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ReceiveMethod": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ShipmentReceiveMethods"
          },
          "WorkSet": {
            "$ref": "#/components/schemas/EVA.Core.Shipments.ReceiveShipmentWorkSet"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.RefundOrder": {
        "required": [
          "OrderID",
          "WaitForCompletion"
        ],
        "type": "object",
        "properties": {
          "AmountToRefund": {
            "type": "number"
          },
          "OrderID": {
            "type": "integer"
          },
          "Reason": {
            "type": "string"
          },
          "WaitForCompletion": {
            "type": "boolean",
            "description": "Handle all the refund in process, this can take a long time if multiple transactions are involved."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.RefundOrderResponse": {
        "type": "object",
        "properties": {
          "AmountAvailableToRefund": {
            "type": "number",
            "description": "Only set when WaitForCompletion is true"
          },
          "CreatedTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Payments.Dto.PaymentTransactionDto"
            },
            "description": "Only set when WaitForCompletion is true"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ReservationCleanup.CompleteReservationCleanup": {
        "required": [
          "Task",
          "CreateNewTaskForRemainingLines",
          "NoConfirmation"
        ],
        "type": "object",
        "properties": {
          "CreateNewTaskForRemainingLines": {
            "type": "boolean",
            "description": "Can be set to true so that lines missing from the workset are copied to a new cleanup task, so these can be done at a later point in time. This is\nuseful when the employee is handling a large order and wants to move a single batch first."
          },
          "NoConfirmation": {
            "type": "boolean",
            "description": "Should be set to true when the user did not confirm the order or user task (by means of a barcode scan or something). When set to true, the user will\nbe required to have (or be elevated for) the functionality `CompleteReservationCleanupWithoutConfirmation`."
          },
          "Task": {
            "$ref": "#/components/schemas/EVA.Core.Services.ReservationCleanup.CompleteReservationCleanup_ReservationCleanupTask"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ReservationCleanup.CompleteReservationCleanup_NothingToReturnAction": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Services.ReservationCleanup.CompleteReservationCleanup_ReservationCleanupTask": {
        "required": [
          "Lines",
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ReservationCleanup.CompleteReservationCleanup_ReservationCleanupTaskLine"
            },
            "description": "Every line on the cleanup task must be represented in this collection and each line must have an indication what needs\nto happen to it in the context of the cleanup. The options are:\n\n- The product was returned, in which case QuantityReturned must have a value.\n- There was nothing there to return, in which case NothingToReturn must be set to true. A cyclecount will be generated for the product to make sure.\n- The reservation must be extended, in which case ReservationExpirationOverride must have a value."
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ReservationCleanup.CompleteReservationCleanup_ReservationCleanupTaskLine": {
        "required": [
          "QuantityToReturn",
          "NothingToReturnAction",
          "OrderLine",
          "NothingToReturn",
          "QuantityReturned"
        ],
        "type": "object",
        "properties": {
          "NothingToReturn": {
            "type": "boolean"
          },
          "NothingToReturnAction": {
            "$ref": "#/components/schemas/EVA.Core.Services.ReservationCleanup.CompleteReservationCleanup_NothingToReturnAction"
          },
          "OrderLine": {
            "$ref": "#/components/schemas/EVA.Core.Services.ReservationCleanup.CompleteReservationCleanup_ReservationCleanupTaskOrderLine"
          },
          "QuantityReturned": {
            "type": "integer"
          },
          "QuantityToReturn": {
            "type": "integer"
          },
          "ReservationExpirationOverride": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ReservationCleanup.CompleteReservationCleanup_ReservationCleanupTaskOrderLine": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ReservationCleanup.StartReservationCleanup": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ReservationCleanup.StartReservationCleanupResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Task": {
            "$ref": "#/components/schemas/EVA.Core.Services.ReservationCleanupWorkSet"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ReservationCleanupWorkSet": {
        "required": [
          "Type",
          "ReservationCleanupTaskID",
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ReservationCleanupWorkSetOrderLine"
            }
          },
          "Order": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrderDto"
          },
          "ReservationCleanupTaskID": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ReservationCleanupTaskTypes"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ReservationCleanupWorkSetOrderLine": {
        "required": [
          "Type",
          "QuantityToReturn",
          "NothingToReturn",
          "QuantityReturned"
        ],
        "type": "object",
        "properties": {
          "NothingToReturn": {
            "type": "boolean"
          },
          "OrderLine": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrderLineDto"
          },
          "QuantityReturned": {
            "type": "integer"
          },
          "QuantityToReturn": {
            "type": "integer"
          },
          "ReservationExpirationOverride": {
            "type": "string",
            "format": "date-time"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ReservationCleanupTaskLineTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ReturnLineDto": {
        "required": [
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          },
          "Remark": {
            "type": "string"
          },
          "ReturnReasonID": {
            "type": "integer"
          },
          "ReturnStockLabel": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ReturnOrder": {
        "required": [
          "TotalAmountInTax",
          "IsShipped",
          "ID",
          "ForeignPaidAmount",
          "CreationTime",
          "PaidAmount",
          "IsCompleted",
          "IsPaid",
          "IsReturnWithoutProducts"
        ],
        "type": "object",
        "properties": {
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "CurrencyID": {
            "type": "string"
          },
          "ForeignPaidAmount": {
            "type": "number"
          },
          "ID": {
            "type": "integer"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "IsPaid": {
            "type": "boolean"
          },
          "IsReturnWithoutProducts": {
            "type": "boolean"
          },
          "IsShipped": {
            "type": "boolean"
          },
          "PaidAmount": {
            "type": "number"
          },
          "TotalAmountInTax": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ReturnOrderLines": {
        "required": [
          "Lines",
          "CreateInOriginalOrganizationUnit"
        ],
        "type": "object",
        "properties": {
          "CreateInOriginalOrganizationUnit": {
            "type": "boolean",
            "description": "Attach the order to the same OrganizationUnit as the returned order"
          },
          "LineActionType": {
            "$ref": "#/components/schemas/EVA.Core.Enumerations.LineActionTypes"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ReturnLineDto"
            }
          },
          "OrderID": {
            "type": "integer"
          },
          "StockOrganizationUnitID": {
            "type": "integer",
            "description": "When the stock should be returned to a specific OrganizationUnit.\n\nThe available OrganizationUnits are returned from the GetReturnableStatusForOrder.StockOrganizationUnits"
          },
          "TargetOrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.SecondChanceProductRegistrationUserTask.CancelSecondChanceProductRegistration": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "Reason": {
            "type": "string",
            "description": "A reason, if any, why the tasks were disabled. Optional."
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.SecondChanceProductRegistrationUserTask.CompleteSecondChanceProductRegistration": {
        "required": [
          "UserTaskID",
          "NotReturnable",
          "ProductName",
          "Description",
          "Price"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Images": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "NotReturnable": {
            "type": "boolean"
          },
          "Price": {
            "type": "number"
          },
          "ProductName": {
            "type": "string"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.SecondChanceProductRegistrationUserTask.CompleteSecondChanceProductRegistrationResponse": {
        "required": [
          "ProductID"
        ],
        "type": "object",
        "properties": {
          "Barcode": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.SecondChanceProductRegistrationUserTask.StartSecondChanceProductRegistration": {
        "required": [
          "ProductID",
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "ProductID": {
            "type": "integer"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.SecondChanceProductRegistrationUserTask.StartSecondChanceProductRegistrationResponse": {
        "required": [
          "ProductID",
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ProductID": {
            "type": "integer"
          },
          "ProductName": {
            "type": "string"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.SendReturnMail": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.SetReturnOrderRefundCorrection": {
        "required": [
          "OrderID",
          "NewOpenAmount"
        ],
        "type": "object",
        "properties": {
          "NewOpenAmount": {
            "type": "number"
          },
          "OrderID": {
            "type": "integer"
          },
          "Reason": {
            "type": "string"
          },
          "RefundCorrectionReasonID": {
            "type": "integer",
            "description": "When not the whole amount is refunded, a reason for this correction can be set."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.StockReplenishment.CompleteStockReplenishment": {
        "required": [
          "UserTaskIDs"
        ],
        "type": "object",
        "properties": {
          "UserTaskIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.StockReplenishment.CreateStockReplenishmentTask": {
        "required": [
          "Type",
          "ProductID",
          "Quantity",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.StockReplenishmentType"
          },
          "Zone": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.StockReplenishment.CreateStockReplenishmentTasks": {
        "required": [
          "Type",
          "Products",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          },
          "Products": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.StockReplenishmentType"
          },
          "Zone": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.StockReplenishment.GetStockReplenishmentTaskData": {
        "required": [
          "ProductID",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.StockReplenishment.GetStockReplenishmentTaskDataResponse": {
        "required": [
          "Disabled",
          "AutoGenerateQuantity"
        ],
        "type": "object",
        "properties": {
          "AutoGenerateQuantity": {
            "type": "integer"
          },
          "Disabled": {
            "type": "boolean"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.StockReplenishment.GetStockReplenishmentTaskZones": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Services.StockReplenishment.GetStockReplenishmentTaskZonesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Zones": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.StockReplenishment.ListStockReplenishmentTaskData": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.UserTasks.StockReplenishmentUserTask.ListStockReplenishmentTaskDataFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.StockReplenishment.ListStockReplenishmentTaskDataResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Services.StockReplenishment.StockReplenishmentTaskDataDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.StockReplenishment.StartStockReplenishment": {
        "type": "object",
        "properties": {
          "UserTaskIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.StockReplenishment.StartStockReplenishmentResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "WorkSet": {
            "$ref": "#/components/schemas/EVA.Core.UserTasktypes.StockReplenishment.StockReplenishmentWorkSet"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.StockReplenishment.StockReplenishmentTaskDataDto": {
        "required": [
          "ProductID",
          "Disabled",
          "AutoGenerateQuantity",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "AutoGenerateQuantity": {
            "type": "integer"
          },
          "Disabled": {
            "type": "boolean"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.StockReplenishment.UpdateStockReplenishmentTaskData": {
        "required": [
          "ProductID",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "AutoGenerateQuantity": {
            "type": "object"
          },
          "Disabled": {
            "type": "object"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.StockReservation.CompleteStockReservationTask": {
        "required": [
          "Task"
        ],
        "type": "object",
        "properties": {
          "PrintReceipt": {
            "type": "boolean",
            "description": "Should we print a receipt? Default true"
          },
          "StationID": {
            "type": "integer",
            "description": "Station to print the receipt on"
          },
          "Task": {
            "$ref": "#/components/schemas/EVA.Core.Services.StockReservation.CompleteStockReservationTask_StockReservationTask"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.StockReservation.CompleteStockReservationTask_StockReservationTask": {
        "required": [
          "Lines",
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.StockReservation.CompleteStockReservationTask_StockReservationTaskLine"
            }
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.StockReservation.CompleteStockReservationTask_StockReservationTaskLine": {
        "required": [
          "OrderLineID",
          "ForceComplete"
        ],
        "type": "object",
        "properties": {
          "ForceComplete": {
            "type": "boolean"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "QuantityToCancel": {
            "type": "integer"
          },
          "QuantityToOrder": {
            "type": "integer"
          },
          "QuantityToReserve": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.StockReservation.GetStockReservationTask": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.StockReservation.GetStockReservationTaskResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.Services.StockReservationTaskDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.StockReservation.PrintStockReservationReceipt": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "StationID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.StockReservation.StartStockReservation2": {
        "required": [
          "UserTaskID",
          "Force"
        ],
        "type": "object",
        "properties": {
          "Force": {
            "type": "boolean",
            "description": "Force a restart of the task, even when it's already started by a different user."
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.StockReservation.StartStockReservationLine": {
        "required": [
          "TotalAmount",
          "OrderLineID",
          "ProductID",
          "ProductDisplayValue",
          "Quantity",
          "QuantityOnHand",
          "ProductUnitPrice"
        ],
        "type": "object",
        "properties": {
          "ChildLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.StockReservation.StartStockReservationLine"
            },
            "description": "The child lines for this line"
          },
          "GroupID": {
            "type": "string",
            "format": "uuid"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "ParentID": {
            "type": "integer"
          },
          "ProductBackendID": {
            "type": "string"
          },
          "ProductBundleLineID": {
            "type": "integer"
          },
          "ProductCustomID": {
            "type": "string"
          },
          "ProductDisplayValue": {
            "type": "string"
          },
          "ProductID": {
            "type": "integer"
          },
          "ProductPrimaryImage": {
            "type": "string"
          },
          "ProductUnitPrice": {
            "type": "number"
          },
          "ProductVariation": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Quantity": {
            "type": "integer"
          },
          "QuantityOnHand": {
            "type": "integer",
            "description": "Current stock of this product in the pickuporganizationunit"
          },
          "Requirements": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "TotalAmount": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.StockReservation.StartStockReservationResponse2": {
        "required": [
          "Lines",
          "OrderID",
          "ServiceLines",
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.StockReservation.StartStockReservationLine"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrderID": {
            "type": "integer"
          },
          "ServiceLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.StockReservation.StartStockReservationLine"
            }
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.StockReservationTaskDto": {
        "required": [
          "OrderID",
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.StockReservationTaskLineDto"
            }
          },
          "Order": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrderDto"
          },
          "OrderID": {
            "type": "integer"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.StockReservationTaskLineDto": {
        "required": [
          "OrderLineID",
          "ProductID",
          "IsCancelled",
          "IsReserved",
          "QuantityOnHand",
          "MustBeOrdered",
          "ForceComplete"
        ],
        "type": "object",
        "properties": {
          "Barcodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ForceComplete": {
            "type": "boolean"
          },
          "IsCancelled": {
            "type": "boolean"
          },
          "IsReserved": {
            "type": "boolean"
          },
          "MustBeOrdered": {
            "type": "boolean"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "Product": {
            "type": "object"
          },
          "ProductID": {
            "type": "integer"
          },
          "QuantityOnHand": {
            "type": "integer"
          },
          "Requirements": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.StockWithInitialCycleCountResultDto": {
        "required": [
          "StockLabel",
          "ProductID",
          "Quantity",
          "QuantityOnHand",
          "StockLabelID",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "LabelID": {
            "type": "string"
          },
          "LabelNumber": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          },
          "QuantityOnHand": {
            "type": "integer"
          },
          "ShortDescription": {
            "type": "string"
          },
          "StockLabel": {
            "type": "integer"
          },
          "StockLabelID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.UpdateUserTaskNotCompletedReason": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Usages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ReasonUsage"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.UpdateUserTaskPriority": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "object"
          },
          "Description": {
            "type": "object"
          },
          "From": {
            "type": "object",
            "description": "Inclusive"
          },
          "ID": {
            "type": "integer"
          },
          "LanguageID": {
            "type": "object"
          },
          "Name": {
            "type": "object"
          },
          "To": {
            "type": "object",
            "description": "Exclusive"
          },
          "UserTaskSubTypeID": {
            "type": "object"
          },
          "UserTaskTypeID": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.UpdateUserTaskType": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "DefaultPriority": {
            "type": "object"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.UpdateUserTaskTypeOrganizationUnitSet": {
        "required": [
          "OrganizationUnitSetID",
          "IgnoreForPeriodClosing",
          "Required",
          "UserTaskTypeID"
        ],
        "type": "object",
        "properties": {
          "IgnoreForPeriodClosing": {
            "type": "boolean"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "Required": {
            "type": "boolean"
          },
          "UserTaskTypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.UserTaskTypeOrganizationUnitSetResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.UserTasks.Dto.UserTaskTypeOrganizationUnitSetDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.CompleteZonedCycleCountCompletionTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.CompleteZonedCycleCountPreCount": {
        "required": [
          "UserTaskID",
          "Results"
        ],
        "type": "object",
        "properties": {
          "Results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.CompleteZonedCycleCountPreCountResult"
            }
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.CompleteZonedCycleCountPreCountResult": {
        "required": [
          "StockLabelID"
        ],
        "type": "object",
        "properties": {
          "CountedQuantity": {
            "type": "integer"
          },
          "StockLabelID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.CompleteZonedCycleCounts": {
        "required": [
          "ToComplete",
          "CompletionType"
        ],
        "type": "object",
        "properties": {
          "CompletionType": {
            "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.CompleteZonedCycleCountCompletionTypes"
          },
          "ToComplete": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.ZonedCycleCountToComplete"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.CountStockLabelForZonedCycleCount": {
        "required": [
          "CountedQuantity",
          "UserTaskID",
          "StockLabelID"
        ],
        "type": "object",
        "properties": {
          "CountedQuantity": {
            "type": "integer"
          },
          "StockLabelID": {
            "type": "integer"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.CountStockLabelForZonedCycleCountResponse": {
        "required": [
          "CountResult",
          "IsCompleted"
        ],
        "type": "object",
        "properties": {
          "CountResult": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ZonedCycleCountResultTypes"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.CreateCycleCountZone": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.CreateCycleCountZoneGroup": {
        "required": [
          "OrganizationUnitSetID"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "ZoneIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.CreateCycleCountZoneGroupResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.CreateZonedCycleCount": {
        "required": [
          "ProductID",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.CreateZonedCycleCountSchedule": {
        "required": [
          "OrganizationUnitSetID",
          "ProductSearchModel"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "CycleCountIntervalInDays": {
            "type": "integer"
          },
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "ProductSearchModel": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ZonedCycleCountScheduleProductSearchModel"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.CreateZonedCycleCountScheduleResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.CreateZonedCycleCounts": {
        "required": [
          "ProductIDs",
          "OrganizationUnitIDs"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "ProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.CreateZonedCycleCountsByQuery": {
        "type": "object",
        "properties": {
          "Filters": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.Search.FilterModel"
            },
            "description": "Filters to apply to product search"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "Query": {
            "type": "string",
            "description": "Query for the product search"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.DeactivateZonedCycleCount": {
        "type": "object",
        "properties": {
          "Reason": {
            "type": "string",
            "description": "A reason, if any, why the tasks were disabled. Optional."
          },
          "UserTaskIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.DeleteCycleCountZone": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.DeleteCycleCountZoneGroup": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.DeleteZonedCycleCountSchedule": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.GetCycleCountOriginTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.GetCycleCountOriginTypesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.GetCycleCountZones": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.GetCycleCountZonesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.UserTasks.ZonedCycleCountUserTask.CycleCountZoneDto"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.GetStatusForZonedCycleCountPreCounts": {
        "type": "object",
        "properties": {
          "PreCountUserTaskID": {
            "type": "integer"
          },
          "ZonedCycleCountUserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.GetStatusForZonedCycleCountPreCountsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "PreCounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.GetStatusForZonedCycleCountPreCountsResponse_PreCountStatus"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.GetStatusForZonedCycleCountPreCountsResponse_PreCountStatus": {
        "required": [
          "IsStarted",
          "IsCompleted"
        ],
        "type": "object",
        "properties": {
          "CompletionTime": {
            "type": "string",
            "format": "date-time"
          },
          "CountResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.GetStatusForZonedCycleCountPreCountsResponse_PreCountStatus_Result"
            }
          },
          "CycleCountZone": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "IsStarted": {
            "type": "boolean"
          },
          "PreCountedQuantity": {
            "type": "integer"
          },
          "UserFullName": {
            "type": "string"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.GetStatusForZonedCycleCountPreCountsResponse_PreCountStatus_Result": {
        "required": [
          "CountedQuantity",
          "CreationTime"
        ],
        "type": "object",
        "properties": {
          "CountedQuantity": {
            "type": "integer"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "StockLabel": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.GetUserWhoDeletedCycleCountZoneAndMakeItGreatAgain": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.GetUserWhoDeletedCycleCountZoneAndMakeItGreatAgainResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "LastModificationTime": {
            "type": "string",
            "format": "date-time"
          },
          "LastModifiedByID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.GetZonedCycleCount": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "IncludedFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.GetZonedCycleCountPreCount": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "IncludedFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.GetZonedCycleCountPreCountDto": {
        "type": "object",
        "properties": {
          "CycleCountZone": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "Results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.GetZonedCycleCountPreCountResult"
            }
          },
          "User": {
            "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.GetZonedCycleCountPreCountUserDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.GetZonedCycleCountPreCountResponse": {
        "required": [
          "ID",
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "CycleCountZone": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Product": {
            "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.GetZonedCycleCountPreCountResponse_GetZonedCycleCountPreCountProduct"
          },
          "StockLabelsToCount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
            }
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.GetZonedCycleCountPreCountResponse_GetZonedCycleCountPreCountProduct": {
        "required": [
          "Type",
          "ID",
          "UnitPriceInTax"
        ],
        "type": "object",
        "properties": {
          "Content": {
            "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
          },
          "CurrencyID": {
            "type": "string"
          },
          "CustomID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ProductTypes"
          },
          "UnitPriceInTax": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.GetZonedCycleCountPreCountResult": {
        "required": [
          "CountedQuantity",
          "CreationTime"
        ],
        "type": "object",
        "properties": {
          "CountedQuantity": {
            "type": "integer"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "CurrentStock": {
            "type": "integer"
          },
          "StockLabel": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.GetZonedCycleCountPreCountUserDto": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.GetZonedCycleCountPreCountedQuantity": {
        "type": "object",
        "properties": {
          "CountedQuantity": {
            "type": "integer"
          },
          "StockLabel": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.GetZonedCycleCountProduct": {
        "required": [
          "Type",
          "ID"
        ],
        "type": "object",
        "properties": {
          "Content": {
            "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
          },
          "CustomID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ProductTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.GetZonedCycleCountResponse": {
        "required": [
          "CreatedByID",
          "IsActive",
          "ID",
          "UserTaskID",
          "CreationTime",
          "IsCompleted"
        ],
        "type": "object",
        "properties": {
          "CompletionTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByID": {
            "type": "integer"
          },
          "CreatedByUserName": {
            "type": "string"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ExpectedPreCountedQuantity": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "IsActive": {
            "type": "boolean"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OriginID": {
            "type": "integer"
          },
          "OriginTypeID": {
            "type": "integer"
          },
          "PreCountedQuantities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.GetZonedCycleCountPreCountedQuantity"
            }
          },
          "PreCountedQuantity": {
            "type": "integer"
          },
          "PreCounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.GetZonedCycleCountPreCountDto"
            }
          },
          "Product": {
            "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.GetZonedCycleCountProduct"
          },
          "ResultStatus": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ZonedCycleCountResultStatus"
          },
          "StartTime": {
            "type": "string",
            "format": "date-time"
          },
          "StockLabelQuantities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.GetZonedCyleCountStockLabelQuantities"
            }
          },
          "StockLabelsToCount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
            }
          },
          "StockMutationQuantitiesSincePreCount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.GetZonedCycleCountStockMutationQuantity"
            }
          },
          "StockMutationsSincePreCount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.GetZonedCycleCountStockMutation"
            }
          },
          "UserID": {
            "type": "integer"
          },
          "UserName": {
            "type": "string"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.GetZonedCycleCountStockMutation": {
        "required": [
          "MutationQuantity",
          "CreationTime"
        ],
        "type": "object",
        "properties": {
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "MutationQuantity": {
            "type": "integer"
          },
          "StockLabel": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "StockMutationReason": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.GetZonedCycleCountStockMutationQuantity": {
        "required": [
          "TotalMutationQuantity",
          "Since"
        ],
        "type": "object",
        "properties": {
          "Since": {
            "type": "string",
            "format": "date-time"
          },
          "StockLabel": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "TotalMutationQuantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.GetZonedCyleCountStockLabelQuantities": {
        "required": [
          "CountedQuantity",
          "CurrentQuantityOnHand",
          "ExpectedQuantity"
        ],
        "type": "object",
        "properties": {
          "CountedQuantity": {
            "type": "integer"
          },
          "CurrentQuantityOnHand": {
            "type": "integer"
          },
          "ExpectedQuantity": {
            "type": "integer"
          },
          "ModifiedQuantity": {
            "type": "integer"
          },
          "StockLabel": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.ListCycleCountZoneGroups": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.UserTasks.ZonedCycleCountUserTask.ListCycleCountGroupsFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.ListCycleCountZoneGroupsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Services.ZonedCycleCounts.ListCycleCountZoneGroupsResponse_CycleCountZoneGroupDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.ListCycleCountZoneGroupsResponse_CycleCountZoneGroupDto": {
        "required": [
          "OrganizationUnitSetID",
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "OrganizationUnitSetName": {
            "type": "string"
          },
          "Zones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.ListCycleZonesForOrganizationUnits": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.UserTasks.ZonedCycleCountUserTask.ListOrganizationUnitCycleCountZonesFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.ListCycleZonesForOrganizationUnitsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.UserTasks.ZonedCycleCountUserTask.CycleCountZonesForOrganizationUnitDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.ListZonedCycleCountSchedules": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.UserTasks.ZonedCycleCountUserTask.ListZonedCycleCountSchedulesFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.ListZonedCycleCountSchedulesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.UserTasks.ZonedCycleCountUserTask.ZonedCycleCountScheduleDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.ListZonedCycleCounts": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.UserTasks.ZonedCycleCountUserTask.ListZonedCycleCountsFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.ListZonedCycleCountsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.UserTasks.ZonedCycleCountUserTask.ListZonedCycleCountsDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.ProduceZonedCycleCountHandout": {
        "required": [
          "Channel",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "Channel": {
            "$ref": "#/components/schemas/EVA.Core.MessageTemplates.TemplateOutputChannel"
          },
          "CycleCountZoneIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "StationID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.ProduceZonedCycleCountHandoutResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Url": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.ReplaceCycleCountZonesForOrganizationUnit": {
        "required": [
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "CycleCountZoneIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.StartZonedCycleCount": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "IncludedFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.StartZonedCycleCountPreCount": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "IncludedFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.StartZonedCycleCountPreCountDto": {
        "required": [
          "IsCompleted"
        ],
        "type": "object",
        "properties": {
          "CycleCountZone": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "Results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.StartZonedCycleCountPreCountResult"
            }
          },
          "User": {
            "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.StartZonedCycleCountPreCountUserDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.StartZonedCycleCountPreCountResponse": {
        "required": [
          "ID",
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "CycleCountZone": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Product": {
            "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.StartZonedCycleCountPreCountResponse_StartZonedCycleCountPreCountProduct"
          },
          "StockLabelsToCount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
            }
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.StartZonedCycleCountPreCountResponse_StartZonedCycleCountPreCountProduct": {
        "required": [
          "Type",
          "ID",
          "UnitPriceInTax"
        ],
        "type": "object",
        "properties": {
          "Content": {
            "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
          },
          "CurrencyID": {
            "type": "string"
          },
          "CustomID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ProductTypes"
          },
          "UnitPriceInTax": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.StartZonedCycleCountPreCountResult": {
        "required": [
          "CountedQuantity",
          "CreationTime"
        ],
        "type": "object",
        "properties": {
          "CountedQuantity": {
            "type": "integer"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "StockLabel": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.StartZonedCycleCountPreCountUserDto": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.StartZonedCycleCountPreCountedQuantity": {
        "type": "object",
        "properties": {
          "CountedQuantity": {
            "type": "integer"
          },
          "StockLabel": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.StartZonedCycleCountProduct": {
        "required": [
          "Type",
          "ID",
          "UnitPriceInTax"
        ],
        "type": "object",
        "properties": {
          "Content": {
            "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
          },
          "CurrencyID": {
            "type": "string"
          },
          "CustomID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ProductTypes"
          },
          "UnitPriceInTax": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.StartZonedCycleCountResponse": {
        "required": [
          "ID",
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "CurrentStock": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.StartZonedCyleCountCurrentStock"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ExpectedPreCountedQuantity": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "PreCountedQuantities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.StartZonedCycleCountPreCountedQuantity"
            }
          },
          "PreCountedQuantity": {
            "type": "integer"
          },
          "PreCounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.StartZonedCycleCountPreCountDto"
            }
          },
          "Product": {
            "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.StartZonedCycleCountProduct"
          },
          "StockLabelsToCount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
            }
          },
          "StockMutationQuantitiesSincePreCount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.StartZonedCycleCountStockMutationQuantity"
            }
          },
          "StockMutationsSincePreCount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.StartZonedCycleCountStockMutation"
            }
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.StartZonedCycleCountStockMutation": {
        "required": [
          "MutationQuantity",
          "CreationTime"
        ],
        "type": "object",
        "properties": {
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "MutationQuantity": {
            "type": "integer"
          },
          "StockLabel": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "StockMutationReason": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.StartZonedCycleCountStockMutationQuantity": {
        "required": [
          "TotalMutationQuantity",
          "Since"
        ],
        "type": "object",
        "properties": {
          "Since": {
            "type": "string",
            "format": "date-time"
          },
          "StockLabel": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "TotalMutationQuantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.StartZonedCyleCountCurrentStock": {
        "required": [
          "CurrentQuantityOnHand"
        ],
        "type": "object",
        "properties": {
          "CurrentQuantityOnHand": {
            "type": "integer"
          },
          "StockLabel": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.UpdateCycleCountOriginType": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "object"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.UpdateCycleCountZone": {
        "required": [
          "ID",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.UpdateCycleCountZoneGroup": {
        "required": [
          "OrganizationUnitSetID",
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "ZoneIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.UpdateZonedCycleCountSchedule": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "object"
          },
          "CycleCountIntervalInDays": {
            "type": "object"
          },
          "Date": {
            "type": "object"
          },
          "Description": {
            "type": "object"
          },
          "ID": {
            "type": "integer"
          },
          "OrganizationUnitSetID": {
            "type": "object"
          },
          "ProductSearchModel": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.ValidateCycleCountZoneGroup": {
        "required": [
          "OrganizationUnitSetID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitSetID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.ValidateCycleCountZoneGroupResponse": {
        "required": [
          "HasWarnings"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "HasWarnings": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.ValidateCycleCountZoneGroupResponse_Warning"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.ValidateCycleCountZoneGroupResponse_Warning": {
        "type": "object",
        "properties": {
          "Message": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.ZonedCycleCountToComplete": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "CountedQuantityCorrections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Services.ZonedCycleCounts.ZonedCycleCountToCompleteQuantityCorrection"
            }
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Services.ZonedCycleCounts.ZonedCycleCountToCompleteQuantityCorrection": {
        "required": [
          "NewCountedQuantity"
        ],
        "type": "object",
        "properties": {
          "NewCountedQuantity": {
            "type": "integer"
          },
          "StockLabelID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.CancelShipments": {
        "type": "object",
        "properties": {
          "ShipmentIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.CancelShipmentsResponse": {
        "required": [
          "Total",
          "Errors"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Errors": {
            "type": "integer"
          },
          "Message": {
            "type": "string"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Total": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.CreateShipment": {
        "required": [
          "IsPending"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "BackendSystemID": {
            "type": "string"
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldKeyValue"
            },
            "description": "Optional additional custom fields"
          },
          "ExpectedDeliveryDate": {
            "type": "string",
            "format": "date-time"
          },
          "IsPending": {
            "type": "boolean"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Shipments.CreateShipment_ShipmentLine"
            }
          },
          "OrderBackendID": {
            "type": "string",
            "description": "Reference to the order that is being shipped - required when `OrderID` is omitted"
          },
          "OrderBackendSystemID": {
            "type": "string",
            "description": "Reference to the system from which the order originated - required when `OrderID` is omitted"
          },
          "OrderFulfillmentID": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer",
            "description": "ID of the order that is being shipped - required when `OrderBackendID` and `OrderBackendSystemID` are omitted"
          },
          "PackageID": {
            "type": "integer",
            "description": "Optional. When only lines are provided, the PackageID can be used to create a package for all lines."
          },
          "Packages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Shipments.CreateShipment_ShipmentPackage"
            }
          },
          "ReceiveMethod": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ShipmentReceiveMethods"
          },
          "ShipmentDate": {
            "type": "string",
            "format": "date-time"
          },
          "ShippedFromOrganizationUnitID": {
            "type": "integer",
            "description": "Optional, will be determined based on the Order"
          },
          "TrackingCode": {
            "type": "string"
          },
          "TrackingLink": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.CreateShipment_ShipmentLine": {
        "type": "object",
        "properties": {
          "BackendReference": {
            "type": "string"
          },
          "OrderFulfillmentLineID": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderLineBackendID": {
            "type": "string"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer",
            "description": "When not provided, the QuantityOpen of the OrderLine will be used"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.CreateShipment_ShipmentPackage": {
        "required": [
          "PackageID"
        ],
        "type": "object",
        "properties": {
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Shipments.CreateShipment_ShipmentLine"
            }
          },
          "PackageID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.CreateShipmentResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.DeleteShipment": {
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "BackendSystemID": {
            "type": "string"
          },
          "ShipmentID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.DeliverShipment": {
        "type": "object",
        "properties": {
          "ShipmentBackendID": {
            "type": "string",
            "description": "Either this or ShipmentID is required. If ShipmentBackendID is specified, ShipmentBackendSystem is also required."
          },
          "ShipmentBackendSystemID": {
            "type": "string",
            "description": "Required if ShipmentBackendID is specified."
          },
          "ShipmentID": {
            "type": "integer",
            "description": "Either this or ShipmentBackendID is required."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.GetPurchaseOrderShipment": {
        "required": [
          "ShipmentID"
        ],
        "type": "object",
        "properties": {
          "ShipmentID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.GetPurchaseOrderShipmentResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Shipment": {
            "$ref": "#/components/schemas/EVA.Core.Shipments.PurchaseOrderShipmentDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.GetShipment": {
        "required": [
          "ShipmentID"
        ],
        "type": "object",
        "properties": {
          "ShipmentID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.GetShipmentDetailsOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "CustomerReference": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.GetShipmentExportByID": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.GetShipmentExportByIDResponse": {
        "required": [
          "ShippedToOrganizationUnitID",
          "ID",
          "CreationTime",
          "Status",
          "ShipmentID"
        ],
        "type": "object",
        "properties": {
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "LastModificationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Name": {
            "type": "string"
          },
          "ShipmentID": {
            "type": "integer"
          },
          "ShippedFromOrganizationUnitID": {
            "type": "integer"
          },
          "ShippedFromOrganizationUnitName": {
            "type": "string"
          },
          "ShippedToOrganizationUnitID": {
            "type": "integer"
          },
          "ShippedToOrganizationUnitName": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.TransputJobStatuses"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.GetShipmentExportDocuments": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.GetShipmentExportDocumentsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "RequestDocuments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.TransputJobs.TransputJobDocument"
            }
          },
          "ResponseDocuments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.TransputJobs.TransputJobDocument"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.GetShipmentResponse": {
        "required": [
          "OrderType",
          "TotalQuantityShipped",
          "NetTotalQuantityShipped",
          "ID",
          "Status",
          "LineCount",
          "PaymentHandledByCarrier",
          "IsCompleted",
          "IsExported",
          "TotalQuantityDelivered",
          "IsDeleted",
          "NetTotalQuantityDelivered",
          "IsDelivered"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "BackendSystemID": {
            "type": "string"
          },
          "CompletionTime": {
            "type": "string",
            "format": "date-time"
          },
          "CustomFieldValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.CustomFields.CustomFieldResponse"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ExpectedDeliveryDate": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "IsDelivered": {
            "type": "boolean"
          },
          "IsExported": {
            "type": "boolean"
          },
          "LastDeliveryDate": {
            "type": "string",
            "format": "date-time"
          },
          "LineCount": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "NetTotalQuantityDelivered": {
            "type": "integer"
          },
          "NetTotalQuantityShipped": {
            "type": "integer"
          },
          "OrderType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderTypes"
          },
          "OrdersInShipment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Shipments.GetShipmentResponse_OrderInShipment"
            }
          },
          "Packages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Shipments.GetShipmentResponse_ShipmentPackage"
            }
          },
          "PaymentHandledByCarrier": {
            "type": "boolean"
          },
          "ReceiveMethod": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ShipmentReceiveMethods"
          },
          "ShipmentDate": {
            "type": "string",
            "format": "date-time"
          },
          "ShippedFromOrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Shipments.GetShipmentResponse_OrganizationUnit"
          },
          "ShippedToOrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Shipments.GetShipmentResponse_OrganizationUnit"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ShipmentStatuses"
          },
          "TotalQuantityDelivered": {
            "type": "integer"
          },
          "TotalQuantityShipped": {
            "type": "integer"
          },
          "TrackingCode": {
            "type": "string"
          },
          "TrackingLink": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.GetShipmentResponse_OrderInShipment": {
        "required": [
          "TotalAmountInTax",
          "OpenAmount",
          "OrderID",
          "PaidAmount"
        ],
        "type": "object",
        "properties": {
          "OpenAmount": {
            "type": "number"
          },
          "OrderID": {
            "type": "integer"
          },
          "PaidAmount": {
            "type": "number"
          },
          "TotalAmountInTax": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.GetShipmentResponse_OrganizationUnit": {
        "required": [
          "Type",
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnitTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.GetShipmentResponse_ShipmentPackage": {
        "required": [
          "Width",
          "Height",
          "Weight",
          "ID",
          "Quantity",
          "Length"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Height": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "Length": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          },
          "Weight": {
            "type": "integer"
          },
          "Width": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.GetShipmentSettings": {
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.GetShipmentSettingsResponse": {
        "required": [
          "DefaultReceiveMethod",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "DefaultReceiveMethod": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ShipmentReceiveMethods"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ListPurchaseOrderShipments": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Shipments.ListPurchaseOrderShipmentsFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ListPurchaseOrderShipmentsFilter": {
        "required": [
          "IncludeChildOrganizationUnits"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "IncludeChildOrganizationUnits": {
            "type": "boolean"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "OrderBackendID": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "ShipmentID": {
            "type": "integer"
          },
          "StatusID": {
            "type": "integer"
          },
          "StatusIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "TrackingCode": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ListPurchaseOrderShipmentsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Shipments.PurchaseOrderShipmentDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ListShipmentExportsForShipment": {
        "required": [
          "ShipmentID"
        ],
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "ShipmentID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ListShipmentExportsForShipmentResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Shipments.ListShipmentExportsForShipmentResponse_ShipmentExportDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ListShipmentExportsForShipmentResponse_ShipmentExportDto": {
        "required": [
          "ID",
          "CreationTime",
          "Status"
        ],
        "type": "object",
        "properties": {
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer"
          },
          "LastModificationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Name": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.TransputJobStatuses"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ListShipmentLedgerFilter": {
        "type": "object",
        "properties": {
          "TypeIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ListShipmentLedgerForShipment": {
        "required": [
          "ShipmentID"
        ],
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Shipments.ListShipmentLedgerFilter"
          },
          "ShipmentID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ListShipmentLedgerForShipmentResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Shipments.ListShipmentLedgerForShipmentResponse_ShipmentLedgerDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ListShipmentLedgerForShipmentResponse_ShipmentLedgerDto": {
        "required": [
          "CreatedByID",
          "TypeID",
          "ID",
          "CreationTime",
          "ShipmentID"
        ],
        "type": "object",
        "properties": {
          "CreatedBy": {
            "$ref": "#/components/schemas/EVA.Core.Shipments.ListShipmentLedgerForShipmentResponse_UserDto"
          },
          "CreatedByID": {
            "type": "integer"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "NewValue": {
            "type": "string"
          },
          "OldValue": {
            "type": "string"
          },
          "ShipmentID": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "TypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ListShipmentLedgerForShipmentResponse_UserDto": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "FullName": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ListShipmentLines": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Shipments.ListShipmentLinesFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ListShipmentLinesFilter": {
        "type": "object",
        "properties": {
          "OrderIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "OrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "ProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "ShipmentID": {
            "type": "integer"
          },
          "ShipmentPackageID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ListShipmentLinesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Shipments.ShipmentLineDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ListShipmentLinesToInvoiceFilter": {
        "required": [
          "ShipmentID"
        ],
        "type": "object",
        "properties": {
          "ProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "ShipmentID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ListShipmentPackages": {
        "required": [
          "ShipmentID"
        ],
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Shipments.ListShipmentPackagesFilter"
          },
          "ShipmentID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ListShipmentPackagesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Shipments.ShipmentPackageDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ListShipmentsToInvoiceFilter": {
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "From": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer"
          },
          "OrderBackendID": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "ShipFromOrganizationUnitID": {
            "type": "integer"
          },
          "ShipToOrganizationUnitID": {
            "type": "integer"
          },
          "To": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ModifyQuantityShipped": {
        "required": [
          "Lines",
          "ShipmentID"
        ],
        "type": "object",
        "properties": {
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Shipments.ModifyQuantityShipped_ShipmentLine"
            }
          },
          "ShipmentID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ModifyQuantityShipped_ShipmentLine": {
        "required": [
          "QuantityShipped",
          "ShipmentLineID"
        ],
        "type": "object",
        "properties": {
          "QuantityShipped": {
            "type": "integer"
          },
          "ShipmentLineID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ProducePackingSlip": {
        "required": [
          "ShipmentID",
          "Print",
          "Download"
        ],
        "type": "object",
        "properties": {
          "Download": {
            "type": "boolean"
          },
          "Print": {
            "type": "boolean"
          },
          "ShipmentID": {
            "type": "integer"
          },
          "StationID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ProducePackingSlipResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ResourceInfo": {
            "$ref": "#/components/schemas/EVA.Core.ResourceInfo"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ProducePickSlip": {
        "required": [
          "OrderIDs",
          "Print"
        ],
        "type": "object",
        "properties": {
          "OrderIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "Print": {
            "type": "boolean"
          },
          "StationID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ProducePickSlipResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ResourceInfos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.ResourceInfo"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.PurchaseOrderShipmentDto": {
        "required": [
          "TotalPackageCountIndication",
          "TotalQuantityShipped",
          "NetTotalQuantityShipped",
          "StatusID",
          "ID",
          "CreationTime",
          "ShipmentDate",
          "IsCompleted",
          "TotalQuantityDelivered",
          "IsDeleted",
          "NetTotalQuantityDelivered",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "BackendSystemID": {
            "type": "string"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "ExpectedDeliveryDate": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "NetTotalQuantityDelivered": {
            "type": "integer"
          },
          "NetTotalQuantityShipped": {
            "type": "integer"
          },
          "Orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Shipments.PurchaseOrderShipmentDto_OrderDto"
            }
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "OrganizationUnitName": {
            "type": "string"
          },
          "ReceiptCreatedBy": {
            "type": "string"
          },
          "ReceiptCreatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "ReceiveMethodID": {
            "type": "integer"
          },
          "ShipmentDate": {
            "type": "string",
            "format": "date-time"
          },
          "StatusID": {
            "type": "integer"
          },
          "TotalPackageCountIndication": {
            "type": "integer"
          },
          "TotalQuantityDelivered": {
            "type": "integer"
          },
          "TotalQuantityShipped": {
            "type": "integer"
          },
          "TrackingCode": {
            "type": "string"
          },
          "TrackingLink": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.PurchaseOrderShipmentDto_OrderDto": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ReceiveShipmentWorkSet": {
        "required": [
          "ShippedToOrganizationUnitID",
          "ShipmentID",
          "ReceiveMethod"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "BackendSystemID": {
            "type": "string"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Shipments.ReceiveShipmentWorkSetLine"
            }
          },
          "Orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Shipments.GetShipmentDetailsOrder"
            }
          },
          "ReceiveMethod": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ShipmentReceiveMethods"
          },
          "ShipmentID": {
            "type": "integer"
          },
          "ShippedFromOrganizationUnitID": {
            "type": "integer"
          },
          "ShippedToOrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ReceiveShipmentWorkSetLine": {
        "required": [
          "ProductID",
          "QuantityOrdered",
          "QuantityAlreadyReceived",
          "NetQuantityDelivered",
          "QuantityShipped",
          "NetQuantityShipped"
        ],
        "type": "object",
        "properties": {
          "NetQuantityDelivered": {
            "type": "integer"
          },
          "NetQuantityShipped": {
            "type": "integer"
          },
          "Packages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Shipments.ReceiveShipmentWorkSetLinePackage"
            }
          },
          "ProductCustomID": {
            "type": "string"
          },
          "ProductID": {
            "type": "integer"
          },
          "ProductPrimitiveName": {
            "type": "string"
          },
          "QuantityAlreadyReceived": {
            "type": "integer"
          },
          "QuantityOrdered": {
            "type": "integer"
          },
          "QuantityShipped": {
            "type": "integer"
          },
          "Receipts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Shipments.ReceiveShipmentWorkSetLineReceipt"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ReceiveShipmentWorkSetLinePackage": {
        "required": [
          "QuantityTotal",
          "QuantityBarcode",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "Barcode": {
            "type": "string"
          },
          "Quantity": {
            "type": "integer"
          },
          "QuantityBarcode": {
            "type": "integer"
          },
          "QuantityTotal": {
            "type": "integer"
          },
          "UnitOfMeasure": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ReceiveShipmentWorkSetLineReceipt": {
        "required": [
          "QuantityReceived"
        ],
        "type": "object",
        "properties": {
          "QuantityReceived": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.RetryShipmentExport": {
        "required": [
          "ID",
          "Force"
        ],
        "type": "object",
        "properties": {
          "Force": {
            "type": "boolean"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.SetShipmentSettings": {
        "type": "object",
        "properties": {
          "DefaultReceiveMethod": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ShipmentReceiveMethods"
          },
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ShipShipment": {
        "required": [
          "Force"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "BackendSystemID": {
            "type": "string"
          },
          "Force": {
            "type": "boolean",
            "description": "Allow to force shipment. Requires additional rights"
          },
          "ShipmentDate": {
            "type": "string",
            "description": "The moment the shipment was shipped, will be set to DateTime.Now when not set",
            "format": "date-time"
          },
          "ShipmentID": {
            "type": "integer"
          },
          "TrackingCode": {
            "type": "string"
          },
          "TrackingLink": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ShipmentLineDto": {
        "required": [
          "Type",
          "TotalAmount",
          "TotalAmountInTax",
          "OrderLineID",
          "OrderID",
          "ID",
          "NetQuantityDelivered",
          "UnitPriceInTax",
          "QuantityDelivered",
          "DeliveryType",
          "TaxRate",
          "ShipmentID",
          "QuantityShipped",
          "IsCompleted",
          "UnitPrice",
          "NetQuantityShipped"
        ],
        "type": "object",
        "properties": {
          "BackendReference": {
            "type": "string"
          },
          "CurrencyID": {
            "type": "string"
          },
          "CustomID": {
            "type": "string"
          },
          "DeliveryType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ShipmentLineDeliveryTypes"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "NetQuantityDelivered": {
            "type": "integer"
          },
          "NetQuantityShipped": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "QuantityDelivered": {
            "type": "integer"
          },
          "QuantityShipped": {
            "type": "integer"
          },
          "ShipmentDate": {
            "type": "string",
            "format": "date-time"
          },
          "ShipmentID": {
            "type": "integer"
          },
          "ShipmentPackageID": {
            "type": "integer"
          },
          "TaxRate": {
            "type": "number"
          },
          "TotalAmount": {
            "type": "number"
          },
          "TotalAmountInTax": {
            "type": "number"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderLineTypes"
          },
          "UnitPrice": {
            "type": "number"
          },
          "UnitPriceInTax": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ShipmentPackageDto": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Package": {
            "$ref": "#/components/schemas/EVA.Core.Shipments.ShipmentPackageDto_PackageDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ShipmentPackageDto_PackageDto": {
        "required": [
          "Width",
          "Height",
          "Weight",
          "ID",
          "Length"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Height": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "Length": {
            "type": "integer"
          },
          "Weight": {
            "type": "integer"
          },
          "Width": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ShipmentStatusType": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Shipments.UndoShipment": {
        "required": [
          "ShipmentID"
        ],
        "type": "object",
        "properties": {
          "ShipmentID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.UndoShipmentReceipt": {
        "required": [
          "ShipmentID"
        ],
        "type": "object",
        "properties": {
          "ShipmentID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.UpdateShipment": {
        "required": [
          "RemoveOtherPackagesAndLines"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "BackendSystemID": {
            "type": "string"
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldKeyValue"
            },
            "description": "Optional additional custom fields"
          },
          "ExpectedDeliveryDate": {
            "type": "string",
            "format": "date-time"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Shipments.UpdateShipment_ShipmentLine"
            }
          },
          "PackageID": {
            "type": "integer",
            "description": "Optional. When only lines are provided, the PackageID can be used to create a package for all lines."
          },
          "Packages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Shipments.UpdateShipment_ShipmentPackage"
            }
          },
          "ReceiveMethod": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ShipmentReceiveMethods"
          },
          "ReceiveMethodChangedReason": {
            "type": "string",
            "description": "Explanation of why the receive method has been changed"
          },
          "RemoveOtherPackagesAndLines": {
            "type": "boolean"
          },
          "ShipmentDate": {
            "type": "string",
            "format": "date-time"
          },
          "ShipmentID": {
            "type": "integer"
          },
          "TrackingCode": {
            "type": "string"
          },
          "TrackingLink": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.UpdateShipment_ShipmentLine": {
        "type": "object",
        "properties": {
          "BackendReference": {
            "type": "string"
          },
          "OrderLineBackendID": {
            "type": "string"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer",
            "description": "When not provided, the QuantityOpen of the OrderLine will be used"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.UpdateShipment_ShipmentPackage": {
        "required": [
          "PackageID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Shipments.UpdateShipment_ShipmentLine"
            }
          },
          "PackageID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.UpdateShipmentStatus": {
        "required": [
          "Lines"
        ],
        "type": "object",
        "properties": {
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Shipments.UpdateShipmentStatusLine"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.UpdateShipmentStatusLine": {
        "required": [
          "Type",
          "ShipmentID"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "Date the event occurred - leave empty for 'now'.",
            "format": "date-time"
          },
          "Description": {
            "type": "string",
            "description": "Optional, additional description, most commonly for the carrier status update code description for CarrierStatus types"
          },
          "ShipmentID": {
            "type": "integer",
            "description": "Identifier of the EVA shipment this update is specific for"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.Shipments.ShipmentStatusType"
          },
          "Value": {
            "type": "string",
            "description": "Optional, additional information, most commonly for the carrier status update code (B01, D01, ...) for CarrierStatus types"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ValidateShipment": {
        "required": [
          "ShipmentID"
        ],
        "type": "object",
        "properties": {
          "ShipmentID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipments.ValidateShipmentResponse": {
        "required": [
          "ShipmentStatus",
          "OpenAmountForShipment",
          "PaidAmount",
          "IsValid"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "IsValid": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OpenAmountForShipment": {
            "type": "number"
          },
          "PaidAmount": {
            "type": "number"
          },
          "ShipmentStatus": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ShipmentStatuses"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipping.CarrierDto": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Code": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipping.RequestedDateByOrderLineID": {
        "required": [
          "OrderLineID"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "RequestedDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipping.ShippingMethodByOrderLineDto": {
        "required": [
          "ID",
          "Priority",
          "DeliveryType",
          "PaymentHandledByCarrier",
          "CarrierID",
          "ExtraCosts"
        ],
        "type": "object",
        "properties": {
          "AppliesToOrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "Carrier": {
            "$ref": "#/components/schemas/EVA.Core.Shipping.CarrierDto"
          },
          "CarrierID": {
            "type": "integer"
          },
          "Code": {
            "type": "string"
          },
          "DeliveryType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ShippingMethodDeliveryTypes"
          },
          "Description": {
            "type": "string"
          },
          "ExtraCosts": {
            "type": "number"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "PaymentHandledByCarrier": {
            "type": "boolean"
          },
          "Priority": {
            "type": "integer"
          },
          "RequestedDeliveryDates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Shipping.RequestedDateByOrderLineID"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Shipping.ShippingMethodDto": {
        "required": [
          "ID",
          "Priority",
          "DeliveryType",
          "PaymentHandledByCarrier",
          "CarrierID",
          "ExtraCosts"
        ],
        "type": "object",
        "properties": {
          "Carrier": {
            "$ref": "#/components/schemas/EVA.Core.Shipping.CarrierDto"
          },
          "CarrierID": {
            "type": "integer"
          },
          "Code": {
            "type": "string"
          },
          "DeliveryType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ShippingMethodDeliveryTypes"
          },
          "Description": {
            "type": "string"
          },
          "ExtraCosts": {
            "type": "number"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "PaymentHandledByCarrier": {
            "type": "boolean"
          },
          "Priority": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.SortDirection": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.SortFieldDescriptor": {
        "required": [
          "Direction"
        ],
        "type": "object",
        "properties": {
          "Direction": {
            "$ref": "#/components/schemas/EVA.Core.SortDirection"
          },
          "FieldName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.AdjustStock": {
        "required": [
          "Adjustments"
        ],
        "type": "object",
        "properties": {
          "Adjustments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.AdjustStock_Adjustment"
            }
          },
          "BackendSystemID": {
            "type": "string",
            "description": "Optional, unique identifier for the system that owns the `Adjustment.BackendID` as key for the mutation"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.AdjustStock_Adjustment": {
        "required": [
          "ProductID",
          "Quantity",
          "StockMutationReasonID",
          "StockLabelID",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string",
            "description": "Optional, unique identifier for the mutation, combined with the root `BackendSystemID`"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer",
            "description": "Required product identifier (use the `EVA-IDs-Mode` header to switch identifier keys (`Product.ID`, `Product.BackendID`, ...)"
          },
          "Quantity": {
            "type": "integer"
          },
          "Remark": {
            "type": "string"
          },
          "StockLabelID": {
            "type": "integer"
          },
          "StockMutationReasonID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.AvailabilityTimelineItemTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Stock.CommitOrderLines": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "CommitmentStatus": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderLineCommitmentStatus"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.CommitOrderLinesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.CommitOrderLinesResponse_CommitmentResultForOrderLine"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.CommitOrderLinesResponse_CommitmentResultForOrderLine": {
        "required": [
          "OrderLineID",
          "IsCommitted"
        ],
        "type": "object",
        "properties": {
          "IsCommitted": {
            "type": "boolean"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "OriginalOrderLineID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.CreateStockMutations": {
        "type": "object",
        "properties": {
          "Mutations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.CreateStockMutations_StockMutation"
            }
          },
          "OrganizationUnitBackendID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.CreateStockMutations_StockMutation": {
        "required": [
          "Quantity",
          "Delta",
          "Timestamp"
        ],
        "type": "object",
        "properties": {
          "Delta": {
            "type": "boolean"
          },
          "ProductBackendID": {
            "type": "string"
          },
          "Quantity": {
            "type": "integer"
          },
          "Reason": {
            "type": "string"
          },
          "Remark": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.CreateStockNotification": {
        "required": [
          "ProductID",
          "EmailAddress",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string"
          },
          "LanguageID": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.CreateStockNotificationForCurrentUser": {
        "required": [
          "ProductID"
        ],
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "LanguageID": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.DeleteStockNotification": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.DownloadStockExcelFileTemplate": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetProductAvailability": {
        "required": [
          "Products",
          "Options"
        ],
        "type": "object",
        "properties": {
          "Options": {
            "$ref": "#/components/schemas/EVA.Core.Stock.GetProductAvailabilityOptions"
          },
          "OrganizationUnitID": {
            "type": "integer",
            "description": "By default the availability is calculated from the perspective of your current OrganizationUnit, which determines which warehouse(s) stock is sourced\nfrom, among other things. You can override the default with an OrganizationUnitID of your choosing and calculate availability from that\nOrganizationUnit's perspective."
          },
          "Products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.GetProductAvailability_Product"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetProductAvailability_Product": {
        "required": [
          "QuantityRequested"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string",
            "description": "Required when `ID` is omitted."
          },
          "ID": {
            "type": "integer"
          },
          "QuantityRequested": {
            "type": "integer"
          },
          "ShippingMethodID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetProductAvailabilityOptions": {
        "required": [
          "IncludeRelatedStockReplacingProducts"
        ],
        "type": "object",
        "properties": {
          "Bundles": {
            "$ref": "#/components/schemas/EVA.Core.Stock.GetProductAvailabilityOptions_ProductBundleAvailabilityOptions"
          },
          "Delivery": {
            "$ref": "#/components/schemas/EVA.Core.Stock.GetProductAvailabilityOptions_DeliveryAvailability"
          },
          "IncludeRelatedStockReplacingProducts": {
            "type": "boolean",
            "description": "If set to true then the availability of related stock replacing products is returned."
          },
          "Pickup": {
            "$ref": "#/components/schemas/EVA.Core.Stock.GetProductAvailabilityOptions_PickupAvailability"
          },
          "ProductAvailabilityDetails": {
            "$ref": "#/components/schemas/EVA.Core.Stock.GetProductAvailabilityOptions_ProductAvailabilityDetailsOptions"
          },
          "QuantityAvailable": {
            "type": "boolean",
            "description": "If set to true then the QuantityAvailable is returned. By default this information is only accessible to Employee-type users."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetProductAvailabilityOptions_Coordinate": {
        "required": [
          "Longitude",
          "Latitude"
        ],
        "type": "object",
        "properties": {
          "Latitude": {
            "type": "number"
          },
          "Longitude": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetProductAvailabilityOptions_DeliveryAvailability": {
        "type": "object",
        "properties": {
          "AvailabilityDate": {
            "type": "boolean",
            "description": "Include the expected date on which the provided products can be home-delivered."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetProductAvailabilityOptions_PickupArea": {
        "type": "object",
        "properties": {
          "BottomRight": {
            "$ref": "#/components/schemas/EVA.Core.Stock.GetProductAvailabilityOptions_Coordinate"
          },
          "CountryID": {
            "type": "string",
            "description": "Limit OrganizationUnits within the area to those with the provided country. Optional."
          },
          "TopLeft": {
            "$ref": "#/components/schemas/EVA.Core.Stock.GetProductAvailabilityOptions_Coordinate"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetProductAvailabilityOptions_PickupAvailability": {
        "type": "object",
        "properties": {
          "AvailabilityDate": {
            "type": "boolean",
            "description": "Include the expected date on which the provided products can be picked-up from a shop."
          },
          "InArea": {
            "$ref": "#/components/schemas/EVA.Core.Stock.GetProductAvailabilityOptions_PickupArea"
          },
          "InRadius": {
            "$ref": "#/components/schemas/EVA.Core.Stock.GetProductAvailabilityOptions_PickupRadius"
          },
          "IncludeOrganizationUnitsWithoutStock": {
            "type": "boolean",
            "description": "If specified as true then all relevant pick-up OrganizationUnits are returned, whether they have available stock or not.\n\nDefaults to false and only has effect if `IncludePickupOrganizationUnits` is set to `true`."
          },
          "IncludePickupOrganizationUnits": {
            "type": "boolean",
            "description": "If specified as true the response will contain the pickup organizations. Which organizations are included depends on the rest of the request:\n\n- If a rectangular area is specified through `InArea` it will contain the organizations within the area.\n- If the radius is specified through `InRadius` it will contain the organizations within the radius of the given center co-ordinates.\n- If an explicit list of organizations is specified through `OrganizationUnitIDs` then those are returned.\n\nIn all cases, whether or not all of them are returned or only those that contain stock is determined by `IncludeOrganizationUnitsWithoutStock`. By\ndefault only organizations with stock are returned.\n\nIf the request specifies more than one product, the organization will only be returned if *all* products have stock (unless\n`IncludeOrganizationUnitsWithoutStock` is `true`)."
          },
          "OpeningHoursType": {
            "$ref": "#/components/schemas/EVA.Core.Stock.GetProductAvailabilityOptions_PickupAvailability_PickupOrganizationUnitOpeningHoursType"
          },
          "OrganizationUnitIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "This can be optionally used to provide a list of shops for which you would like to check pick-up availability."
          },
          "OrganizationUnitType": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnitTypes"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.Stock.GetProductAvailabilityOptions_PickupTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetProductAvailabilityOptions_PickupAvailability_PickupOrganizationUnitOpeningHoursType": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetProductAvailabilityOptions_PickupRadius": {
        "type": "object",
        "properties": {
          "Center": {
            "$ref": "#/components/schemas/EVA.Core.Stock.GetProductAvailabilityOptions_Coordinate"
          },
          "CountryID": {
            "type": "string",
            "description": "Limit OrganizationUnits within the radius to those with the provided country. Optional."
          },
          "RadiusInKm": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetProductAvailabilityOptions_PickupTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetProductAvailabilityOptions_ProductAvailabilityDetailsOptions": {
        "type": "object",
        "properties": {
          "IncludeSuppliers": {
            "type": "boolean",
            "description": "Determines whether or not the detailed information for the requested organization(s) recursively includes the stock details of their suppliers as well.\nDefaults to false if both OrganizationUnitIDs and ProductIDs is left empty, otherwise it defaults to true.\nSetting this to false limits the response size in case you only care about the stock details of the specific requested organization(s)."
          },
          "OrganizationUnitIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Which organization(s) to get the details for, defaults to the OrganizationUnitID provided in the request or to your current organization."
          },
          "ProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetProductAvailabilityOptions_ProductBundleAvailabilityOptions": {
        "type": "object",
        "properties": {
          "AvailabilityCalculationMethod": {
            "$ref": "#/components/schemas/EVA.Core.Availability.ProductBundleAvailabilityCalculationMethods"
          },
          "IncludeBundleInformation": {
            "type": "boolean",
            "description": "When the availability of a bundle is calculated it means that all the products that are part of the bundle become part of the output of\nGetProductAvailability. If this option is turned on, the service will also return information about the bundle to make sense of those extra products."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetProductAvailabilityResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "PickupOrganizationUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.ProductAvailabilityPickupOrganizationUnit"
            }
          },
          "Products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.ProductAvailabilityResult"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetProductRunRates": {
        "required": [
          "ProductIDs",
          "WarehouseOrganizationUnitID",
          "Since"
        ],
        "type": "object",
        "properties": {
          "ProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "Since": {
            "type": "string",
            "format": "date-time"
          },
          "WarehouseOrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetProductRunRatesResponse": {
        "required": [
          "DailyRunRate",
          "TotalQuantity",
          "MonthlyRunRate"
        ],
        "type": "object",
        "properties": {
          "DailyRunRate": {
            "type": "number"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "MonthlyRunRate": {
            "type": "number"
          },
          "RunRates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.GetProductRunRatesResponse_RunRate"
            }
          },
          "TotalQuantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetProductRunRatesResponse_RunRate": {
        "required": [
          "ProductID",
          "DailyRunRate",
          "TotalQuantity",
          "SoldFromOrganizationUnitID",
          "MonthlyRunRate"
        ],
        "type": "object",
        "properties": {
          "DailyRunRate": {
            "type": "number"
          },
          "MonthlyRunRate": {
            "type": "number"
          },
          "ProductID": {
            "type": "integer"
          },
          "SoldFromOrganizationUnitID": {
            "type": "integer"
          },
          "SoldFromOrganizationUnitName": {
            "type": "string"
          },
          "TotalQuantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetQuantityOnHandForProducts": {
        "required": [
          "ProductIDs",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          },
          "ProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetQuantityOnHandForProductsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockAvailabilityEstimateForOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "OrderLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.GetStockAvailabilityEstimateForOrder_OrderLine"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockAvailabilityEstimateForOrder_OrderLine": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "RequestedDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockAvailabilityEstimateForOrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrderLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.GetStockAvailabilityEstimateForOrderResponse_OrderLine"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockAvailabilityEstimateForOrderResponse_DependsOnPurchaseOrderLine": {
        "required": [
          "QuantityToShip",
          "ProductID",
          "OrderID",
          "ID",
          "CreationTime",
          "QuantityDelivered",
          "RequestedDate",
          "QuantityShipped"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "QuantityDelivered": {
            "type": "integer"
          },
          "QuantityShipped": {
            "type": "integer"
          },
          "QuantityToShip": {
            "type": "integer"
          },
          "RequestedDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockAvailabilityEstimateForOrderResponse_OrderLine": {
        "required": [
          "CommitmentStatus",
          "OrderLineID",
          "ExportStatus",
          "ProductID",
          "IsCommitted",
          "ShouldBeSplit",
          "CanBeFulfilled",
          "IsBlocked",
          "RequestedDate",
          "AvailabilityStatus"
        ],
        "type": "object",
        "properties": {
          "AlternativeDates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.GetStockAvailabilityEstimateForOrderResponse_SuggestedAlternativeDate"
            }
          },
          "AvailabilityStatus": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderLineAvailabilityStatus"
          },
          "CanBeFulfilled": {
            "type": "boolean"
          },
          "CommitmentDate": {
            "type": "string",
            "format": "date-time"
          },
          "CommitmentStatus": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderLineCommitmentStatus"
          },
          "DependsOnPurchaseOrderLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.GetStockAvailabilityEstimateForOrderResponse_DependsOnPurchaseOrderLine"
            }
          },
          "ExpectedFulfillmentDate": {
            "type": "string",
            "format": "date-time"
          },
          "ExportDate": {
            "type": "string",
            "format": "date-time"
          },
          "ExportStatus": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderExportStatuses"
          },
          "IsBlocked": {
            "type": "boolean"
          },
          "IsCommitted": {
            "type": "boolean"
          },
          "MadeToOrderStatus": {
            "$ref": "#/components/schemas/EVA.Core.Stock.GetStockAvailabilityEstimateForOrderResponse_OrderLineMadeToOrderStatus"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "QuantityAvailable": {
            "type": "integer"
          },
          "RequestedDate": {
            "type": "string",
            "format": "date-time"
          },
          "ShipmentDate": {
            "type": "string",
            "format": "date-time"
          },
          "ShouldBeSplit": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockAvailabilityEstimateForOrderResponse_OrderLineMadeToOrderStatus": {
        "required": [
          "HasBeenCompleted",
          "HasBeenRequested"
        ],
        "type": "object",
        "properties": {
          "HasBeenCompleted": {
            "type": "boolean"
          },
          "HasBeenRequested": {
            "type": "boolean"
          },
          "PurchaseOrderLine": {
            "$ref": "#/components/schemas/EVA.Core.Stock.GetStockAvailabilityEstimateForOrderResponse_OrderLineMadeToOrderStatus_MadeToOrderPurchaseOrderLine"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockAvailabilityEstimateForOrderResponse_OrderLineMadeToOrderStatus_MadeToOrderPurchaseOrderLine": {
        "required": [
          "QuantityToShip",
          "OrderID",
          "ID",
          "QuantityDelivered",
          "IsConfirmed",
          "IsOverdue",
          "QuantityShipped"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "IsConfirmed": {
            "type": "boolean"
          },
          "IsOverdue": {
            "type": "boolean"
          },
          "OrderID": {
            "type": "integer"
          },
          "QuantityDelivered": {
            "type": "integer"
          },
          "QuantityShipped": {
            "type": "integer"
          },
          "QuantityToShip": {
            "type": "integer"
          },
          "RequestedDate": {
            "type": "string",
            "format": "date-time"
          },
          "ShipFromOrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Stock.GetStockAvailabilityEstimateForOrderResponse_OrderLineMadeToOrderStatus_MadeToOrderShipFromOrganizationUnit"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockAvailabilityEstimateForOrderResponse_OrderLineMadeToOrderStatus_MadeToOrderShipFromOrganizationUnit": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockAvailabilityEstimateForOrderResponse_PurchaseOrderLine": {
        "required": [
          "OrderID",
          "ID",
          "Quantity",
          "RequestedDate"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          },
          "RequestedDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockAvailabilityEstimateForOrderResponse_SuggestedAlternativeDate": {
        "required": [
          "Date"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "PurchaseOrderLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.GetStockAvailabilityEstimateForOrderResponse_PurchaseOrderLine"
            }
          },
          "QuantityAvailable": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockAvailabilityEstimateForProducts": {
        "required": [
          "IncludeShopReplenishments",
          "Products",
          "IncludeReservedOrders"
        ],
        "type": "object",
        "properties": {
          "IncludeReservedOrders": {
            "type": "boolean",
            "description": "If set true the service will also return reserved OrderLines"
          },
          "IncludeShopReplenishments": {
            "type": "boolean",
            "description": "If set to true the service will also return purchase OrderLines meant for shops"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "Products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.GetStockAvailabilityEstimateForProducts_Product"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockAvailabilityEstimateForProducts_Product": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "RequestedDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockAvailabilityEstimateForProductsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.GetStockAvailabilityEstimateForProductsResponse_Product"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockAvailabilityEstimateForProductsResponse_AvailabilityDate": {
        "required": [
          "Date"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "PurchaseOrderLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.GetStockAvailabilityEstimateForProductsResponse_PurchaseOrderLine"
            }
          },
          "QuantityAvailable": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockAvailabilityEstimateForProductsResponse_Product": {
        "required": [
          "WarehouseQuantityAvailable",
          "ID",
          "QuantityToShipOnOrder",
          "WarehouseQuantityCommitted",
          "WarehouseQuantityOnHand"
        ],
        "type": "object",
        "properties": {
          "AvailabilityDates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.GetStockAvailabilityEstimateForProductsResponse_AvailabilityDate"
            }
          },
          "ID": {
            "type": "integer"
          },
          "PurchaseOrderLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.GetStockAvailabilityEstimateForProductsResponse_PurchaseOrderLine"
            }
          },
          "QuantityToShipOnOrder": {
            "type": "integer"
          },
          "ReservedOrderLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.GetStockAvailabilityEstimateForProductsResponse_ReservedOrderLine"
            }
          },
          "SalesOrderLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.GetStockAvailabilityEstimateForProductsResponse_SalesOrderLine"
            }
          },
          "ShopReplenishments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.GetStockAvailabilityEstimateForProductsResponse_ShopReplenishment"
            }
          },
          "WarehouseQuantityAvailable": {
            "type": "integer"
          },
          "WarehouseQuantityCommitted": {
            "type": "integer"
          },
          "WarehouseQuantityOnHand": {
            "type": "integer"
          },
          "WarehouseStock": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.GetStockAvailabilityEstimateForProductsResponse_WarehouseStock"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockAvailabilityEstimateForProductsResponse_PurchaseOrderLine": {
        "required": [
          "OrderID",
          "ID",
          "IsConfirmed",
          "Quantity",
          "IsOverdue",
          "RequestedDate",
          "QuantityAvailable"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "IsConfirmed": {
            "type": "boolean"
          },
          "IsOverdue": {
            "type": "boolean"
          },
          "OrderID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          },
          "QuantityAvailable": {
            "type": "integer"
          },
          "RequestedDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockAvailabilityEstimateForProductsResponse_ReservedOrderLine": {
        "required": [
          "OrderLineID",
          "OrderID",
          "QuantityReserved"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "QuantityReserved": {
            "type": "integer"
          },
          "ShopName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockAvailabilityEstimateForProductsResponse_SalesOrderLine": {
        "required": [
          "OrderType",
          "CommitmentStatus",
          "OrderLineID",
          "ExportStatus",
          "OrderID",
          "Quantity",
          "RequestedDate",
          "FulfillmentStatus"
        ],
        "type": "object",
        "properties": {
          "CommitmentDate": {
            "type": "string",
            "format": "date-time"
          },
          "CommitmentStatus": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderLineCommitmentStatus"
          },
          "ExportDate": {
            "type": "string",
            "format": "date-time"
          },
          "ExportStatus": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderExportStatuses"
          },
          "FulfillmentStatus": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderLineAvailabilityStatus"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "OrderType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrderTypes"
          },
          "Quantity": {
            "type": "integer"
          },
          "RequestedDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockAvailabilityEstimateForProductsResponse_ShopReplenishment": {
        "required": [
          "OrderLineID",
          "OrderID",
          "IsConfirmed",
          "Quantity",
          "RequestedDate"
        ],
        "type": "object",
        "properties": {
          "IsConfirmed": {
            "type": "boolean"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          },
          "RequestedDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockAvailabilityEstimateForProductsResponse_WarehouseStock": {
        "required": [
          "QuantityOnHand",
          "WarehouseID"
        ],
        "type": "object",
        "properties": {
          "QuantityOnHand": {
            "type": "integer"
          },
          "StockLabel": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "WarehouseID": {
            "type": "integer"
          },
          "WarehouseName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockAvailabilityTimeline": {
        "type": "object",
        "properties": {
          "FromDate": {
            "type": "string",
            "format": "date-time"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "ProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "ToDate": {
            "type": "string",
            "format": "date-time"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.Stock.AvailabilityTimelineItemTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockAvailabilityTimelineResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "TimelineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.GetStockAvailabilityTimelineResponse_TimelineItem"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockAvailabilityTimelineResponse_TimelineItem": {
        "required": [
          "Type",
          "CumulativeSumQuantityCommitted",
          "ProductID",
          "DeltaQuantityCommitted",
          "Date",
          "CumulativeSumQuantityAvailable",
          "CumulativeSumQuantityOnHand",
          "DeltaQuantityOnHand",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "CumulativeSumQuantityAvailable": {
            "type": "integer"
          },
          "CumulativeSumQuantityCommitted": {
            "type": "integer"
          },
          "CumulativeSumQuantityOnHand": {
            "type": "integer"
          },
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "DeltaQuantityCommitted": {
            "type": "integer"
          },
          "DeltaQuantityOnHand": {
            "type": "integer"
          },
          "OrderBackendID": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "OrganizationUnitName": {
            "type": "string"
          },
          "ProductID": {
            "type": "integer"
          },
          "RequestedDate": {
            "type": "string",
            "format": "date-time"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.Stock.AvailabilityTimelineItemTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockByStockLabelForProducts": {
        "required": [
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          },
          "ProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "StockLabelIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockByStockLabelForProductsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Stock": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EVA.Core.Stock.GetStockByStockLabelForProductsResponse_StockLabelStock"
              }
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockByStockLabelForProductsResponse_StockLabelStock": {
        "required": [
          "QuantityOnHand",
          "StockLabelID"
        ],
        "type": "object",
        "properties": {
          "QuantityOnHand": {
            "type": "integer"
          },
          "StockLabelID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockDetailsForProduct": {
        "required": [
          "ProductID"
        ],
        "type": "object",
        "properties": {
          "ProductID": {
            "type": "integer"
          },
          "ShowWarehousesForOrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockDetailsForProductResponse": {
        "required": [
          "SellableQuantityAvailable",
          "SellableStockInStoresWithinApplication",
          "PromisedDeliveryStatus",
          "QuantityOnHand"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "PromisedDeliveryDate": {
            "type": "string",
            "format": "date-time"
          },
          "PromisedDeliveryStatus": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ProductPromisedDeliveryStatuses"
          },
          "QuantityOnHand": {
            "type": "integer"
          },
          "SellableQuantityAvailable": {
            "type": "integer"
          },
          "SellableStockInStoresWithinApplication": {
            "type": "integer"
          },
          "SellableStockInWarehouses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.StockMutations.OrganizationUnitWithStock"
            }
          },
          "StockPerLabel": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockLabels": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockLabelsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "StockLabels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.GetStockLabelsResponse_StockLabelDto"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockLabelsResponse_StockLabelDto": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockNotification": {
        "required": [
          "ProductID",
          "EmailAddress",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.GetStockNotificationForCurrentUser": {
        "required": [
          "ProductID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.ListCommittedOrderLines": {
        "required": [
          "ProductID"
        ],
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.ListCommittedOrderLinesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Orders.CommittedOrderLine"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.ListStock": {
        "type": "object",
        "properties": {
          "InitialPageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageTokenConfig_1_EVA.Core.StockMutations.ListStockFilter"
          },
          "PageToken": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.ListStockMutations": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.StockMutations.ListStockMutationsFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.ListStockMutationsResponse": {
        "required": [
          "FullStockCountIsExternal",
          "FullStockCountInProgress"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "FullStockCountInProgress": {
            "type": "boolean"
          },
          "FullStockCountIsExternal": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.StockMutations.StockMutationDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.ListStockResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "NextPageToken": {
            "type": "string"
          },
          "PreviousPageToken": {
            "type": "string"
          },
          "Results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.ListStockResponse_ListStockItem"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.ListStockResponse_ListStockItem": {
        "required": [
          "QuantityOnHand",
          "QuantityCommitted"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Stock.ListStockResponse_ListStockItem_OrganizationUnitInfo"
          },
          "Product": {
            "$ref": "#/components/schemas/EVA.Core.Stock.ListStockResponse_ListStockItem_ProductInfo"
          },
          "QuantityCommitted": {
            "type": "integer"
          },
          "QuantityOnHand": {
            "type": "integer"
          },
          "StockLabel": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.ListStockResponse_ListStockItem_OrganizationUnitInfo": {
        "required": [
          "Type",
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnitTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.ListStockResponse_ListStockItem_ProductInfo": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "CustomID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.MoveCommitments": {
        "type": "object",
        "properties": {
          "Movements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.MoveCommitments_CommitmentMovement"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.MoveCommitments_CommitmentMovement": {
        "required": [
          "SourceOrderLineID",
          "DestinationOrderLineID"
        ],
        "type": "object",
        "properties": {
          "DestinationOrderLineID": {
            "type": "integer"
          },
          "SourceOrderLineID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.MoveStock": {
        "type": "object",
        "properties": {
          "BackendSystemID": {
            "type": "string"
          },
          "Movements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.MoveStock_Movement"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.MoveStock_Movement": {
        "required": [
          "Quantity",
          "SourceStockLabelID",
          "DestinationStockLabelID",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "DestinationStockLabelID": {
            "type": "integer"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "ProductBackendID": {
            "type": "string"
          },
          "ProductID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          },
          "Remark": {
            "type": "string"
          },
          "SourceStockLabelID": {
            "type": "integer"
          },
          "StockMutationReasonID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.ProcessStockMutationFile": {
        "required": [
          "FileBlobID",
          "IsFullStockMutationFile"
        ],
        "type": "object",
        "properties": {
          "BackendSystemID": {
            "type": "string",
            "description": "The `BackendSystemID` that belongs to the `ProductBackendID`s"
          },
          "EmailAddress": {
            "type": "string",
            "description": "An email address to mail the processing result to. When left empty, the logged in user context will be used"
          },
          "FileBlobID": {
            "type": "string",
            "format": "uuid"
          },
          "IsFullStockMutationFile": {
            "type": "boolean",
            "description": "If set to false (default), only the stock for the products that are present in the file will be updated (delta).\n\nIf set to true, all the products will be updated - products not present in the file will be updated to quantity 0."
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "StockLabelID": {
            "type": "integer"
          },
          "StockMutationReasonID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.ProductAvailabilityPickupOrganizationUnit": {
        "required": [
          "Type",
          "ID",
          "Status",
          "HasStock"
        ],
        "type": "object",
        "properties": {
          "Address": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDto"
          },
          "BackendID": {
            "type": "string"
          },
          "DistanceInKm": {
            "type": "number"
          },
          "EmailAddress": {
            "type": "string"
          },
          "HasStock": {
            "type": "boolean",
            "description": "HasStock will be true if the OrganizationUnit has stock for *all* requested products."
          },
          "ID": {
            "type": "integer"
          },
          "Latitude": {
            "type": "number"
          },
          "Longitude": {
            "type": "number"
          },
          "Name": {
            "type": "string"
          },
          "OpeningHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.ProductAvailabilityPickupOrganizationUnit_PickupOpeningHours"
            }
          },
          "PhoneNumber": {
            "type": "string"
          },
          "Products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.ProductAvailabilityPickupOrganizationUnit_PickupOrganizationProductQuantity"
            }
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrganizationUnitStatus"
          },
          "TimeZone": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnitTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.ProductAvailabilityPickupOrganizationUnit_PickupOpeningHours": {
        "required": [
          "Closed",
          "DayOfWeek"
        ],
        "type": "object",
        "properties": {
          "Closed": {
            "type": "boolean"
          },
          "ClosingTime": {
            "type": "string"
          },
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "DayOfWeek": {
            "$ref": "#/components/schemas/EVA.Core.DayOfWeek"
          },
          "OpeningTime": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.ProductAvailabilityPickupOrganizationUnit_PickupOrganizationProductQuantity": {
        "required": [
          "ProductID",
          "QuantityAvailable"
        ],
        "type": "object",
        "properties": {
          "ProductID": {
            "type": "integer"
          },
          "QuantityAvailable": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.ProductAvailabilityResult": {
        "required": [
          "ProductID",
          "ProductStatus"
        ],
        "type": "object",
        "properties": {
          "AvailabilityDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.ProductAvailabilityResult_ProductAvailabilityDetails"
            }
          },
          "BundleInformation": {
            "$ref": "#/components/schemas/EVA.Core.Stock.ProductAvailabilityResult_ProductAvailabilityResultBundleInformation"
          },
          "Delivery": {
            "$ref": "#/components/schemas/EVA.Core.Stock.ProductAvailabilityResult_DeliveryAvailabilityResult"
          },
          "Pickup": {
            "$ref": "#/components/schemas/EVA.Core.Stock.ProductAvailabilityResult_PickupAvailabilityResult"
          },
          "ProductID": {
            "type": "integer"
          },
          "ProductStatus": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ProductStatus"
          },
          "StockReplacementInformation": {
            "$ref": "#/components/schemas/EVA.Core.Stock.ProductAvailabilityResult_ProductStockReplacementInformation"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.ProductAvailabilityResult_DeliveryAvailabilityResult": {
        "required": [
          "IsAvailable",
          "HasStock"
        ],
        "type": "object",
        "properties": {
          "AvailabilityDate": {
            "type": "string",
            "format": "date-time"
          },
          "HasStock": {
            "type": "boolean",
            "description": "Indicates whether or not there is currently stock available for home-delivery."
          },
          "IsAvailable": {
            "type": "boolean"
          },
          "QuantityAvailable": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.ProductAvailabilityResult_PickupAvailabilityResult": {
        "required": [
          "IsAvailable",
          "HasStock"
        ],
        "type": "object",
        "properties": {
          "AvailabilityDate": {
            "type": "string",
            "format": "date-time"
          },
          "EstimatedPickupTime": {
            "type": "string",
            "format": "date-time"
          },
          "HasStock": {
            "type": "boolean",
            "description": "Indicates whether or not there is currently stock available for pick-up."
          },
          "IsAvailable": {
            "type": "boolean"
          },
          "QuantityAvailable": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.ProductAvailabilityResult_ProductAvailabilityDetails": {
        "required": [
          "SupplierQuantityOnHand",
          "OrdersWaitingForStockQuantity",
          "QuantityReservedForOtherOrganizationUnits",
          "SupplierQuantityCommitted",
          "QuantityOnHand",
          "QuantityCommitted",
          "QuantityAvailable",
          "SupplierQuantityAvailable"
        ],
        "type": "object",
        "properties": {
          "EffectiveQuantityAvailable": {
            "type": "integer",
            "description": "See EffectiveQuantityOnHand, but here the commitments are subtracted from the on hand stock. So if physical stock is 100, 80% is allocated to other organizations and there is a commitment of 11 then EffectiveQuantityAvailable will be 9."
          },
          "EffectiveQuantityOnHand": {
            "type": "integer",
            "description": "The quantity of the physical stock that is available to the OrganizationUnit for which this OrganizationUnit is a supplier.\n\nThis can differ from the QuantityOnHand when it comes to stock allocation. It's possible that the supplier reserves stock for certain other OrganizationUnits, meaning\nthat only a portion of the QuantityOnHand is available.\n\nExample: you request stock details for the website, which is supplied by the warehouse organization. There is a stock allocation rule that 80% of the warehouse stock\nis reserved to shops, so not available to the website. In that case, the website organization will have a stock detail with warehouse as a supplier and the stock detail\nfor the warehouse will (for example) have a QuantityOnHand of 100 but only an EffectiveQuantityOnHand of 20."
          },
          "ExpectedAvailabilityDate": {
            "type": "string",
            "description": "The date that this organization is expected to have stock.",
            "format": "date-time"
          },
          "ExpectedStock": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.ProductAvailabilityResult_ProductAvailabilityDetails_ExpectedStockItem"
            },
            "description": "The stock that is expected to be received in the future."
          },
          "ExpectedSupplierAvailabilityDate": {
            "type": "string",
            "description": "The earliest date that one of the suppliers of this organization has stock.",
            "format": "date-time"
          },
          "OrdersWaitingForStockQuantity": {
            "type": "integer",
            "description": "The total quantity of orders that are currently have a fulfillment status of WaitingForStock, meaning that they are waiting until stock becomes available on this OrganizationUnit."
          },
          "OrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Stock.ProductAvailabilityResult_ProductAvailabilityDetails_OrganizationUnitModel"
          },
          "QuantityAvailable": {
            "type": "integer",
            "description": "The quantity of stock that is still available for the OrganizationUnit, so the amount of physical stock minus its commitments."
          },
          "QuantityCommitted": {
            "type": "integer",
            "description": "The quantity that has been committed to this OrganizationUnit."
          },
          "QuantityOnHand": {
            "type": "integer",
            "description": "The quantity of stock that the OrganizationUnit physically has."
          },
          "QuantityReservedForOtherOrganizationUnits": {
            "type": "integer",
            "description": "The sum of all StockReservations, meaning the quantities that were reserved on this supplier for other organizations."
          },
          "StockReservations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.ProductAvailabilityResult_ProductAvailabilityDetails_StockReservation"
            },
            "description": "The stock that is reserved for other organizations that is not available to this organization."
          },
          "SupplierQuantityAvailable": {
            "type": "integer",
            "description": "The SupplierQuantityOnHand minus the SupplierQuantityCommitted"
          },
          "SupplierQuantityCommitted": {
            "type": "integer",
            "description": "The quantity committed on all suppliers of this organization"
          },
          "SupplierQuantityOnHand": {
            "type": "integer",
            "description": "The quantity that all suppliers have on hand as far as we know from the perspective of the organization that is supplied by them.\n\nThe actual supplier might have more stock physically on hand, but due to allocation rules this might not be available to this organization."
          },
          "Suppliers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.ProductAvailabilityResult_ProductAvailabilityDetails"
            },
            "description": "The suppliers for this organization."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.ProductAvailabilityResult_ProductAvailabilityDetails_ExpectedStockItem": {
        "required": [
          "OrderID",
          "ExpectedOnStockDate",
          "Quantity",
          "QuantityCommitted"
        ],
        "type": "object",
        "properties": {
          "ExpectedOnStockDate": {
            "type": "string",
            "description": "The date on which the stock is expected to be received.",
            "format": "date-time"
          },
          "OrderID": {
            "type": "integer",
            "description": "The OrderID that the expected stock is expected to be received on."
          },
          "Quantity": {
            "type": "integer",
            "description": "The quantity that is expected to be received."
          },
          "QuantityCommitted": {
            "type": "integer",
            "description": "How much of this expected stock is already spoken for by orders."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.ProductAvailabilityResult_ProductAvailabilityDetails_OrganizationUnitModel": {
        "required": [
          "Type",
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnitTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.ProductAvailabilityResult_ProductAvailabilityDetails_StockReservation": {
        "required": [
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "Quantity": {
            "type": "integer",
            "description": "The quantity that is reserved, so this is the quantity that is not available to our organization"
          },
          "ReservedForOrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.Stock.ProductAvailabilityResult_ProductAvailabilityDetails_OrganizationUnitModel"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.ProductAvailabilityResult_ProductAvailabilityResultBundleInformation": {
        "type": "object",
        "properties": {
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.ProductAvailabilityResult_ProductAvailabilityResultBundleInformation_ProductBundleLine"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.ProductAvailabilityResult_ProductAvailabilityResultBundleInformation_ProductBundleLine": {
        "required": [
          "Type",
          "ID"
        ],
        "type": "object",
        "properties": {
          "DefaultProductID": {
            "type": "integer"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "MaxSelectedOptionsCount": {
            "type": "integer"
          },
          "OptionProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ProductBundleLineTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.ProductAvailabilityResult_ProductStockReplacementInformation": {
        "type": "object",
        "properties": {
          "StockReplacementProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.ProductAvailabilityResult_ProductStockReplacementInformation_StockReplacementProduct"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.ProductAvailabilityResult_ProductStockReplacementInformation_StockReplacementProduct": {
        "required": [
          "ProductID"
        ],
        "type": "object",
        "properties": {
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.StockNotificationResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.UncommitOrderLines": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "OrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.UpdateStock": {
        "required": [
          "Products"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          },
          "Products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Stock.UpdateStock_ProductDto"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.UpdateStock_ProductDto": {
        "required": [
          "ID",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.UploadAndProcessStockExcelFile": {
        "required": [
          "Data",
          "IsFullStockMutationFile"
        ],
        "type": "object",
        "properties": {
          "BackendSystemID": {
            "type": "string",
            "description": "The `BackendSystemID` that belongs to the `ProductBackendID`s"
          },
          "Data": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string",
            "description": "An email address to mail the processing result to. When left empty, the logged in user context will be used"
          },
          "IsFullStockMutationFile": {
            "type": "boolean",
            "description": "If set to false (default), only the stock for the products that are present in the file will be updated (delta).\n\nIf set to true, all the products will be updated - products not present in the file will be updated to quantity 0."
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "StockLabelID": {
            "type": "integer"
          },
          "StockMutationReasonID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Stock.UploadAndProcessStockJSONFile": {
        "required": [
          "Data",
          "IsFullStockMutationFile"
        ],
        "type": "object",
        "properties": {
          "BackendSystemID": {
            "type": "string",
            "description": "The `BackendSystemID` that belongs to the `ProductBackendID`s"
          },
          "Data": {
            "type": "string",
            "description": "Should be a JSON formatted array of object with these 3 properties;\n\n- `ProductID` (optional, int)\n- `ProductBackendID` (optional, string)\n- `QuantityOnHand` (required, int, value >= 0)\n\nMutation will only be processed for valid ProductID's or ProductBackendID's. In case ProductID and ProductBackendID are provided,\nProductBackendID will be selected as the search parameter."
          },
          "EmailAddress": {
            "type": "string",
            "description": "An email address to mail the processing result to. When left empty, the logged in user context will be used"
          },
          "IsFullStockMutationFile": {
            "type": "boolean",
            "description": "If set to false (default), only the stock for the products that are present in the file will be updated (delta).\n\nIf set to true, all the products will be updated - products not present in the file will be updated to quantity 0."
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "StockLabelID": {
            "type": "integer"
          },
          "StockMutationReasonID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.StockMovementFollowUp.CompleteStockMovementFollowUp": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "Quantity": {
            "type": "integer",
            "description": "The quantity moved (optional, use in case of a deviation - defaults to the full original amount)"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.StockMovementFollowUp.StartStockMovementFollowUp": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.StockMovementFollowUp.StartStockMovementFollowUpResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "WorkSet": {
            "$ref": "#/components/schemas/EVA.Core.StockMovementFollowUp.StockMovementFollowUpWorkSet"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.StockMovementFollowUp.StockLabelDto": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.StockMovementFollowUp.StockMovementFollowUpWorkSet": {
        "required": [
          "ProductID",
          "UserTaskID",
          "Quantity",
          "StockMovementFollowUpTaskID"
        ],
        "type": "object",
        "properties": {
          "FromStockLabel": {
            "$ref": "#/components/schemas/EVA.Core.StockMovementFollowUp.StockLabelDto"
          },
          "Product": {
            "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
          },
          "ProductID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          },
          "StockMovementFollowUpTaskID": {
            "type": "integer"
          },
          "ToStockLabel": {
            "$ref": "#/components/schemas/EVA.Core.StockMovementFollowUp.StockLabelDto"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.StockMutations.ListStockFilter": {
        "type": "object",
        "properties": {
          "OrganizationUnitIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "ProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "StockLabelIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.StockMutations.ListStockMutationsFilter": {
        "type": "object",
        "properties": {
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "DestinationStockLabelID": {
            "type": "integer"
          },
          "EndDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "MutationQuantity": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "ReasonID": {
            "type": "integer"
          },
          "SourceStockLabelID": {
            "type": "integer"
          },
          "StartDateTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.StockMutations.OrganizationUnitWithStock": {
        "required": [
          "ID",
          "SellableStock"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "SellableStock": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.StockMutations.StockMutationDto": {
        "required": [
          "UnitCost",
          "ProductID",
          "MutationQuantity",
          "SourceStockLabel",
          "ID",
          "CreationTime",
          "DestinationStockLabel",
          "SourceStockLabelID",
          "AutomaticCorrectionQuantity",
          "DestinationStockLabelID",
          "ReasonID"
        ],
        "type": "object",
        "properties": {
          "AutomaticCorrectionQuantity": {
            "type": "integer"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "DestinationStockLabel": {
            "type": "integer"
          },
          "DestinationStockLabelID": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "MutationQuantity": {
            "type": "integer"
          },
          "OrderLine": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrderLineDto"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "OrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.Dto.OrganizationUnitDto"
          },
          "Product": {
            "$ref": "#/components/schemas/EVA.Core.Products.Dto.ProductDto"
          },
          "ProductID": {
            "type": "integer"
          },
          "Reason": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "ReasonID": {
            "type": "integer"
          },
          "Remark": {
            "type": "string"
          },
          "SourceStockLabel": {
            "type": "integer"
          },
          "SourceStockLabelID": {
            "type": "integer"
          },
          "UnitCost": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Suppliers.CreateOrganizationUnitSupplier": {
        "required": [
          "Target"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer",
            "description": "This will be the OrganizationUnit that will be supplied to by the supplier.\n\nIf neither OrganizationUnitID or OrganizationUnitSetID or OrganizationUnitIDs are specified then all children of the supplier are automatically supplied to."
          },
          "OrganizationUnitIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "These will be the OrganizationUnits that will be supplied to by the supplier.\n\nIf neither OrganizationUnitID or OrganizationUnitSetID or OrganizationUnitIDs are specified then all children of the supplier are automatically supplied to."
          },
          "OrganizationUnitSetID": {
            "type": "integer",
            "description": "The OrganizationUnits in this set will be the OrganizationUnits that will be supplied to by the supplier.\nAdding OrganizationUnits to this set in the future will not result in those OrganizationUnits being automatically added to this collection.\n\nIf neither OrganizationUnitID or OrganizationUnitSetID or OrganizationUnitIDs are specified then all children of the supplier are automatically supplied to."
          },
          "SupplierOrganizationUnitID": {
            "type": "integer",
            "description": "This will be the OrganizationUnit that becomes the supplier in this supplier relationship.\n\nEither SupplierOrganizationUnitID or SupplierOrganizationUnitSetID or SupplierOrganizationUnitIDs must be specified to be a valid request."
          },
          "SupplierOrganizationUnitIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "These will be the OrganizationUnits that becomes the suppliers in this supplier relationship.\n\nEither SupplierOrganizationUnitID or SupplierOrganizationUnitSetID or SupplierOrganizationUnitIDs must be specified to be a valid request."
          },
          "SupplierOrganizationUnitSetID": {
            "type": "integer",
            "description": "The OrganizationUnits in this set will be the OrganizationUnits that will be the suppliers\n\nEither SupplierOrganizationUnitID or SupplierOrganizationUnitSetID or SupplierOrganizationUnitIDs must be specified to be a valid request."
          },
          "Target": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrganizationUnitSupplierTargets"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Suppliers.CreateOrganizationUnitSupplierResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrganizationUnitSupplierIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Suppliers.DeleteOrganizationUnitSupplier": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Suppliers.GetSuppliersForOrganizationUnit": {
        "required": [
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Suppliers.GetSuppliersForOrganizationUnitResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Suppliers.GetSuppliersForOrganizationUnitResponse_Model"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Suppliers.GetSuppliersForOrganizationUnitResponse_Model": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Suppliers.ListOrganizationUnitSuppliers": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Suppliers.ListOrganizationUnitSuppliersFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Suppliers.ListOrganizationUnitSuppliersFilter": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "OrganizationUnitName": {
            "type": "string"
          },
          "SupplierOrganizationUnitID": {
            "type": "integer"
          },
          "SupplierOrganizationUnitName": {
            "type": "string"
          },
          "Target": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrganizationUnitSupplierTargets"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Suppliers.ListOrganizationUnitSuppliersModel": {
        "required": [
          "Target",
          "ID",
          "SupplierOrganizationUnitID",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "OrganizationUnitName": {
            "type": "string"
          },
          "SupplierOrganizationUnitID": {
            "type": "integer"
          },
          "SupplierOrganizationUnitName": {
            "type": "string"
          },
          "Target": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.OrganizationUnitSupplierTargets"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Suppliers.ListOrganizationUnitSuppliersResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Suppliers.ListOrganizationUnitSuppliersModel"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Suppliers.UpdateOrganizationUnitSupplier": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Target": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.SuspendedOrders.ListSuspendedOrders": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Orders.Suspended.ListSuspendedOrdersFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.SuspendedOrders.ListSuspendedOrdersResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.SuspendedOrders.ListSuspendedOrdersResponse_SuspendedOrderDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.SuspendedOrders.ListSuspendedOrdersResponse_SuspendedOrderDto": {
        "required": [
          "TotalAmount",
          "TotalAmountInTax",
          "SuspensionTime",
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "CurrencyID": {
            "type": "string"
          },
          "CustomerName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          },
          "SuspendedByName": {
            "type": "string"
          },
          "SuspensionTime": {
            "type": "string",
            "format": "date-time"
          },
          "TotalAmount": {
            "type": "number"
          },
          "TotalAmountInTax": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.SuspendedOrders.ResumeSuspendedOrder": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.SuspendedOrders.SuspendOrder": {
        "required": [
          "OrderID",
          "PrintReceipt"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          },
          "PrintReceipt": {
            "type": "boolean"
          },
          "StationID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Translations.DeleteEntityTranslation": {
        "required": [
          "EntityID",
          "EntityField",
          "LanguageID",
          "EntityType"
        ],
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "EntityField": {
            "type": "string"
          },
          "EntityID": {
            "type": "string"
          },
          "EntityType": {
            "type": "string"
          },
          "LanguageID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Translations.DeleteStringTranslation": {
        "required": [
          "LanguageID",
          "Key",
          "CountryID"
        ],
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "Key": {
            "type": "string"
          },
          "LanguageID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Translations.GetEntityTranslation": {
        "required": [
          "EntityID",
          "EntityField",
          "LanguageID",
          "EntityType"
        ],
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "EntityField": {
            "type": "string"
          },
          "EntityID": {
            "type": "string"
          },
          "EntityType": {
            "type": "string"
          },
          "LanguageID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Translations.GetEntityTranslationResponse": {
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "EntityField": {
            "type": "string"
          },
          "EntityID": {
            "type": "string"
          },
          "EntityType": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "LanguageID": {
            "type": "string"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Value": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Translations.GetStringTranslation": {
        "required": [
          "LanguageID",
          "Key",
          "CountryID"
        ],
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "Key": {
            "type": "string"
          },
          "LanguageID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Translations.GetStringTranslationResponse": {
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Key": {
            "type": "string"
          },
          "LanguageID": {
            "type": "string"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Value": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Translations.ListEntityTranslation": {
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "EntityField": {
            "type": "string"
          },
          "EntityID": {
            "type": "string"
          },
          "EntityType": {
            "type": "string"
          },
          "LanguageID": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Translations.ListEntityTranslations": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Translations.ListEntityTranslationsFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Translations.ListEntityTranslationsFilter": {
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "EntityField": {
            "type": "string"
          },
          "EntityID": {
            "type": "string"
          },
          "EntityType": {
            "type": "string"
          },
          "LanguageID": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Translations.ListEntityTranslationsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Translations.ListEntityTranslation"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Translations.ListStringTranslation": {
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "Key": {
            "type": "string"
          },
          "LanguageID": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Translations.ListStringTranslations": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Translations.ListStringTranslationsFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Translations.ListStringTranslationsFilter": {
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "Key": {
            "type": "string"
          },
          "LanguageID": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Translations.ListStringTranslationsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Translations.ListStringTranslation"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Translations.ReplaceEntityTranslation": {
        "required": [
          "Value",
          "EntityID",
          "EntityField",
          "LanguageID",
          "EntityType"
        ],
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "EntityField": {
            "type": "string",
            "description": "The name of the property you are translating, in case of translating the Description of a Discount this would be 'Description'"
          },
          "EntityID": {
            "type": "string",
            "description": "The Identifier of the object you are translating, in case of a Discount this would be the DiscountID"
          },
          "EntityType": {
            "type": "string",
            "description": "The name of the object you are translating, in case of a Discount this would be 'Discount'"
          },
          "LanguageID": {
            "type": "string"
          },
          "Value": {
            "type": "string",
            "description": "The translated value for the property you are translating"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Translations.ReplaceStringTranslation": {
        "required": [
          "Value",
          "LanguageID",
          "Key",
          "CountryID"
        ],
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "Key": {
            "type": "string"
          },
          "LanguageID": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Transpilation.VariableNode": {
        "type": "object",
        "properties": {
          "Children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Transpilation.VariableNode"
            }
          },
          "Description": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.TransputJobs.ListTransputJobs": {
        "type": "object",
        "properties": {
          "InitialPageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageTokenConfig_1_EVA.Core.TransputJobs.ListTransputJobsFilter"
          },
          "PageToken": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.TransputJobs.ListTransputJobsFilter": {
        "type": "object",
        "properties": {
          "CreationTimeBefore": {
            "type": "string",
            "format": "date-time"
          },
          "CreationTimeOnOrAfter": {
            "type": "string",
            "format": "date-time"
          },
          "EndTimeBefore": {
            "type": "string",
            "format": "date-time"
          },
          "EndTimeOnOrAfter": {
            "type": "string",
            "format": "date-time"
          },
          "FinancialPeriodID": {
            "type": "integer"
          },
          "Identifier": {
            "type": "string"
          },
          "InvoiceID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          },
          "ShipFromOrganizationUnit": {
            "type": "integer"
          },
          "ShipToOrganizationUnit": {
            "type": "integer"
          },
          "ShipmentID": {
            "type": "integer"
          },
          "StartTimeBefore": {
            "type": "string",
            "format": "date-time"
          },
          "StartTimeOnOrAfter": {
            "type": "string",
            "format": "date-time"
          },
          "Status": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "Types": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.TransputJobs.ListTransputJobsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "NextPageToken": {
            "type": "string"
          },
          "PreviousPageToken": {
            "type": "string"
          },
          "Results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.TransputJobs.TransputJobWithRelatedExportDataDto"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.TransputJobs.TransputJobDocument": {
        "required": [
          "CreationTime"
        ],
        "type": "object",
        "properties": {
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Document": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.TransputJobs.TransputJobWithRelatedExportDataDto": {
        "required": [
          "TypeID",
          "ID",
          "CreationTime",
          "Status"
        ],
        "type": "object",
        "properties": {
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "EndTime": {
            "type": "string",
            "format": "date-time"
          },
          "FinancialPeriodExportID": {
            "type": "integer"
          },
          "FinancialPeriodID": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "Identifier": {
            "type": "string"
          },
          "InvoiceExportID": {
            "type": "integer"
          },
          "InvoiceID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "OrderExportID": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          },
          "ShipFromOrganizationUnit": {
            "type": "integer"
          },
          "ShipToOrganizationUnit": {
            "type": "integer"
          },
          "ShipmentExportID": {
            "type": "integer"
          },
          "ShipmentID": {
            "type": "integer"
          },
          "StartTime": {
            "type": "string",
            "format": "date-time"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.TransputJobStatuses"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "TypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.Composite.CompositeUserTaskData": {
        "required": [
          "CompletedCount",
          "TotalCount"
        ],
        "type": "object",
        "properties": {
          "CompletedCount": {
            "type": "integer"
          },
          "TotalCount": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.Custom.Services.CompleteCustomUserTask": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "UserTaskID": {
            "type": "integer"
          },
          "Values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldValue"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.Custom.Services.CreateCustomUserTask": {
        "required": [
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "CustomUserTaskTemplateID": {
            "type": "integer",
            "description": "The template to create the usertask from"
          },
          "CustomUserTaskTypeID": {
            "type": "integer",
            "description": "The type of the custom usertask"
          },
          "Deadline": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string"
          },
          "Fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.UserTasks.Custom.UserTaskField"
            },
            "description": "Custom fields that will override the ones from the template"
          },
          "OrganizationUnitID": {
            "type": "integer",
            "description": "The organization unit to create this task for"
          },
          "Priority": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.Custom.Services.CreateCustomUserTaskResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.Custom.Services.CreateCustomUserTaskTemplate": {
        "required": [
          "TypeID"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Options": {
            "$ref": "#/components/schemas/EVA.Core.UserTasks.Custom.TaskOptions"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "TypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.Custom.Services.CreateCustomUserTaskTemplateResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.Custom.Services.CreateCustomUserTaskType": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.Custom.Services.CreateCustomUserTaskTypeResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.Custom.Services.DeleteCustomUserTaskTemplate": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.Custom.Services.GetCustomUserTaskData": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.Custom.Services.GetCustomUserTaskDataResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldValue"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.Custom.Services.ListCustomUserTaskTemplate": {
        "type": "object",
        "properties": {
          "InitialPageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageTokenConfig_1_EVA.Core.UserTasks.Custom.ListCustomUserTaskTemplateFilter"
          },
          "PageToken": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.Custom.Services.ListCustomUserTaskTemplateResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "NextPageToken": {
            "type": "string"
          },
          "PreviousPageToken": {
            "type": "string"
          },
          "Results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Types.Custom.Services.ListCustomUserTaskTemplateResponse_CustomUserTaskTemplate"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.Custom.Services.ListCustomUserTaskTemplateResponse_CustomUserTaskTemplate": {
        "required": [
          "TypeID"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Options": {
            "$ref": "#/components/schemas/EVA.Core.UserTasks.Custom.TaskOptions"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "TypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.Custom.Services.ListCustomUserTaskTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Types.Custom.Services.ListCustomUserTaskTypesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Types.Custom.Services.ListCustomUserTaskTypesResponse_CustomUserTaskType"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.Custom.Services.ListCustomUserTaskTypesResponse_CustomUserTaskType": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.Custom.Services.StartCustomUserTask": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.Custom.Services.StartCustomUserTaskResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.UserTasks.Custom.UserTaskField"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.Custom.Services.UpdateCustomUserTaskTemplate": {
        "required": [
          "TypeID",
          "ID"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Options": {
            "$ref": "#/components/schemas/EVA.Core.UserTasks.Custom.TaskOptions"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "TypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.Print.PrintUserTaskData": {
        "required": [
          "TypeID"
        ],
        "type": "object",
        "properties": {
          "TypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.Print.Services.CompletePrintTask": {
        "required": [
          "UserTaskID",
          "ManuallyPrinted"
        ],
        "type": "object",
        "properties": {
          "ManuallyPrinted": {
            "type": "boolean",
            "description": "Pass as `true` to skip \"NotYetPrinted\" check and force task completion without it."
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.Print.Services.CreatePrintTask": {
        "required": [
          "Type",
          "BlobID",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "BlobID": {
            "type": "string",
            "format": "uuid"
          },
          "Description": {
            "type": "string",
            "description": "Optional description for the generated UserTask"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.PrintTaskType"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.Print.Services.CreatePrintTaskResponse": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.Print.Services.ProcessPrintTasks": {
        "required": [
          "UserTaskIDs"
        ],
        "type": "object",
        "properties": {
          "StationID": {
            "type": "integer"
          },
          "UserTaskIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.Print.Services.ProcessPrintTasksResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "FailedUserTasks": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.Error"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.Print.Services.StartPrintTask": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.Print.Services.StartPrintTaskResponse": {
        "required": [
          "Type",
          "IsPrinted",
          "BlobID"
        ],
        "type": "object",
        "properties": {
          "BlobID": {
            "type": "string",
            "format": "uuid"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "IsPrinted": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.PrintTaskType"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.PrintPriceLabel.PrintPriceLabelUserTaskData": {
        "type": "object",
        "properties": {
          "Products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Types.PrintPriceLabel.PrintPriceLabelUserTaskDataProduct"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.PrintPriceLabel.PrintPriceLabelUserTaskDataProduct": {
        "required": [
          "ProductID",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "ProductID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.PrintPriceLabel.Services.CompletePrintPriceLabelTask": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.PrintPriceLabel.Services.CreatePrintPriceLabelTask": {
        "required": [
          "Products"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer",
            "description": "OrganizationUnitID (defaults to current OU)"
          },
          "Products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Types.PrintPriceLabel.Services.CreatePrintPriceLabelTask_PrintPriceLabelTaskProduct"
            },
            "description": "List of products to print price labels for"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.PrintPriceLabel.Services.CreatePrintPriceLabelTask_PrintPriceLabelTaskProduct": {
        "required": [
          "ProductID"
        ],
        "type": "object",
        "properties": {
          "ProductID": {
            "type": "integer",
            "description": "Product ID"
          },
          "Quantity": {
            "type": "integer",
            "description": "Quantity (defaults to 1)"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.PrintPriceLabel.Services.CreatePrintPriceLabelTaskResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Types.PrintPriceLabel.Services.CreatedPrintPriceLabelTask"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.PrintPriceLabel.Services.CreatedPrintPriceLabelTask": {
        "required": [
          "UserTaskID",
          "AlreadyExisted"
        ],
        "type": "object",
        "properties": {
          "AlreadyExisted": {
            "type": "boolean"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.PrintPriceLabel.Services.PrintPriceLabel": {
        "required": [
          "StationID"
        ],
        "type": "object",
        "properties": {
          "Products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Types.PrintPriceLabel.Services.PrintPriceLabel_ProductPrintRequest"
            }
          },
          "StationID": {
            "type": "integer"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.PrintPriceLabel.Services.PrintPriceLabel_ProductPrintRequest": {
        "required": [
          "ProductID"
        ],
        "type": "object",
        "properties": {
          "ProductID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.PrintPriceLabel.Services.PrintPriceLabelResponse": {
        "required": [
          "Success"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Success": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.PrintPriceLabel.Services.StartPrintPriceLabelTask": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.PrintPriceLabel.Services.StartPrintPriceLabelTaskResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Types.PrintPriceLabel.Services.StartPrintPriceLabelTaskResponse_PriceLabelProduct"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.PrintPriceLabel.Services.StartPrintPriceLabelTaskResponse_PriceLabelProduct": {
        "required": [
          "ProductID",
          "Quantity",
          "ProductUnitPriceInTax",
          "ProductUnitPrice"
        ],
        "type": "object",
        "properties": {
          "ProductBackendID": {
            "type": "string"
          },
          "ProductCustomID": {
            "type": "string"
          },
          "ProductDisplayValue": {
            "type": "string"
          },
          "ProductID": {
            "type": "integer"
          },
          "ProductOriginalUnitPrice": {
            "type": "number"
          },
          "ProductOriginalUnitPriceInTax": {
            "type": "number"
          },
          "ProductUnitPrice": {
            "type": "number"
          },
          "ProductUnitPriceInTax": {
            "type": "number"
          },
          "Quantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ReturnToSupplier.AddTrackingCodeToReturnToSupplierShipment": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "TrackingCode": {
            "type": "string"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ReturnToSupplier.CompleteReturnToSupplierTask": {
        "required": [
          "UserTaskID",
          "FinalizeReturnToSupplierOrder"
        ],
        "type": "object",
        "properties": {
          "FinalizeReturnToSupplierOrder": {
            "type": "boolean"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ReturnToSupplier.ListReturnToSupplierTaskOrderLineFilter": {
        "type": "object",
        "properties": {
          "ProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "ProductTypes": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ProductTypes"
          },
          "Query": {
            "type": "string"
          },
          "StockLabelID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ReturnToSupplier.ListReturnToSupplierTaskOrderLines": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Types.ReturnToSupplier.ListReturnToSupplierTaskOrderLineFilter"
          },
          "ProductProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ReturnToSupplier.ListReturnToSupplierTaskOrderLinesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Types.ReturnToSupplier.ReturnToSupplierTaskOrderLine"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ReturnToSupplier.ListReturnToSupplierTaskShipmentLines": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Types.ReturnToSupplier.ListReturnToSupplierTaskOrderLineFilter"
          },
          "ProductProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ReturnToSupplier.ListReturnToSupplierTaskShipmentLinesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Types.ReturnToSupplier.ReturnToSupplierTaskShipmentLine"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ReturnToSupplier.PrintReturnToSupplierTaskShipment": {
        "required": [
          "StationID",
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "StationID": {
            "type": "integer"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ReturnToSupplier.ReturnToSupplierTaskOrderLine": {
        "required": [
          "StockLabel",
          "OrderLineID",
          "ProductID",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "CustomID": {
            "type": "string"
          },
          "GroupID": {
            "type": "string",
            "format": "uuid"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "ParentID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "ProductName": {
            "type": "string"
          },
          "ProductProperties": {
            "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
          },
          "Quantity": {
            "type": "integer"
          },
          "StockLabel": {
            "type": "integer"
          },
          "UnitOfMeasures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Types.ReturnToSupplier.ReturnToSupplierTaskOrderLine_UnitOfMeasure"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ReturnToSupplier.ReturnToSupplierTaskOrderLine_UnitOfMeasure": {
        "required": [
          "Quantity",
          "UnitOfMeasureQuantity",
          "BaseQuantityTotal"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "BaseQuantityTotal": {
            "type": "integer"
          },
          "Description": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Quantity": {
            "type": "integer"
          },
          "UnitOfMeasureQuantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ReturnToSupplier.ReturnToSupplierTaskShipmentLine": {
        "required": [
          "StockLabel",
          "OrderLineID",
          "ProductID",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "CustomID": {
            "type": "string"
          },
          "GroupID": {
            "type": "string",
            "format": "uuid"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "ParentID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "ProductName": {
            "type": "string"
          },
          "ProductProperties": {
            "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
          },
          "Quantity": {
            "type": "integer"
          },
          "StockLabel": {
            "type": "integer"
          },
          "UnitOfMeasures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Types.ReturnToSupplier.ReturnToSupplierTaskShipmentLine_UnitOfMeasure"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ReturnToSupplier.ReturnToSupplierTaskShipmentLine_UnitOfMeasure": {
        "required": [
          "Quantity",
          "UnitOfMeasureQuantity",
          "BaseQuantityTotal"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "BaseQuantityTotal": {
            "type": "integer"
          },
          "Description": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Quantity": {
            "type": "integer"
          },
          "UnitOfMeasureQuantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ReturnToSupplier.ReturnToSupplierUserTaskData": {
        "required": [
          "OrderID",
          "HasMarkedProducts",
          "UseExcludePolicyOnReturnToSupplierShipment",
          "IsSingularReturnToSupplierTask"
        ],
        "type": "object",
        "properties": {
          "Count": {
            "type": "integer"
          },
          "HasMarkedProducts": {
            "type": "boolean"
          },
          "IsSingularReturnToSupplierTask": {
            "type": "boolean"
          },
          "OrderID": {
            "type": "integer"
          },
          "ProductMarkerValue": {
            "type": "string"
          },
          "Quantity": {
            "type": "integer"
          },
          "ShipmentID": {
            "type": "integer"
          },
          "TrackingCode": {
            "type": "string"
          },
          "UseExcludePolicyOnReturnToSupplierShipment": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ReturnToSupplier.SetLineForReturnToSupplierShipment": {
        "required": [
          "UserTaskID",
          "Quantity",
          "Exclude"
        ],
        "type": "object",
        "properties": {
          "Exclude": {
            "type": "boolean"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ReturnToSupplier.StartReturnToSupplierResponse": {
        "required": [
          "HasAdditionalActiveTasks",
          "UseExcludePolicyOnReturnToSupplierShipment"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "HasAdditionalActiveTasks": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "UseExcludePolicyOnReturnToSupplierShipment": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ReturnToSupplier.StartReturnToSupplierTask": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ShipFromStore.Services.CompleteShipFromStoreTask": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "PickedOrderLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Types.ShipFromStore.Services.CompleteShipFromStoreTask_PickedOrderLine"
            },
            "description": "Optional for subtype Pick"
          },
          "Shipments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Types.ShipFromStore.Services.CompleteShipFromStoreTask_Shipment"
            },
            "description": "Optional for subtype Ship"
          },
          "ShouldBePrinting": {
            "type": "boolean",
            "description": "If you want to override printing behavior - will default to the `ShouldBePrinting` value from `StartShipFromStoreTask`"
          },
          "StationID": {
            "type": "integer",
            "description": "Required for subtypes Pick and Ship"
          },
          "UnpickedLinesReasonID": {
            "type": "integer",
            "description": "The reason why not all lines might be picked"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ShipFromStore.Services.CompleteShipFromStoreTask_PickedOrderLine": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer",
            "description": "Assuming original `ProductID` when omitted - useful when using a replacement product"
          },
          "Quantity": {
            "type": "integer",
            "description": "Assuming full quantity when omitted - useful for partial picks or replacement products"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ShipFromStore.Services.CompleteShipFromStoreTask_Shipment": {
        "type": "object",
        "properties": {
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Types.ShipFromStore.Services.CompleteShipFromStoreTask_ShipmentLine"
            }
          },
          "Packages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Types.ShipFromStore.Services.CompleteShipFromStoreTask_ShipmentPackage"
            }
          },
          "ShippingMethodID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ShipFromStore.Services.CompleteShipFromStoreTask_ShipmentLine": {
        "required": [
          "OrderLineID",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ShipFromStore.Services.CompleteShipFromStoreTask_ShipmentPackage": {
        "required": [
          "PackageID"
        ],
        "type": "object",
        "properties": {
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Types.ShipFromStore.Services.CompleteShipFromStoreTask_ShipmentLine"
            }
          },
          "PackageID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ShipFromStore.Services.CompleteShipFromStoreTaskResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Next": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Types.ShipFromStore.Services.NextUserTaskDto"
            }
          },
          "ShipmentIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ShipFromStore.Services.DeterminationType": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Types.ShipFromStore.Services.GetShipFromStoreTaskByBarcode": {
        "required": [
          "DeterminationType",
          "Barcode"
        ],
        "type": "object",
        "properties": {
          "Barcode": {
            "type": "string"
          },
          "DeterminationType": {
            "$ref": "#/components/schemas/EVA.Core.Types.ShipFromStore.Services.DeterminationType"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ShipFromStore.Services.GetShipFromStoreTaskByBarcodeResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrderID": {
            "type": "integer"
          },
          "ParentID": {
            "type": "integer"
          },
          "UserFullName": {
            "type": "string"
          },
          "UserID": {
            "type": "integer"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ShipFromStore.Services.NextUserTaskDto": {
        "required": [
          "ID",
          "Priority"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "ParentID": {
            "type": "integer"
          },
          "Priority": {
            "type": "integer"
          },
          "SubType": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.UserTasks.Dto.UserTaskTypeDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ShipFromStore.Services.PrintShipFromStoreTasks": {
        "required": [
          "UserTaskIDs"
        ],
        "type": "object",
        "properties": {
          "ProductProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "UserTaskIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ShipFromStore.Services.StartShipFromStoreTask": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "ProductProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ShipFromStore.Services.StartShipFromStoreTaskResponse": {
        "required": [
          "ShouldBePrinting",
          "OrderID",
          "UserTaskID",
          "PreferredPriceDisplayMode"
        ],
        "type": "object",
        "properties": {
          "Data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EVA.Core.UserTasks.SecondChanceProductRegistrationUserTask.SecondChanceProductRegistrationUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.UserTasks.FullStockCountUserTask.FullStockCountLabelUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.UserTasks.FullStockCountUserTask.FullStockCountUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.UserTasks.Custom.CustomUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Types.ZonedCycleCounts.ZonedCycleCountPreCountUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Types.ZonedCycleCounts.ZonedCycleCountUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Types.StockReservation.ReservationCleanupUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Types.StockReservation.ReservationDeviationUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Types.StockReservation.StockReservationUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Types.StockReplenishment.StockReplenishmentUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Types.StockMovementFollowUp.StockMovementFollowUpUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Types.ShipFromStore.ShipFromStoreUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Types.ShipFromStore.ShipFromStorePrintUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Types.ReturnToSupplier.ReturnToSupplierUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Types.PrintPriceLabel.PrintPriceLabelUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Types.Print.PrintUserTaskData"
              },
              {
                "$ref": "#/components/schemas/EVA.Core.Types.Composite.CompositeUserTaskData"
              }
            ]
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "GiftWrappingOptions": {
            "$ref": "#/components/schemas/EVA.Core.Types.ShipFromStore.Services.StartShipFromStoreTaskResponse_ShipFromStoreGiftWrappingOptions"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Types.ShipFromStore.Services.StartShipFromStoreTaskResponse_ShipFromStoreLine"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrderID": {
            "type": "integer"
          },
          "PreferredPriceDisplayMode": {
            "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrderPreferredPriceDisplayMode"
          },
          "ServiceLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Types.ShipFromStore.Services.StartShipFromStoreTaskResponse_ShipFromStoreLine"
            }
          },
          "ShipmentID": {
            "type": "integer"
          },
          "ShouldBePrinting": {
            "type": "boolean"
          },
          "SubTypeName": {
            "type": "string"
          },
          "TravelDistanceInMeters": {
            "type": "number"
          },
          "TravelDistanceText": {
            "type": "string"
          },
          "TravelTimeInSeconds": {
            "type": "number"
          },
          "TravelTimeText": {
            "type": "string"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ShipFromStore.Services.StartShipFromStoreTaskResponse_ShipFromStoreGiftWrap": {
        "type": "object",
        "properties": {
          "GreetingCardProductID": {
            "type": "integer"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Types.ShipFromStore.Services.StartShipFromStoreTaskResponse_ShipFromStoreWrapLine"
            }
          },
          "Message": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ShipFromStore.Services.StartShipFromStoreTaskResponse_ShipFromStoreGiftWrappingOptions": {
        "type": "object",
        "properties": {
          "GiftWraps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Types.ShipFromStore.Services.StartShipFromStoreTaskResponse_ShipFromStoreGiftWrap"
            }
          },
          "GreetingCardProductID": {
            "type": "integer"
          },
          "Message": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ShipFromStore.Services.StartShipFromStoreTaskResponse_ShipFromStoreLine": {
        "required": [
          "TotalAmount",
          "TotalAmountInTax",
          "OrderLineID",
          "Quantity",
          "NetTotalAmount",
          "NetTotalAmountInTax"
        ],
        "type": "object",
        "properties": {
          "ChildLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Types.ShipFromStore.Services.StartShipFromStoreTaskResponse_ShipFromStoreLine"
            },
            "description": "The child lines for this line"
          },
          "GroupID": {
            "type": "string",
            "format": "uuid"
          },
          "NetTotalAmount": {
            "type": "number",
            "description": "The TotalAmount with the Discounts for this line included"
          },
          "NetTotalAmountInTax": {
            "type": "number",
            "description": "The TotalAmountInTax with the Discounts for this line included"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "ParentID": {
            "type": "integer"
          },
          "ProductBundleLineID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "Properties": {
            "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
          },
          "Quantity": {
            "type": "integer"
          },
          "ReplacementProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "Requirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Types.ShipFromStore.Services.StartShipFromStoreTaskResponse_ShipFromStoreLineProductRequirement"
            },
            "description": "The product requirements for this line"
          },
          "TotalAmount": {
            "type": "number",
            "description": "The TotalAmount of this line: Quantity * UnitPrice"
          },
          "TotalAmountInTax": {
            "type": "number",
            "description": "The TotalAmountInTax of this line: Quantity * UnitPrice + Taxes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ShipFromStore.Services.StartShipFromStoreTaskResponse_ShipFromStoreLineProductRequirement": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Value": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ShipFromStore.Services.StartShipFromStoreTaskResponse_ShipFromStoreWrapLine": {
        "required": [
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "Line": {
            "$ref": "#/components/schemas/EVA.Core.Types.ShipFromStore.Services.StartShipFromStoreTaskResponse_ShipFromStoreLine"
          },
          "Quantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ShipFromStore.ShipFromStorePrintUserTaskData": {
        "required": [
          "IsReady",
          "IsError"
        ],
        "type": "object",
        "properties": {
          "Blobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Blobs.Services.BlobDto"
            }
          },
          "Error": {
            "type": "string"
          },
          "IsError": {
            "type": "boolean"
          },
          "IsReady": {
            "type": "boolean"
          },
          "OrderID": {
            "type": "integer"
          },
          "ShipmentID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ShipFromStore.ShipFromStoreUserTaskData": {
        "required": [
          "HasMarkedProducts"
        ],
        "type": "object",
        "properties": {
          "Count": {
            "type": "integer"
          },
          "HasMarkedProducts": {
            "type": "boolean"
          },
          "OrderID": {
            "type": "integer"
          },
          "ProductMarkerValue": {
            "type": "string"
          },
          "Quantity": {
            "type": "integer"
          },
          "TravelDistanceInMeters": {
            "type": "number"
          },
          "TravelDistanceText": {
            "type": "string"
          },
          "TravelTimeInSeconds": {
            "type": "number"
          },
          "TravelTimeText": {
            "type": "string"
          },
          "productIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.StockMovementFollowUp.StockMovementFollowUpUserTaskData": {
        "required": [
          "ProductID"
        ],
        "type": "object",
        "properties": {
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.StockReplenishment.StockReplenishmentUserTaskData": {
        "required": [
          "Type",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "ExpireDate": {
            "type": "string",
            "format": "date-time"
          },
          "Originator": {
            "type": "string"
          },
          "Product": {
            "type": "object"
          },
          "Quantity": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.StockReplenishmentType"
          },
          "Zone": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.StockReservation.ReservationCleanupUserTaskData": {
        "required": [
          "Type",
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ReservationCleanupTaskTypes"
          },
          "productIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.StockReservation.ReservationDeviationUserTaskData": {
        "required": [
          "ProductID"
        ],
        "type": "object",
        "properties": {
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.StockReservation.StockReservationUserTaskData": {
        "required": [
          "OrderID",
          "HasMarkedProducts"
        ],
        "type": "object",
        "properties": {
          "Count": {
            "type": "integer"
          },
          "HasMarkedProducts": {
            "type": "boolean"
          },
          "OrderID": {
            "type": "integer"
          },
          "ProductMarkerValue": {
            "type": "string"
          },
          "Quantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ValueAddedLogistics.Services.CompleteValueAddedLogisticTask": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ValueAddedLogistics.Services.GetValueAddedLogisticTasks": {
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "OrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ValueAddedLogistics.Services.GetValueAddedLogisticTasksResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrderLineTasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Types.ValueAddedLogistics.Services.GetValueAddedLogisticTasksResponse_Model"
            }
          },
          "OrderTasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Types.ValueAddedLogistics.Services.GetValueAddedLogisticTasksResponse_Model"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ValueAddedLogistics.Services.GetValueAddedLogisticTasksResponse_Model": {
        "required": [
          "UserTaskID"
        ],
        "type": "object",
        "properties": {
          "Data": {
            "type": "object"
          },
          "Description": {
            "type": "string"
          },
          "OrderLineID": {
            "type": "integer"
          },
          "Type": {
            "type": "string"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ZonedCycleCounts.ZonedCycleCountPreCountUserTaskData": {
        "required": [
          "ProductID",
          "CycleCountZoneID"
        ],
        "type": "object",
        "properties": {
          "CycleCountZoneID": {
            "type": "integer"
          },
          "CycleCountZoneName": {
            "type": "string"
          },
          "OriginID": {
            "type": "integer"
          },
          "OriginTypeID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Types.ZonedCycleCounts.ZonedCycleCountUserTaskData": {
        "required": [
          "ProductID",
          "Progress"
        ],
        "type": "object",
        "properties": {
          "DisplayValue": {
            "type": "string"
          },
          "Origin": {
            "type": "string"
          },
          "OriginID": {
            "type": "integer"
          },
          "OriginTypeID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "Progress": {
            "type": "number"
          },
          "ZonedCycleCountID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserBorrowedProducts.ListUserBorrowedProductsFilter": {
        "type": "object",
        "properties": {
          "ProductID": {
            "type": "integer"
          },
          "State": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.BorrowedState"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserInteractions.CreateUserInteraction": {
        "required": [
          "Text"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "Text": {
            "type": "string"
          },
          "UserID": {
            "type": "integer"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserInteractions.CreateUserInteractionResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserInteractions.DeleteUserInteraction": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserInteractions.GetUserInteractionByID": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserInteractions.GetUserInteractionByIDResponse": {
        "required": [
          "Type",
          "CreatedByID",
          "UserID",
          "ID",
          "CreationTime"
        ],
        "type": "object",
        "properties": {
          "CreatedBy": {
            "$ref": "#/components/schemas/EVA.Core.UserInteractions.GetUserInteractionByIDResponse_UserDto"
          },
          "CreatedByID": {
            "type": "integer"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "LastModifiedBy": {
            "$ref": "#/components/schemas/EVA.Core.UserInteractions.GetUserInteractionByIDResponse_UserDto"
          },
          "LastModifiedByID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrderID": {
            "type": "integer"
          },
          "OriginalUserInteractionID": {
            "type": "integer"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.UserInteractions.UserInteractionTypes"
          },
          "User": {
            "$ref": "#/components/schemas/EVA.Core.UserInteractions.GetUserInteractionByIDResponse_UserDto"
          },
          "UserID": {
            "type": "integer"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserInteractions.GetUserInteractionByIDResponse_UserDto": {
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "FullName": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserInteractions.ListUserInteractions": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.UserInteractions.ListUserInteractionsFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserInteractions.ListUserInteractionsFilter": {
        "type": "object",
        "properties": {
          "IncludeResends": {
            "type": "boolean"
          },
          "OrderID": {
            "type": "integer"
          },
          "Text": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.UserInteractions.UserInteractionTypes"
          },
          "UserID": {
            "type": "integer"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserInteractions.ListUserInteractionsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.UserInteractions.ListUserInteractionsResponse_UserInteractionDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserInteractions.ListUserInteractionsResponse_UserInteractionDto": {
        "required": [
          "Type",
          "CreatedByID",
          "UserID",
          "ID",
          "CreationTime"
        ],
        "type": "object",
        "properties": {
          "CreatedBy": {
            "$ref": "#/components/schemas/EVA.Core.UserInteractions.ListUserInteractionsResponse_UserInteractionDto_UserDto"
          },
          "CreatedByID": {
            "type": "integer"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer"
          },
          "LastModifiedBy": {
            "$ref": "#/components/schemas/EVA.Core.UserInteractions.ListUserInteractionsResponse_UserInteractionDto_UserDto"
          },
          "LastModifiedByID": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          },
          "OriginalUserInteraction": {
            "$ref": "#/components/schemas/EVA.Core.UserInteractions.ListUserInteractionsResponse_UserInteractionDto"
          },
          "Subject": {
            "type": "string"
          },
          "Text": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.UserInteractions.UserInteractionTypes"
          },
          "User": {
            "$ref": "#/components/schemas/EVA.Core.UserInteractions.ListUserInteractionsResponse_UserInteractionDto_UserDto"
          },
          "UserID": {
            "type": "integer"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserInteractions.ListUserInteractionsResponse_UserInteractionDto_UserDto": {
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "FullName": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserInteractions.PreviewUserInteractionCommunication": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserInteractions.PreviewUserInteractionCommunicationResponse": {
        "required": [
          "Content"
        ],
        "type": "object",
        "properties": {
          "Attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.UserInteractions.PreviewUserInteractionCommunicationResponse_Attachment"
            }
          },
          "Content": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "FromAddress": {
            "type": "string"
          },
          "FromName": {
            "type": "string"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ToAddress": {
            "type": "string"
          },
          "ToName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserInteractions.PreviewUserInteractionCommunicationResponse_Attachment": {
        "type": "object",
        "properties": {
          "MediaType": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Url": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserInteractions.PushUserInteractionContent": {
        "required": [
          "ToEmailAddress",
          "ID",
          "BodyHTML",
          "Subject",
          "FromEmailAddress"
        ],
        "type": "object",
        "properties": {
          "BodyHTML": {
            "type": "string"
          },
          "FromEmailAddress": {
            "type": "string"
          },
          "FromName": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Subject": {
            "type": "string"
          },
          "ToEmailAddress": {
            "type": "string"
          },
          "ToName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserInteractions.ResendUserInteractionCommunication": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Text": {
            "type": "string",
            "description": "Optional note to indicate the reason for the resend."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserInteractions.UpdateUserInteraction": {
        "required": [
          "Text",
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "OrderID": {
            "type": "integer"
          },
          "Text": {
            "type": "string"
          },
          "UserID": {
            "type": "integer"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserInteractions.UserInteractionTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.UserTaskTypes.StockReservation.OrderLineToCancel": {
        "required": [
          "OrderLineID",
          "QuantityToCancel"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "QuantityToCancel": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTaskTypes.StockReservation.OrderLineToOrder": {
        "required": [
          "OrderLineID",
          "QuantityToOrder"
        ],
        "type": "object",
        "properties": {
          "OrderLineID": {
            "type": "integer"
          },
          "QuantityToOrder": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTaskTypes.StockReservation.ReservationDeviationWorkSet": {
        "required": [
          "QuantityToCancel",
          "ProductID",
          "QuantityToMoveToSellable",
          "TaskID",
          "QuantityMovedBack"
        ],
        "type": "object",
        "properties": {
          "OrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "OrderLinesToCancel": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.UserTaskTypes.StockReservation.OrderLineToCancel"
            }
          },
          "OrderLinesToOrder": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.UserTaskTypes.StockReservation.OrderLineToOrder"
            }
          },
          "Orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Orders.Dto.OrderDto"
            }
          },
          "Product": {
            "$ref": "#/components/schemas/EVA.Core.Products.Dto.ProductDto"
          },
          "ProductID": {
            "type": "integer"
          },
          "QuantityMovedBack": {
            "type": "integer"
          },
          "QuantityToCancel": {
            "type": "integer"
          },
          "QuantityToMoveToSellable": {
            "type": "integer"
          },
          "TaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTaskTypes.StockReservation.Services.CompleteReservationDeviationTask": {
        "type": "object",
        "properties": {
          "WorkSet": {
            "$ref": "#/components/schemas/EVA.Core.UserTaskTypes.StockReservation.ReservationDeviationWorkSet"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTaskTypes.StockReservation.Services.CompleteReservationDeviationTaskResponse": {
        "required": [
          "Retry"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Retry": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTaskTypes.StockReservation.Services.StartReservationDeviationTask": {
        "required": [
          "TaskID",
          "Force"
        ],
        "type": "object",
        "properties": {
          "Force": {
            "type": "boolean"
          },
          "TaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTaskTypes.StockReservation.Services.StartReservationDeviationTaskResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "WorkSet": {
            "$ref": "#/components/schemas/EVA.Core.UserTaskTypes.StockReservation.ReservationDeviationWorkSet"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.Custom.CustomUserTaskData": {
        "type": "object",
        "properties": {
          "CustomData": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldData"
          },
          "Fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.UserTasks.Custom.UserTaskField"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.Custom.TaskOptions": {
        "required": [
          "DefaultPriority"
        ],
        "type": "object",
        "properties": {
          "DefaultDeadlineMinutes": {
            "type": "integer"
          },
          "DefaultPriority": {
            "type": "integer"
          },
          "Fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.UserTasks.Custom.UserTaskField"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.Custom.UserTaskField": {
        "required": [
          "IsRequired"
        ],
        "type": "object",
        "properties": {
          "CustomFieldID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "IsRequired": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.Dto.UserTaskDto": {
        "required": [
          "IsActive",
          "ID",
          "CreationTime",
          "Priority",
          "IsCompleted",
          "HasUrgency",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "CompletionTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "DeactivationReason": {
            "$ref": "#/components/schemas/EVA.Core.API.EnumDto"
          },
          "Deadline": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string"
          },
          "ExpectedCompletionTime": {
            "type": "string",
            "format": "date-time"
          },
          "ExpectedStartTime": {
            "type": "string",
            "format": "date-time"
          },
          "ExpectedTimeToComplete": {
            "type": "string"
          },
          "FinancialPeriod": {
            "$ref": "#/components/schemas/EVA.Core.Finance.Dto.FinancialPeriodDto"
          },
          "FinancialPeriodID": {
            "type": "integer"
          },
          "HasUrgency": {
            "type": "boolean"
          },
          "ID": {
            "type": "integer"
          },
          "IsActive": {
            "type": "boolean"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "OrganizationUnit": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.Dto.OrganizationUnitDto"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "Priority": {
            "type": "integer"
          },
          "Results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.UserTasks.Dto.UserTaskDto_Result"
            }
          },
          "StartTime": {
            "type": "string",
            "format": "date-time"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.UserTasks.Dto.UserTaskTypeDto"
          },
          "User": {
            "$ref": "#/components/schemas/EVA.Core.Users.UserDto"
          },
          "UserFullname": {
            "type": "string"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.Dto.UserTaskDto_Result": {
        "type": "object",
        "properties": {
          "Data": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.Dto.UserTaskPriorityDto": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "From": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "LanguageID": {
            "type": "string"
          },
          "Name": {
            "type": "string",
            "description": "Usually an internal & unchangable code - for display, use `Description`"
          },
          "To": {
            "type": "integer"
          },
          "UserTaskSubTypeID": {
            "type": "integer"
          },
          "UserTaskTypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.Dto.UserTaskTypeDto": {
        "required": [
          "ID",
          "DefaultRequired",
          "DefaultPriority"
        ],
        "type": "object",
        "properties": {
          "DefaultPriority": {
            "type": "integer"
          },
          "DefaultRequired": {
            "type": "boolean"
          },
          "Description": {
            "type": "string"
          },
          "ExpectedTimeToComplete": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string",
            "description": "Usually an internal & unchangable code - for display, use `Description`"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.Dto.UserTaskTypeOrganizationUnitSetDto": {
        "required": [
          "OrganizationUnitSetID",
          "ID",
          "IgnoreForPeriodClosing",
          "Required",
          "UserTaskTypeID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "IgnoreForPeriodClosing": {
            "type": "boolean"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "Required": {
            "type": "boolean"
          },
          "UserTaskTypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.FullStockCountUserTask.FullStockCountLabelUserTaskData": {
        "required": [
          "ID",
          "IsRecount",
          "FullStockCountID",
          "StockLabelID"
        ],
        "type": "object",
        "properties": {
          "FullStockCountID": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "IsRecount": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          },
          "StockLabelID": {
            "type": "integer"
          },
          "StockLabelName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.FullStockCountUserTask.FullStockCountResult": {
        "required": [
          "ProductID",
          "Quantity",
          "StockLabelID",
          "FullStockCountLabelID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "FullStockCountLabelID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "ProductID": {
            "type": "integer"
          },
          "Properties": {
            "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
          },
          "Quantity": {
            "type": "integer"
          },
          "RecountQuantity": {
            "type": "integer"
          },
          "RecountUserFullName": {
            "type": "string"
          },
          "RecountUserID": {
            "type": "integer"
          },
          "StockLabelID": {
            "type": "integer"
          },
          "StockLabelName": {
            "type": "string"
          },
          "UserFullName": {
            "type": "string"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.FullStockCountUserTask.FullStockCountSummaryRecord": {
        "required": [
          "AbsoluteDeviationQuantity",
          "StockMutationQuantity",
          "DeviationQuantity",
          "ProductID",
          "CountQuantity",
          "CycleCountCreated",
          "DeviationAmount",
          "AbsoluteDeviationAmount",
          "StockLabelID",
          "CurrentQuantity"
        ],
        "type": "object",
        "properties": {
          "AbsoluteDeviationAmount": {
            "type": "number"
          },
          "AbsoluteDeviationQuantity": {
            "type": "integer"
          },
          "BackendID": {
            "type": "string"
          },
          "CountQuantity": {
            "type": "integer"
          },
          "CurrentQuantity": {
            "type": "integer"
          },
          "CustomID": {
            "type": "string"
          },
          "CycleCountCountResult": {
            "type": "integer"
          },
          "CycleCountCreated": {
            "type": "boolean"
          },
          "DeviationAmount": {
            "type": "number"
          },
          "DeviationQuantity": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "Properties": {
            "$ref": "#/components/schemas/EVA.Core.Search.IProductSearchItem"
          },
          "StockLabelID": {
            "type": "integer"
          },
          "StockLabelName": {
            "type": "string"
          },
          "StockMutationQuantity": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.FullStockCountUserTask.FullStockCountUserTaskData": {
        "required": [
          "AllowStockMutationsDuringCount",
          "IsExternal",
          "IsReady",
          "Progress"
        ],
        "type": "object",
        "properties": {
          "AllowStockMutationsDuringCount": {
            "type": "boolean"
          },
          "IsExternal": {
            "type": "boolean"
          },
          "IsReady": {
            "type": "boolean"
          },
          "Progress": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.FullStockCountUserTask.ListFullStockCountLabelProductsFilter": {
        "type": "object",
        "properties": {
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.FullStockCountUserTask.ListFullStockCountLabelSummaryFilter": {
        "type": "object",
        "properties": {
          "FullStockCountLabelID": {
            "type": "integer"
          },
          "FullStockCountLabelName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.FullStockCountUserTask.ListFullStockCountLabelsFilter": {
        "type": "object",
        "properties": {
          "Completed": {
            "type": "boolean",
            "description": "When omitted, all FullStockCountLabels are returned.\nWhen false, only uncompleted FullStockCountLabels are returned.\nWhen true, only completed or cancelled FullStockCountLabels are returned."
          },
          "StockLabelID": {
            "type": "integer"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.FullStockCountUserTask.ListFullStockCountResultFilter": {
        "required": [
          "OnlyShowDeviations"
        ],
        "type": "object",
        "properties": {
          "OnlyShowDeviations": {
            "type": "boolean"
          },
          "ProductID": {
            "type": "integer"
          },
          "ProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "StockLabelID": {
            "type": "integer"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.FullStockCountUserTask.ListFullStockCountSummaryFilter": {
        "required": [
          "OnlyShowWithStockMutations",
          "OnlyShowDeviations"
        ],
        "type": "object",
        "properties": {
          "OnlyShowDeviations": {
            "type": "boolean"
          },
          "OnlyShowWithStockMutations": {
            "type": "boolean"
          },
          "ProductFilters": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.Search.FilterModel"
            }
          },
          "ProductID": {
            "type": "integer"
          },
          "ProductIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "StockLabelID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.FullStockCountUserTask.ListFullStockCountSummaryResponse": {
        "required": [
          "CreatedBy",
          "AllowStockMutationsDuringCount",
          "TotalNegativeDeviationAmount",
          "IsExternal",
          "FinalSummaryValues",
          "CreationTime",
          "TotalProducts",
          "TotalPositiveDeviationAmount",
          "Progress",
          "IsCompleted",
          "TotalDeviations",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "AllowStockMutationsDuringCount": {
            "type": "boolean"
          },
          "CompletionTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedBy": {
            "type": "integer"
          },
          "CreatedByFullName": {
            "type": "string"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "CurrencyID": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "FinalSummaryValues": {
            "type": "boolean"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "IsExternal": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "Progress": {
            "type": "number"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.UserTasks.FullStockCountUserTask.FullStockCountSummaryRecord"
          },
          "TotalDeviations": {
            "type": "integer"
          },
          "TotalNegativeDeviationAmount": {
            "type": "number"
          },
          "TotalPositiveDeviationAmount": {
            "type": "number"
          },
          "TotalProducts": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.FullStockCountUserTask.ListFullStockCountsFilter": {
        "type": "object",
        "properties": {
          "Completed": {
            "type": "boolean",
            "description": "When omitted, all FullStockCounts are returned.\nWhen false, only uncompleted FullStockCounts are returned.\nWhen true, only completed or cancelled FullStockCounts are returned."
          },
          "FullStockCountID": {
            "type": "integer"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "OrganizationUnitIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.ListUserTaskTypeOrganizationUnitSetsFilter": {
        "type": "object",
        "properties": {
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "Required": {
            "type": "boolean"
          },
          "UserTaskTypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.ListUserTasksFilter": {
        "type": "object",
        "properties": {
          "IsActive": {
            "type": "boolean"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "OrganizationUnitID": {
            "type": "integer",
            "description": "Includes child organizations"
          },
          "UserID": {
            "type": "integer"
          },
          "UserTaskTypes": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.SecondChanceProductRegistrationUserTask.SecondChanceProductRegistrationUserTaskData": {
        "required": [
          "ProductID"
        ],
        "type": "object",
        "properties": {
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.StockReplenishmentUserTask.ListStockReplenishmentTaskDataFilter": {
        "type": "object",
        "properties": {
          "Disabled": {
            "type": "boolean"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.UserTaskDataAggregation": {
        "required": [
          "Count"
        ],
        "type": "object",
        "properties": {
          "Count": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Value": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.ZonedCycleCountUserTask.CycleCountZoneDto": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.ZonedCycleCountUserTask.CycleCountZonesForOrganizationUnitDto": {
        "required": [
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          },
          "OrganizationUnitName": {
            "type": "string"
          },
          "Zones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.UserTasks.ZonedCycleCountUserTask.CycleCountZoneDto"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.ZonedCycleCountUserTask.ListCycleCountGroupsFilter": {
        "type": "object",
        "properties": {
          "CycleCountZoneGroupIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "CycleCountZoneID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.ZonedCycleCountUserTask.ListOrganizationUnitCycleCountZonesFilter": {
        "required": [
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.ZonedCycleCountUserTask.ListZonedCycleCountSchedulesFilter": {
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.ZonedCycleCountUserTask.ListZonedCycleCountsDto": {
        "required": [
          "CreatedByID",
          "IsActive",
          "ProductID",
          "ID",
          "UserTaskID",
          "CreationTime",
          "FinishedPreCountTasks",
          "IsCompleted",
          "OrganizationUnitID",
          "TotalPreCountTasks"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "CompletionTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByID": {
            "type": "integer"
          },
          "CreatedByUserName": {
            "type": "string"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "CustomID": {
            "type": "string"
          },
          "DeviationPercentage": {
            "type": "number"
          },
          "ExpectedPreCountedQuantity": {
            "type": "integer"
          },
          "FinishedPreCountTasks": {
            "type": "integer"
          },
          "ID": {
            "type": "integer"
          },
          "IsActive": {
            "type": "boolean"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "OrganizationUnitName": {
            "type": "string"
          },
          "OriginID": {
            "type": "integer"
          },
          "OriginTypeID": {
            "type": "integer"
          },
          "PreCountProgression": {
            "type": "number"
          },
          "PreCountedQuantity": {
            "type": "integer"
          },
          "ProductBarcode": {
            "type": "string"
          },
          "ProductDisplayValue": {
            "type": "string"
          },
          "ProductID": {
            "type": "integer"
          },
          "ResultStatus": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ZonedCycleCountResultStatus"
          },
          "StartTime": {
            "type": "string",
            "format": "date-time"
          },
          "TotalPreCountTasks": {
            "type": "integer"
          },
          "UserID": {
            "type": "integer"
          },
          "UserName": {
            "type": "string"
          },
          "UserTaskID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.ZonedCycleCountUserTask.ListZonedCycleCountsFilter": {
        "type": "object",
        "properties": {
          "FromDate": {
            "type": "string",
            "format": "date-time"
          },
          "InProgress": {
            "type": "boolean"
          },
          "IncludeChildOrganizationUnits": {
            "type": "boolean",
            "description": "When set to `true`, will overwrite `OrganizationUnitIDs` with given `OrganizationUnitID` and all its children."
          },
          "IsActive": {
            "type": "boolean"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "OrganizationUnitIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "ProductID": {
            "type": "integer"
          },
          "ResultStatus": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ZonedCycleCountResultStatus"
          },
          "ToDate": {
            "type": "string",
            "format": "date-time"
          },
          "UserTaskIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasks.ZonedCycleCountUserTask.ZonedCycleCountScheduleDto": {
        "required": [
          "CreatedByID",
          "OrganizationUnitSetID",
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "CreatedByID": {
            "type": "integer"
          },
          "CreatedByName": {
            "type": "string"
          },
          "CycleCountIntervalInDays": {
            "type": "integer"
          },
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "LastModifiedByID": {
            "type": "integer"
          },
          "LastModifiedByName": {
            "type": "string"
          },
          "OrganizationUnitSetID": {
            "type": "integer"
          },
          "OrganizationUnitSetName": {
            "type": "string"
          },
          "ProductSearchModel": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.ZonedCycleCountScheduleProductSearchModel"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasktypes.StockReplenishment.StockReplenishmentWorkSet": {
        "required": [
          "Items"
        ],
        "type": "object",
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.UserTasktypes.StockReplenishment.StockReplenishmentWorkSetItem"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTasktypes.StockReplenishment.StockReplenishmentWorkSetItem": {
        "required": [
          "Type",
          "UserTaskID",
          "Quantity",
          "StockReplenishmentTaskID"
        ],
        "type": "object",
        "properties": {
          "Originator": {
            "type": "string"
          },
          "Product": {
            "type": "object"
          },
          "Quantity": {
            "type": "integer"
          },
          "StockReplenishmentTaskID": {
            "type": "integer"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.StockReplenishmentType"
          },
          "UserTaskID": {
            "type": "integer"
          },
          "Zone": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.UserTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Users.AddUserToGroup": {
        "required": [
          "UserID",
          "GroupID"
        ],
        "type": "object",
        "properties": {
          "GroupID": {
            "type": "integer"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.AssignedToUser": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string"
          },
          "FullName": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.AssociationTypeForSingleUserAssociation": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.BorrowedProducts.AddUserBorrowedProductToOrder": {
        "required": [
          "ProductID",
          "UserID",
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "integer"
          },
          "ProductID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.BorrowedProducts.AddUserBorrowedProductToOrderResponse": {
        "required": [
          "OrderID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrderID": {
            "type": "integer"
          },
          "OrderLineIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Created OrderLineIDs"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.BorrowedProducts.ListUserBorrowedProducts": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.UserBorrowedProducts.ListUserBorrowedProductsFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.BorrowedProducts.ListUserBorrowedProductsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Users.BorrowedProducts.ListUserBorrowedProductsResponse_Model"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.BorrowedProducts.ListUserBorrowedProductsResponse_Model": {
        "required": [
          "ProductID",
          "UserID",
          "CreationTime",
          "State"
        ],
        "type": "object",
        "properties": {
          "CreatedByUser": {
            "$ref": "#/components/schemas/EVA.Core.Users.BorrowedProducts.ListUserBorrowedProductsResponse_UserModel"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModificationTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedByUser": {
            "$ref": "#/components/schemas/EVA.Core.Users.BorrowedProducts.ListUserBorrowedProductsResponse_UserModel"
          },
          "OrderID": {
            "type": "integer"
          },
          "ProductBackendID": {
            "type": "string"
          },
          "ProductID": {
            "type": "integer"
          },
          "ProductName": {
            "type": "string"
          },
          "State": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.BorrowedState"
          },
          "UserFullName": {
            "type": "string"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.BorrowedProducts.ListUserBorrowedProductsResponse_UserModel": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "FullName": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.BorrowedProducts.RegisterUserBorrowedProducts": {
        "required": [
          "ProductID",
          "UserID",
          "Quantity"
        ],
        "type": "object",
        "properties": {
          "ProductID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.BorrowedProducts.ReturnUserBorrowedProducts": {
        "required": [
          "ProductID",
          "UserID",
          "Quantity",
          "IsDamaged"
        ],
        "type": "object",
        "properties": {
          "IsDamaged": {
            "type": "boolean"
          },
          "ProductID": {
            "type": "integer"
          },
          "Quantity": {
            "type": "integer"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.ChangePasswordResults": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Users.ChangeUserPassword": {
        "required": [
          "UserID",
          "OldPassword",
          "NewPassword"
        ],
        "type": "object",
        "properties": {
          "NewPassword": {
            "type": "string"
          },
          "OldPassword": {
            "type": "string"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.ChangeUserPasswordResponse": {
        "required": [
          "Result",
          "Success"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.Users.ChangePasswordResults"
          },
          "Success": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.CheckEmailAddressAvailability": {
        "required": [
          "EmailAddress"
        ],
        "type": "object",
        "properties": {
          "AsEmployee": {
            "type": "boolean"
          },
          "EmailAddress": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.CheckNicknameAvailability": {
        "required": [
          "Nickname"
        ],
        "type": "object",
        "properties": {
          "AsEmployee": {
            "type": "boolean"
          },
          "Nickname": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.CheckUsernameAvailabilityResponse": {
        "required": [
          "PasswordResetRequired",
          "IsAvailable",
          "IsValid"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "IsAvailable": {
            "type": "boolean"
          },
          "IsValid": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "PasswordResetRequired": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.Companies.CreateCompanyForUser": {
        "required": [
          "UserID",
          "Name"
        ],
        "type": "object",
        "properties": {
          "AccountHolderName": {
            "type": "string"
          },
          "BIC": {
            "type": "string"
          },
          "ContactEmailAddress": {
            "type": "string"
          },
          "ContactPhoneNumber": {
            "type": "string"
          },
          "EstablishedDate": {
            "type": "string",
            "format": "date-time"
          },
          "IBAN": {
            "type": "string"
          },
          "LegalForm": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.LegalForms"
          },
          "Name": {
            "type": "string"
          },
          "RegistrationCity": {
            "type": "string"
          },
          "RegistrationCountryID": {
            "type": "string"
          },
          "RegistrationNumber": {
            "type": "string"
          },
          "UserID": {
            "type": "integer"
          },
          "VatNumber": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.Companies.DetachCompanyFromUser": {
        "required": [
          "UserID"
        ],
        "type": "object",
        "properties": {
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.Companies.GetCompanyForUser": {
        "required": [
          "UserID"
        ],
        "type": "object",
        "properties": {
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.Companies.GetCompanyForUserResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.Companies.CompanyDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.Companies.UpdateCompanyForUser": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "AccountHolderName": {
            "type": "string"
          },
          "BIC": {
            "type": "string"
          },
          "ContactEmailAddress": {
            "type": "string"
          },
          "ContactPhoneNumber": {
            "type": "string"
          },
          "EstablishedDate": {
            "type": "string",
            "format": "date-time"
          },
          "IBAN": {
            "type": "string"
          },
          "InvoiceAddress": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDataDto"
          },
          "LegalForm": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.LegalForms"
          },
          "Name": {
            "type": "string"
          },
          "RegistrationCity": {
            "type": "string"
          },
          "RegistrationCountryID": {
            "type": "string"
          },
          "RegistrationNumber": {
            "type": "string"
          },
          "UserID": {
            "type": "integer"
          },
          "VatNumber": {
            "type": "string"
          },
          "VisitorsAddress": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDataDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.CreateApiKey": {
        "required": [
          "UserID",
          "RequestPermanentApiKey",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "RequestPermanentApiKey": {
            "type": "boolean"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.CreateApiKeyResponse": {
        "required": [
          "ApiKey",
          "ID"
        ],
        "type": "object",
        "properties": {
          "ApiKey": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ExpirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.CreateApiUser": {
        "required": [
          "User"
        ],
        "type": "object",
        "properties": {
          "User": {
            "$ref": "#/components/schemas/EVA.Core.Users.CreateApiUser_ApiUser"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.CreateApiUser_ApiUser": {
        "required": [
          "Nickname",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Nickname": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.CreateApiUserResponse": {
        "required": [
          "Result",
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.Users.CreateApiUserResults"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.CreateApiUserResults": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Users.CreateCustomer": {
        "required": [
          "AutoLogin",
          "User"
        ],
        "type": "object",
        "properties": {
          "AccountType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.UserAccountType"
          },
          "Associations": {
            "$ref": "#/components/schemas/EVA.Core.Users.CreateCustomer_UserAssociations"
          },
          "AttachToOrder": {
            "type": "boolean",
            "description": "Automatically attach the new customer to the order identified by `OrderID`."
          },
          "AutoLogin": {
            "type": "boolean",
            "description": "Set to `true` to automatically authenticate as this new user."
          },
          "OrderID": {
            "type": "integer",
            "description": "Identifier for the order to automatically attach the new customer to (see `AttachToOrder` parameter)."
          },
          "User": {
            "$ref": "#/components/schemas/EVA.Core.Users.CreateCustomer_Customer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.CreateCustomer_Customer": {
        "type": "object",
        "properties": {
          "BankAccount": {
            "type": "string"
          },
          "BillingAddress": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDataDto"
          },
          "BillingAddressDescription": {
            "type": "string"
          },
          "Company": {
            "$ref": "#/components/schemas/EVA.Core.Users.CreateCustomer_CustomerCompany"
          },
          "CountryID": {
            "type": "string"
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldKeyValue"
            },
            "description": "Optional additional custom fields"
          },
          "CustomID": {
            "type": "string"
          },
          "DateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "EmailAddress": {
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "FiscalID": {
            "type": "string"
          },
          "Gender": {
            "type": "string"
          },
          "Initials": {
            "type": "string"
          },
          "LanguageID": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "Nickname": {
            "type": "string"
          },
          "OriginID": {
            "type": "integer"
          },
          "Password": {
            "type": "string"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "PlaceOfBirth": {
            "type": "string"
          },
          "PreferredStoreID": {
            "type": "integer"
          },
          "PricingGroupID": {
            "type": "string"
          },
          "Salutation": {
            "type": "string"
          },
          "ShippingAddress": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDataDto"
          },
          "ShippingAddressDescription": {
            "type": "string"
          },
          "SocialSecurityNumber": {
            "type": "string"
          },
          "Title": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.CreateCustomer_CustomerCompany": {
        "type": "object",
        "properties": {
          "FiscalID": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "RegistrationNumber": {
            "type": "string"
          },
          "VatNumber": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.CreateCustomer_UserAssociations": {
        "type": "object",
        "properties": {
          "PrimaryAssociations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Users.CreateCustomer_UserAssociations_UserAssociation"
            },
            "description": "The new user is something *to* existing users, e.g. it is a parent to X"
          },
          "RelatedAssociations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Users.CreateCustomer_UserAssociations_UserAssociation"
            },
            "description": "The new user is something *of* existing users, e.g. it is the child of Y"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.CreateCustomer_UserAssociations_UserAssociation": {
        "required": [
          "TypeID",
          "UserID"
        ],
        "type": "object",
        "properties": {
          "TypeID": {
            "type": "integer"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.CreateCustomerResponse": {
        "required": [
          "Result"
        ],
        "type": "object",
        "properties": {
          "Barcode": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.Users.CreateCustomerResults"
          },
          "User": {
            "$ref": "#/components/schemas/EVA.Core.Users.LoggedInUserDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.CreateCustomerResults": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Users.CreateUserAssociation": {
        "required": [
          "TypeID",
          "PrimaryUserID",
          "RelatedUserID"
        ],
        "type": "object",
        "properties": {
          "PrimaryUserID": {
            "type": "integer"
          },
          "RelatedUserID": {
            "type": "integer"
          },
          "TypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.CreateUserAssociationResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.CreateUserAssociationType": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.CreateUserAssociationTypeResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.CreateUserGroup": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.CreateUserPhoneNumber": {
        "required": [
          "Type",
          "PhoneNumber",
          "IsPrimary"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "IsPrimary": {
            "type": "boolean"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.PhoneNumberTypes"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.DeleteApiKey": {
        "required": [
          "KeyID"
        ],
        "type": "object",
        "properties": {
          "KeyID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.DeleteUser": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.DeleteUserAssociation": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.DeleteUserAssociationType": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.DeleteUserGroup": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.DeleteUserPhoneNumber": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GenerateTemporaryPasswordForUser": {
        "required": [
          "UserID"
        ],
        "type": "object",
        "properties": {
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GenerateTemporaryPasswordForUserResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Password": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GetCurrentUser": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Users.GetCurrentUserIdentificationInfo": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Users.GetCurrentUserIdentificationInfoResponse": {
        "required": [
          "HasPin"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "HasPin": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ResetDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GetCurrentUserResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "User": {
            "$ref": "#/components/schemas/EVA.Core.Users.LoggedInUserDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GetEmailAddressDomainSuggestions": {
        "type": "object",
        "properties": {
          "MaxSuggestions": {
            "type": "integer",
            "description": "The number of suggestions to return. Defaults to 5 and is limited to 10."
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GetEmailAddressDomainSuggestionsResponse": {
        "type": "object",
        "properties": {
          "Domains": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of the domain names, ordered by usage count. Each domain is returned in the form of `domain.tld`."
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GetLoginOrganizationUnitsForUser": {
        "type": "object",
        "properties": {
          "UserTypeFilter": {
            "$ref": "#/components/schemas/EVA.Core.UserTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GetLoginOrganizationUnitsForUserResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Users.GetLoginOrganizationUnitsForUserResponse_OrganizationUnit"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GetLoginOrganizationUnitsForUserResponse_OrganizationUnit": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GetTokenInfo": {
        "type": "object",
        "properties": {
          "Authorization": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GetTokenInfoResponse": {
        "required": [
          "UserID"
        ],
        "type": "object",
        "properties": {
          "ApplicationID": {
            "type": "integer"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ExpirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "LanguageID": {
            "type": "string"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "TemporaryAccessData": {
            "type": "object"
          },
          "TemporaryAccessType": {
            "type": "string"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GetUser": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GetUserAssociationTypeByID": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GetUserAssociationTypeByIDResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "UserAssociationType": {
            "$ref": "#/components/schemas/EVA.Core.Users.UserAssociationTypeModel"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GetUserAssociationTypes": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Users.GetUserAssociationTypesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "UserAssociationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Users.UserAssociationTypeModel"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GetUserAssociations": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GetUserAssociationsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "PrimaryRelations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Users.SingleUserAssociation"
            }
          },
          "RelatedRelations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Users.SingleUserAssociation"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GetUserConsignment": {
        "required": [
          "UserID"
        ],
        "type": "object",
        "properties": {
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GetUserConsignmentResponse": {
        "required": [
          "UseConsignment"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "UseConsignment": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GetUserDebtorData": {
        "required": [
          "UserID"
        ],
        "type": "object",
        "properties": {
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GetUserDebtorDataResponse": {
        "required": [
          "IsTaxExempt"
        ],
        "type": "object",
        "properties": {
          "AssignedToUser": {
            "$ref": "#/components/schemas/EVA.Core.Users.AssignedToUser"
          },
          "ColloPrice": {
            "type": "number"
          },
          "CreditLimit": {
            "type": "number"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "IsTaxExempt": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OversizedPrice": {
            "type": "number"
          },
          "PalletPrice": {
            "type": "number"
          },
          "PaymentTerms": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GetUserGroupByID": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GetUserGroupByIDResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GetUserIdentificationByID": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GetUserIdentificationByIDResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.Users.IdentificationDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GetUserPhoneNumbers": {
        "type": "object",
        "properties": {
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GetUserPhoneNumbersResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Users.UserPhoneNumberModel"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.GetUserResponse": {
        "required": [
          "Type",
          "CreatedByID",
          "IsDeactivated",
          "AllowPasswordLogin",
          "ID",
          "CreationTime",
          "IsDebtor",
          "AccountType",
          "IsIncognito",
          "IsDeleted"
        ],
        "type": "object",
        "properties": {
          "AccountType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.UserAccountType"
          },
          "AllowPasswordLogin": {
            "type": "boolean"
          },
          "BackendID": {
            "type": "string"
          },
          "BackendRelationID": {
            "type": "string"
          },
          "BackendSystemID": {
            "type": "string"
          },
          "BankAccount": {
            "type": "string"
          },
          "Company": {
            "$ref": "#/components/schemas/EVA.Core.Companies.CompanyDto"
          },
          "CountryID": {
            "type": "string"
          },
          "CreatedByFullName": {
            "type": "string"
          },
          "CreatedByID": {
            "type": "integer"
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.CustomFields.CustomFieldResponse"
            }
          },
          "CustomID": {
            "type": "string"
          },
          "Data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "DateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "DeactivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "EmailAddress": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "FirstName": {
            "type": "string"
          },
          "FiscalID": {
            "type": "string"
          },
          "FullName": {
            "type": "string"
          },
          "Gender": {
            "type": "string"
          },
          "GravatarHash": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Initials": {
            "type": "string"
          },
          "IsDeactivated": {
            "type": "boolean"
          },
          "IsDebtor": {
            "type": "boolean"
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "IsIncognito": {
            "type": "boolean"
          },
          "LanguageID": {
            "type": "string"
          },
          "LastModificationTime": {
            "type": "string",
            "format": "date-time"
          },
          "LastModifiedByID": {
            "type": "integer"
          },
          "LastName": {
            "type": "string"
          },
          "LastSuccessfulLogin": {
            "type": "string",
            "format": "date-time"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ModifiedByFullName": {
            "type": "string"
          },
          "Nickname": {
            "type": "string"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "PlaceOfBirth": {
            "type": "string"
          },
          "PreferredStoreID": {
            "type": "integer"
          },
          "PricingGroupID": {
            "type": "string"
          },
          "Salutation": {
            "type": "string"
          },
          "SocialSecurityNumber": {
            "type": "string"
          },
          "TimeZone": {
            "type": "string"
          },
          "Title": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.UserTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.IdentificationDto": {
        "required": [
          "ValidTo",
          "Type",
          "ID"
        ],
        "type": "object",
        "properties": {
          "DocumentID": {
            "type": "string",
            "format": "uuid"
          },
          "ID": {
            "type": "integer"
          },
          "IssuingCity": {
            "type": "string"
          },
          "IssuingCountryID": {
            "type": "string"
          },
          "IssuingDate": {
            "type": "string",
            "format": "date-time"
          },
          "Number": {
            "type": "string"
          },
          "OriginatingCountryID": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.IdentificationTypes"
          },
          "ValidTo": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.ListApiKeys": {
        "type": "object",
        "properties": {
          "InitialPageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageTokenConfig_1_EVA.Core.Security.ListApiKeysFilter"
          },
          "PageToken": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.ListApiKeysItem": {
        "required": [
          "UserID",
          "ID"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ExpirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.ListApiKeysResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "NextPageToken": {
            "type": "string"
          },
          "PreviousPageToken": {
            "type": "string"
          },
          "Results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Security.ListKeysItem"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.ListAvailableTimeZones": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Users.ListAvailableTimeZonesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Users.ListAvailableTimeZonesResponse_Model"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.ListAvailableTimeZonesResponse_Model": {
        "required": [
          "Offset"
        ],
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "CountryName": {
            "type": "string"
          },
          "ID": {
            "type": "string"
          },
          "Offset": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.ListUserApiKeys": {
        "required": [
          "UserID"
        ],
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.Security.ListApiKeysFilter"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.ListUserApiKeysResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Users.ListApiKeysItem"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.ListUserGroups": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.ListUserGroupsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Users.UserGroupDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.ListUserIdentifications": {
        "required": [
          "UserID"
        ],
        "type": "object",
        "properties": {
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.ListUserIdentificationsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Identifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Users.IdentificationDto"
            }
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.ListUsersForUserGroup": {
        "required": [
          "UserGroupID"
        ],
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "UserGroupID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.ListUsersForUserGroupResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Users.SimpleUserDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.LocalAuthenticationDataDto": {
        "required": [
          "Type",
          "Hash"
        ],
        "type": "object",
        "properties": {
          "Hash": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.LoggedInUserDto": {
        "required": [
          "Type",
          "CreatedByID",
          "AllowPasswordLogin",
          "ID",
          "IsDebtor",
          "AccountType",
          "CurrentOrganizationUnitType",
          "IsDeleted"
        ],
        "type": "object",
        "properties": {
          "AccountType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.UserAccountType"
          },
          "AllowPasswordLogin": {
            "type": "boolean"
          },
          "AuthenticationToken": {
            "type": "string"
          },
          "BackendID": {
            "type": "string"
          },
          "BackendRelationID": {
            "type": "string"
          },
          "BankAccount": {
            "type": "string"
          },
          "Barcode": {
            "type": "string"
          },
          "Company": {
            "$ref": "#/components/schemas/EVA.Core.Companies.CompanyDto"
          },
          "CountryID": {
            "type": "string"
          },
          "CreatedByFullName": {
            "type": "string"
          },
          "CreatedByID": {
            "type": "integer"
          },
          "CurrentCountryID": {
            "type": "string"
          },
          "CurrentCurrencyID": {
            "type": "string"
          },
          "CurrentLanguageID": {
            "type": "string"
          },
          "CurrentOrganizationID": {
            "type": "integer"
          },
          "CurrentOrganizationName": {
            "type": "string"
          },
          "CurrentOrganizationUnitType": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnitTypes"
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.CustomFields.CustomFieldResponse"
            }
          },
          "CustomID": {
            "type": "string"
          },
          "Data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "DateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "ElevationFunctionalities": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.Security.FunctionalityScope"
            }
          },
          "EmailAddress": {
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "FiscalID": {
            "type": "string"
          },
          "FullName": {
            "type": "string"
          },
          "Gender": {
            "type": "string"
          },
          "GravatarHash": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Initials": {
            "type": "string"
          },
          "IsDebtor": {
            "type": "boolean"
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "LanguageID": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "LocalAuthenticationData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Users.LocalAuthenticationDataDto"
            },
            "description": "Only used and returned on the watchtower devices."
          },
          "Nickname": {
            "type": "string"
          },
          "OrganizationUnitIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "PhoneNumber": {
            "type": "string"
          },
          "PlaceOfBirth": {
            "type": "string"
          },
          "Salutation": {
            "type": "string"
          },
          "ScopedFunctionalities": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.Security.FunctionalityScope"
            }
          },
          "SocialSecurityNumber": {
            "type": "string"
          },
          "TimeZone": {
            "type": "string"
          },
          "Title": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.UserTypes"
          },
          "VisibilityGroupID": {
            "type": "integer"
          },
          "VisibilityGroupIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.MakeUserPhoneNumberPrimary": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.PushUser": {
        "required": [
          "IsSingleSignOnOnly"
        ],
        "type": "object",
        "properties": {
          "AccountType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.UserAccountType"
          },
          "BackendID": {
            "type": "string",
            "description": "ID of the user in the 3rd party system"
          },
          "BackendRelationID": {
            "type": "string"
          },
          "BackendSystemID": {
            "type": "string",
            "description": "Code of the 3rd party system that wants to create this user"
          },
          "BillingAddress": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDataDto"
          },
          "CountryID": {
            "type": "string",
            "description": "Country code of the user (ISO 3166-1)"
          },
          "CustomFields": {
            "type": "object",
            "description": "Optional additional custom fields"
          },
          "CustomID": {
            "type": "string"
          },
          "DateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "EmailAddress": {
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "FiscalID": {
            "type": "string"
          },
          "Gender": {
            "type": "string",
            "description": "Gender of the user, either M or F"
          },
          "Initials": {
            "type": "string"
          },
          "IsSingleSignOnOnly": {
            "type": "boolean"
          },
          "LanguageID": {
            "type": "string",
            "description": "Language code of the user (ISO 639-1)"
          },
          "LastName": {
            "type": "string"
          },
          "Nickname": {
            "type": "string"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "PreferredStoreID": {
            "type": "integer"
          },
          "PricingGroupID": {
            "type": "object"
          },
          "Salutation": {
            "type": "string"
          },
          "ShippingAddress": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDataDto"
          },
          "SocialSecurityNumber": {
            "type": "string"
          },
          "Subscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Users.PushUser_UserSubscription"
            }
          },
          "Title": {
            "type": "string"
          },
          "UserType": {
            "$ref": "#/components/schemas/EVA.Core.UserTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.PushUser_UserSubscription": {
        "required": [
          "SubscriptionID",
          "Subscribed"
        ],
        "type": "object",
        "properties": {
          "Subscribed": {
            "type": "boolean"
          },
          "SubscriptionID": {
            "type": "integer"
          },
          "UserIdentifier": {
            "type": "string",
            "description": "Identifier for this user for the given Subscription. P/a: a loyaltyID"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.PushUserResponse": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.ReactivateUser": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.RemoveUserFromGroup": {
        "required": [
          "UserID",
          "GroupID"
        ],
        "type": "object",
        "properties": {
          "GroupID": {
            "type": "integer"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.RequestPasswordResetToken": {
        "required": [
          "EmailAddress"
        ],
        "type": "object",
        "properties": {
          "AsEmployee": {
            "type": "boolean"
          },
          "Context": {
            "type": "string",
            "description": "Some identifier to use in the mailtemplate (admin, checkout, website, ...)"
          },
          "EmailAddress": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.ResetUserPassword": {
        "required": [
          "Token",
          "NewPassword"
        ],
        "type": "object",
        "properties": {
          "NewPassword": {
            "type": "string"
          },
          "Token": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.ResetUserPasswordResponse": {
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.SearchUsers": {
        "required": [
          "IncludeCustomers",
          "IncludeEmployees"
        ],
        "type": "object",
        "properties": {
          "AssignedEmployeeID": {
            "type": "integer"
          },
          "CustomFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "DateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "EmailAddress": {
            "type": "string"
          },
          "EmployeeNumber": {
            "type": "string"
          },
          "FiscalID": {
            "type": "string"
          },
          "IncludeAllCountries": {
            "type": "boolean",
            "description": "By default the search will only return users from the same Country as the current OrganizationUnit.\nOptionally an extensive search can be performed by enabling this option. But keep in mind this will take some time in real production scenario's.\nIt is advised to only show this option in the frontend after an intial search has been done in the current country."
          },
          "IncludeCustomers": {
            "type": "boolean"
          },
          "IncludeEmployees": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          },
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_map_string_string"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "PricingGroupID": {
            "type": "string"
          },
          "PrimaryOrganizationUnitID": {
            "type": "integer"
          },
          "RoleID": {
            "type": "integer"
          },
          "SearchQuery": {
            "type": "string"
          },
          "SocialSecurityNumber": {
            "type": "string"
          },
          "Types": {
            "$ref": "#/components/schemas/EVA.Core.UserTypes"
          },
          "UserIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "VatNumber": {
            "type": "string"
          },
          "ZipCode": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.SearchUsersResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.Users.SearchUsersResponse_UserSearchDto"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.SearchUsersResponse_UserSearchDto": {
        "required": [
          "Type",
          "IsDeactivated",
          "ID",
          "AccountType"
        ],
        "type": "object",
        "properties": {
          "AccountType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.UserAccountType"
          },
          "BackendID": {
            "type": "string"
          },
          "BackendRelationID": {
            "type": "string"
          },
          "BackendSystemID": {
            "type": "string"
          },
          "BillingAddress": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDataDto"
          },
          "CompanyName": {
            "type": "string"
          },
          "CustomFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "DateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "DeactivationDate": {
            "type": "string",
            "format": "date-time"
          },
          "EmailAddress": {
            "type": "string"
          },
          "EmployeeNumber": {
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "FullName": {
            "type": "string"
          },
          "GravatarHash": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "IsDeactivated": {
            "type": "boolean"
          },
          "LastName": {
            "type": "string"
          },
          "LastSuccessfulLogin": {
            "type": "string",
            "format": "date-time"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "PrimaryOrganizationUnitID": {
            "type": "integer"
          },
          "PrimaryOrganizationUnitName": {
            "type": "string"
          },
          "ShippingAddress": {
            "$ref": "#/components/schemas/EVA.Core.Addresses.AddressDataDto"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.UserTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.Services.RequestReindexUserSearchData": {
        "type": "object",
        "properties": {
          "Script": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.SetCustomUserData": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.DataModels.CustomFieldKeyValue"
            }
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.SetUserConsignment": {
        "required": [
          "UseConsignment",
          "UserID"
        ],
        "type": "object",
        "properties": {
          "UseConsignment": {
            "type": "boolean"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.SimpleUserDto": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "FirstName": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "LastName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.SingleUserAssociation": {
        "type": "object",
        "properties": {
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.Users.AssociationTypeForSingleUserAssociation"
          },
          "User": {
            "$ref": "#/components/schemas/EVA.Core.Users.UserDataForSingleUserAssociation"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.SocialSecurityNumber.GetUserBySocialSecurityNumber": {
        "required": [
          "SocialSecurityNumber"
        ],
        "type": "object",
        "properties": {
          "AsEmployee": {
            "type": "boolean"
          },
          "SocialSecurityNumber": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.SocialSecurityNumber.GetUserBySocialSecurityNumberResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.SocialSecurityNumber.GetUserInfoBySocialSecurityNumber": {
        "required": [
          "SocialSecurityNumber",
          "CountryID"
        ],
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "SocialSecurityNumber": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.SocialSecurityNumber.GetUserInfoBySocialSecurityNumberResponse": {
        "type": "object",
        "properties": {
          "Address": {
            "$ref": "#/components/schemas/EVA.Core.Users.SocialSecurityNumber.GetUserInfoBySocialSecurityNumberResponse_UserAddress"
          },
          "Data": {
            "$ref": "#/components/schemas/EVA.Core.Users.SocialSecurityNumber.GetUserInfoBySocialSecurityNumberResponse_UserData"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.SocialSecurityNumber.GetUserInfoBySocialSecurityNumberResponse_UserAddress": {
        "type": "object",
        "properties": {
          "AddressedTo": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "CountryID": {
            "type": "string"
          },
          "HouseNumber": {
            "type": "string"
          },
          "Street": {
            "type": "string"
          },
          "ZipCode": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.SocialSecurityNumber.GetUserInfoBySocialSecurityNumberResponse_UserCompany": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.SocialSecurityNumber.GetUserInfoBySocialSecurityNumberResponse_UserData": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BillingAddress": {
            "$ref": "#/components/schemas/EVA.Core.Users.SocialSecurityNumber.GetUserInfoBySocialSecurityNumberResponse_UserAddress"
          },
          "Company": {
            "$ref": "#/components/schemas/EVA.Core.Users.SocialSecurityNumber.GetUserInfoBySocialSecurityNumberResponse_UserCompany"
          },
          "DateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "FirstName": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "LastName": {
            "type": "string"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "SocialSecurityNumber": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.Subscriptions.ConfirmSubscription": {
        "required": [
          "Token"
        ],
        "type": "object",
        "properties": {
          "Token": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.Subscriptions.ConfirmSubscriptionResponse": {
        "required": [
          "ID",
          "Status"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "ID": {
            "type": "integer"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.SubscriptionStatus"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.Subscriptions.GetAllSubscriptionsByUserID": {
        "required": [
          "UserID"
        ],
        "type": "object",
        "properties": {
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.Subscriptions.GetAvailableSubscriptions": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Users.Subscriptions.GetAvailableSubscriptionsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Subscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Users.Subscriptions.GetAvailableSubscriptionsResponse_SubscriptionDto"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.Subscriptions.GetAvailableSubscriptionsResponse_SubscriptionDto": {
        "required": [
          "ConfirmationRequired",
          "Hidden",
          "ID",
          "Preferred",
          "UserIdentifierRequiredForSubscription",
          "Default",
          "Name"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "ConfirmationRequired": {
            "type": "boolean"
          },
          "Default": {
            "type": "boolean"
          },
          "Description": {
            "type": "string"
          },
          "Hidden": {
            "type": "boolean"
          },
          "ID": {
            "type": "integer"
          },
          "InquiryID": {
            "type": "integer"
          },
          "InquiryName": {
            "type": "string"
          },
          "LoyaltyProgramID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "Preferred": {
            "type": "boolean"
          },
          "UserIdentifierRequiredForSubscription": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.Subscriptions.GetUserSubscriptions": {
        "required": [
          "IncludeAvailableSubscriptions"
        ],
        "type": "object",
        "properties": {
          "IncludeAvailableSubscriptions": {
            "type": "boolean",
            "description": "Setting this to true will also include the subscriptions in the response that are available, but where the user has no Subscription status"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.Subscriptions.GetUserSubscriptionsResponse": {
        "required": [
          "Subscriptions"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Subscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Users.Subscriptions.GetUserSubscriptionsResponse_UserSubscriptionDto"
            }
          },
          "UserAgent": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.Subscriptions.GetUserSubscriptionsResponse_SubscriptionDto": {
        "required": [
          "ConfirmationRequired",
          "Hidden",
          "ID",
          "Preferred",
          "UserIdentifierRequiredForSubscription",
          "Default",
          "Name"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "ConfirmationRequired": {
            "type": "boolean"
          },
          "Default": {
            "type": "boolean"
          },
          "Description": {
            "type": "string"
          },
          "Hidden": {
            "type": "boolean"
          },
          "ID": {
            "type": "integer"
          },
          "InquiryID": {
            "type": "integer"
          },
          "InquiryName": {
            "type": "string"
          },
          "LoyaltyBalance": {
            "$ref": "#/components/schemas/EVA.Core.Loyalty.LoyaltyBalance"
          },
          "LoyaltyProgramID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "OriginatingOrganizationUnitID": {
            "type": "integer"
          },
          "Preferred": {
            "type": "boolean"
          },
          "UserIdentifierRequiredForSubscription": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.Subscriptions.GetUserSubscriptionsResponse_UserSubscriptionDto": {
        "required": [
          "Status",
          "Subscription"
        ],
        "type": "object",
        "properties": {
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.SubscriptionStatus"
          },
          "Subscription": {
            "$ref": "#/components/schemas/EVA.Core.Users.Subscriptions.GetUserSubscriptionsResponse_SubscriptionDto"
          },
          "UserIdentifier": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.Subscriptions.SubscribeUser": {
        "required": [
          "Subscriptions"
        ],
        "type": "object",
        "properties": {
          "Subscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Users.Subscriptions.SubscribeUser_SubscriptionWithIdentifier"
            }
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.Subscriptions.SubscribeUser_SubscriptionWithIdentifier": {
        "required": [
          "SubscriptionID"
        ],
        "type": "object",
        "properties": {
          "SubscriptionID": {
            "type": "integer"
          },
          "UserIdentifier": {
            "type": "string",
            "description": "Identifier for this user for the given Subscription. P/a: a loyaltyID"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.Subscriptions.SubscribeUserResponse": {
        "required": [
          "Subscriptions"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Subscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Users.Subscriptions.SubscribeUserResponse_SubscriptionWithStatus"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.Subscriptions.SubscribeUserResponse_SubscriptionWithStatus": {
        "required": [
          "Status",
          "SubscriptionID"
        ],
        "type": "object",
        "properties": {
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.SubscriptionStatus"
          },
          "SubscriptionID": {
            "type": "integer"
          },
          "UserIdentifier": {
            "type": "string",
            "description": "Identifier for this user for the given Subscription. P/a: a loyaltyID"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.Subscriptions.UnsubscribeUser": {
        "required": [
          "SubscriptionID"
        ],
        "type": "object",
        "properties": {
          "SubscriptionID": {
            "type": "integer"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.Subscriptions.UnsubscribeUserResponse": {
        "required": [
          "Status"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Status": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.SubscriptionStatus"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.UpdateUser": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "object"
          },
          "BackendRelationID": {
            "type": "object"
          },
          "BackendSystemID": {
            "type": "object"
          },
          "BankAccount": {
            "type": "object"
          },
          "CountryID": {
            "type": "object"
          },
          "CustomFields": {
            "type": "object",
            "description": "Optional additional custom fields"
          },
          "DateOfBirth": {
            "type": "object"
          },
          "EmailAddress": {
            "type": "object"
          },
          "FirstName": {
            "type": "object"
          },
          "FiscalID": {
            "type": "object"
          },
          "Gender": {
            "type": "object"
          },
          "ID": {
            "type": "integer"
          },
          "Initials": {
            "type": "object"
          },
          "LanguageID": {
            "type": "object"
          },
          "LastName": {
            "type": "object"
          },
          "Nickname": {
            "type": "object"
          },
          "PhoneNumber": {
            "type": "object"
          },
          "PlaceOfBirth": {
            "type": "object"
          },
          "PreferredStoreID": {
            "type": "object"
          },
          "PricingGroupID": {
            "type": "object"
          },
          "Salutation": {
            "type": "object"
          },
          "SocialSecurityNumber": {
            "type": "object"
          },
          "TimeZone": {
            "type": "object"
          },
          "Title": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.UpdateUserAccountType": {
        "required": [
          "AccountType"
        ],
        "type": "object",
        "properties": {
          "AccountType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.UserAccountType"
          },
          "Password": {
            "type": "string"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.UpdateUserAccountTypeResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Password": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.UpdateUserAssociation": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "PrimaryUserID": {
            "type": "integer"
          },
          "RelatedUserID": {
            "type": "integer"
          },
          "TypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.UpdateUserAssociationType": {
        "required": [
          "ID",
          "Name"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.UpdateUserDebtorData": {
        "required": [
          "UserID",
          "IsTaxExempt"
        ],
        "type": "object",
        "properties": {
          "AssignedToUserID": {
            "type": "integer"
          },
          "ColloPrice": {
            "type": "number"
          },
          "CreditLimit": {
            "type": "number"
          },
          "IsTaxExempt": {
            "type": "boolean"
          },
          "OversizedPrice": {
            "type": "number"
          },
          "PalletPrice": {
            "type": "number"
          },
          "PaymentTerms": {
            "type": "string"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.UpdateUserGroup": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.UpdateUserPhoneNumber": {
        "required": [
          "Type",
          "PhoneNumber",
          "ID"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.PhoneNumberTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.UserAssociationTypeModel": {
        "required": [
          "ID",
          "IsDeleted"
        ],
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.UserDataForSingleUserAssociation": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "FullName": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.UserDto": {
        "required": [
          "Type",
          "CreatedByID",
          "AllowPasswordLogin",
          "ID",
          "IsDebtor",
          "AccountType",
          "IsDeleted"
        ],
        "type": "object",
        "properties": {
          "AccountType": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.UserAccountType"
          },
          "AllowPasswordLogin": {
            "type": "boolean"
          },
          "BackendID": {
            "type": "string"
          },
          "BackendRelationID": {
            "type": "string"
          },
          "BankAccount": {
            "type": "string"
          },
          "Barcode": {
            "type": "string"
          },
          "Company": {
            "$ref": "#/components/schemas/EVA.Core.Companies.CompanyDto"
          },
          "CountryID": {
            "type": "string"
          },
          "CreatedByFullName": {
            "type": "string"
          },
          "CreatedByID": {
            "type": "integer"
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.CustomFields.CustomFieldResponse"
            }
          },
          "CustomID": {
            "type": "string"
          },
          "Data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "DateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "EmailAddress": {
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "FiscalID": {
            "type": "string"
          },
          "FullName": {
            "type": "string"
          },
          "Gender": {
            "type": "string"
          },
          "GravatarHash": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "Initials": {
            "type": "string"
          },
          "IsDebtor": {
            "type": "boolean"
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "LanguageID": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "Nickname": {
            "type": "string"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "PlaceOfBirth": {
            "type": "string"
          },
          "Salutation": {
            "type": "string"
          },
          "SocialSecurityNumber": {
            "type": "string"
          },
          "TimeZone": {
            "type": "string"
          },
          "Title": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.UserTypes"
          },
          "VisibilityGroupID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.UserGroupDto": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.UserPhoneNumberModel": {
        "required": [
          "Type",
          "ID",
          "IsPrimary"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "ID": {
            "type": "integer"
          },
          "IsPrimary": {
            "type": "boolean"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/EVA.Core.DataModels.PhoneNumberTypes"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.ValidateUser": {
        "required": [
          "ShowValidDetails",
          "IsEmployee"
        ],
        "type": "object",
        "properties": {
          "CountryID": {
            "type": "string"
          },
          "DateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "EmailAddress": {
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "Gender": {
            "type": "string"
          },
          "Initials": {
            "type": "string"
          },
          "IsEmployee": {
            "type": "boolean"
          },
          "LanguageID": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "Nickname": {
            "type": "string"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "ShowValidDetails": {
            "type": "boolean"
          },
          "UserID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.ValidateUserResponse": {
        "required": [
          "IsValid"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "IsValid": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "ValidationDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Users.ValidateUserResponse_ValidationDetail"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Users.ValidateUserResponse_ValidationDetail": {
        "required": [
          "IsValid"
        ],
        "type": "object",
        "properties": {
          "Field": {
            "type": "string"
          },
          "IsValid": {
            "type": "boolean"
          },
          "Message": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Validation.RequiredData": {
        "required": [
          "OrderLines",
          "Customer",
          "Order"
        ],
        "type": "object",
        "properties": {
          "Customer": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Validation.Requirement"
            }
          },
          "Order": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Validation.Requirement"
            }
          },
          "OrderLines": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EVA.Core.Validation.Requirement"
              }
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Validation.RequiredDataValidationResult": {
        "type": "object",
        "properties": {
          "ValidationErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Validation.ValidationError"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Validation.RequiredFor": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.Validation.Requirement": {
        "required": [
          "RequiredFor",
          "IsValid"
        ],
        "type": "object",
        "properties": {
          "DataType": {
            "type": "string"
          },
          "IsValid": {
            "type": "boolean"
          },
          "Message": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "RequiredFor": {
            "$ref": "#/components/schemas/EVA.Core.Validation.RequiredFor"
          },
          "Type": {
            "type": "string"
          },
          "ValidationRule": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Validation.ValidationError": {
        "type": "object",
        "properties": {
          "Context": {
            "type": "string"
          },
          "Field": {
            "type": "string"
          },
          "Message": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.Webshop.SendContactForm": {
        "type": "object",
        "properties": {
          "Properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.AttachOpeningHoursTemplateToOrganizationUnitSets": {
        "required": [
          "OrganizationUnitSetIDs",
          "OverrideIfOpeningHoursTypeAlreadyAttached",
          "OpeningHoursTemplateID"
        ],
        "type": "object",
        "properties": {
          "OpeningHoursTemplateID": {
            "type": "integer"
          },
          "OrganizationUnitSetIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "OverrideIfOpeningHoursTypeAlreadyAttached": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.CreateOpeningHoursTemplate": {
        "required": [
          "OpeningHoursTypeID"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Friday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "Monday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "OpeningHoursTypeID": {
            "type": "integer"
          },
          "Saturday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "Sunday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "Thursday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "Tuesday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "Wednesday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.CreateOpeningHoursTemplateResponse": {
        "required": [
          "OpeningHoursTemplateID",
          "Successful"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OpeningHoursTemplateID": {
            "type": "integer"
          },
          "Successful": {
            "type": "boolean"
          },
          "ValidationErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Error"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.DeleteOpeningHoursTemplate": {
        "required": [
          "OpeningHoursTemplateID"
        ],
        "type": "object",
        "properties": {
          "OpeningHoursTemplateID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.DetachOpeningHoursTemplateToOrganizationUnitSets": {
        "required": [
          "OpeningHoursTemplateID"
        ],
        "type": "object",
        "properties": {
          "OpeningHoursTemplateID": {
            "type": "integer"
          },
          "OrganizationUnitSetIDs": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.GetDetailedOrganizationUnitOpeningHours": {
        "required": [
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.GetDetailedOrganizationUnitOpeningHoursResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OpeningHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.GetDetailedOrganizationUnitOpeningHoursResponse_Data"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.GetDetailedOrganizationUnitOpeningHoursResponse_Data": {
        "required": [
          "OpeningHoursTypeID"
        ],
        "type": "object",
        "properties": {
          "Friday": {
            "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.GetDetailedOrganizationUnitOpeningHoursResponse_Data_RegularDay"
          },
          "Monday": {
            "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.GetDetailedOrganizationUnitOpeningHoursResponse_Data_RegularDay"
          },
          "OpeningHoursTypeID": {
            "type": "integer"
          },
          "Saturday": {
            "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.GetDetailedOrganizationUnitOpeningHoursResponse_Data_RegularDay"
          },
          "SpecialDays": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.GetDetailedOrganizationUnitOpeningHoursResponse_Data_SpecialDay"
            }
          },
          "Sunday": {
            "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.GetDetailedOrganizationUnitOpeningHoursResponse_Data_RegularDay"
          },
          "Thursday": {
            "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.GetDetailedOrganizationUnitOpeningHoursResponse_Data_RegularDay"
          },
          "Tuesday": {
            "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.GetDetailedOrganizationUnitOpeningHoursResponse_Data_RegularDay"
          },
          "Wednesday": {
            "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.GetDetailedOrganizationUnitOpeningHoursResponse_Data_RegularDay"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.GetDetailedOrganizationUnitOpeningHoursResponse_Data_RegularDay": {
        "required": [
          "IsFromTemplate"
        ],
        "type": "object",
        "properties": {
          "ElectedTemplateID": {
            "type": "integer"
          },
          "ExceptionData": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "IsFromTemplate": {
            "type": "boolean"
          },
          "TemplateData": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.GetDetailedOrganizationUnitOpeningHoursResponse_Data_SpecialDay": {
        "required": [
          "IsFromTemplate",
          "Date"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "ElectedTemplateID": {
            "type": "integer"
          },
          "ExceptionData": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "IsFromTemplate": {
            "type": "boolean"
          },
          "TemplateData": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.GetOpeningHoursTemplateByID": {
        "required": [
          "OpeningHoursTemplateID"
        ],
        "type": "object",
        "properties": {
          "OpeningHoursTemplateID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.GetOpeningHoursTemplateResponseByID": {
        "required": [
          "OpeningHoursTypeID",
          "IsImported"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Friday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "IsImported": {
            "type": "boolean"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Monday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "OpeningHoursTemplateID": {
            "type": "integer"
          },
          "OpeningHoursTypeID": {
            "type": "integer"
          },
          "Saturday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "SpecialDays": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.GetOpeningHoursTemplateResponseByID_SpecialDay"
            }
          },
          "Sunday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "Thursday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "Tuesday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "Wednesday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.GetOpeningHoursTemplateResponseByID_SpecialDay": {
        "required": [
          "Date"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "OpeningHours": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.GetOpeningHoursTemplatesTranslationKeys": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.GetOpeningHoursTemplatesTranslationKeysResponse": {
        "type": "object",
        "properties": {
          "EntityPropertyTranslations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.GetOpeningHoursTemplatesTranslationKeysResponse_EntityPropertyTranslation"
            }
          },
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.GetOpeningHoursTemplatesTranslationKeysResponse_EntityPropertyTranslation": {
        "type": "object",
        "properties": {
          "CurrentTranslation": {
            "type": "string"
          },
          "TranslationKey": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.GetOrganizationUnitOpeningHours": {
        "required": [
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.GetOrganizationUnitOpeningHoursForPeriod": {
        "required": [
          "From",
          "To",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "From": {
            "type": "string",
            "format": "date-time"
          },
          "OrganizationUnitID": {
            "type": "integer"
          },
          "To": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.GetOrganizationUnitOpeningHoursForPeriodResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OpeningHours": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.GetOrganizationUnitOpeningHoursForPeriodResponse_OrganizationUnitOpeningHours"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.GetOrganizationUnitOpeningHoursForPeriodResponse_OrganizationUnitOpeningHours": {
        "required": [
          "DayOfWeek"
        ],
        "type": "object",
        "properties": {
          "DayOfWeek": {
            "$ref": "#/components/schemas/EVA.Core.DayOfWeek"
          },
          "EndTime": {
            "type": "string"
          },
          "SpecialReason": {
            "type": "string"
          },
          "StartTime": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.GetOrganizationUnitOpeningHoursResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "OpeningHours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.GetOrganizationUnitOpeningHoursResponse_Data"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.GetOrganizationUnitOpeningHoursResponse_Data": {
        "required": [
          "OpeningHoursTypeID"
        ],
        "type": "object",
        "properties": {
          "Friday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "Monday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "OpeningHoursTypeID": {
            "type": "integer"
          },
          "Saturday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "SpecialDays": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.GetOrganizationUnitOpeningHoursResponse_Data_SpecialDay"
            }
          },
          "Sunday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "Thursday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "Tuesday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "Wednesday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.GetOrganizationUnitOpeningHoursResponse_Data_SpecialDay": {
        "required": [
          "Date"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "OpeningHours": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.ListOpeningHoursTemplates": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.OrganizationUnits.ListOpeningHoursTemplatesFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.ListOpeningHoursTemplatesOrganizationUnitSets": {
        "type": "object",
        "properties": {
          "PageConfig": {
            "$ref": "#/components/schemas/EVA.Core.PageConfig_1_EVA.Core.OrganizationUnits.ListOpeningHoursTemplatesOrganizationUnitSetsFilter"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.ListOpeningHoursTemplatesOrganizationUnitSetsResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.nsOpeningHours.ListOpeningHoursTemplatesOrganizationUnitSetsResponse_Data"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.ListOpeningHoursTemplatesOrganizationUnitSetsResponse_Data": {
        "required": [
          "OpeningHoursTypeID",
          "IsImported"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "IsImported": {
            "type": "boolean"
          },
          "OpeningHoursTemplateID": {
            "type": "integer"
          },
          "OpeningHoursTypeID": {
            "type": "integer"
          },
          "OrganizationUnitSets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.nsOpeningHours.ListOpeningHoursTemplatesOrganizationUnitSetsResponse_OrganizationUnitSetData"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.ListOpeningHoursTemplatesOrganizationUnitSetsResponse_OrganizationUnitSetData": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer"
          },
          "Name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.ListOpeningHoursTemplatesResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Result": {
            "$ref": "#/components/schemas/EVA.Core.PagedResult_1_EVA.Core.nsOpeningHours.ListOpeningHoursTemplatesResponse_Data"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.ListOpeningHoursTemplatesResponse_Data": {
        "required": [
          "OpeningHoursTypeID",
          "IsImported"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "IsImported": {
            "type": "boolean"
          },
          "OpeningHoursTemplateID": {
            "type": "integer"
          },
          "OpeningHoursTypeID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.RemoveOrganizationUnitOpeningHoursException": {
        "required": [
          "OpeningHoursTypeID",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "DayOfWeek": {
            "$ref": "#/components/schemas/EVA.Core.DayOfWeek"
          },
          "OpeningHoursTypeID": {
            "type": "integer"
          },
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.RemoveSpecialDateFromOpeningHoursTemplate": {
        "required": [
          "Date",
          "OpeningHoursTemplateID"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "OpeningHoursTemplateID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.SetOrganizationUnitOpeningHoursException": {
        "required": [
          "OpeningHoursTypeID",
          "OpeningHours",
          "OrganizationUnitID"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "DayOfWeek": {
            "$ref": "#/components/schemas/EVA.Core.DayOfWeek"
          },
          "OpeningHours": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "OpeningHoursTypeID": {
            "type": "integer"
          },
          "OrganizationUnitID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.SetSpecialDateOnOpeningHoursTemplate": {
        "required": [
          "Date",
          "Description",
          "IsClosed",
          "StoreDescriptionAsTranslationKey",
          "OpeningHoursTemplateID"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "DayOpeningTimes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateTimeSlot"
            }
          },
          "Description": {
            "type": "string"
          },
          "IsClosed": {
            "type": "boolean"
          },
          "OpeningHoursTemplateID": {
            "type": "integer"
          },
          "StoreDescriptionAsTranslationKey": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.UpdateOpeningHoursTemplate": {
        "required": [
          "OpeningHoursTemplateID"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Friday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "Monday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "OpeningHoursTemplateID": {
            "type": "integer"
          },
          "Saturday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "Sunday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "Thursday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "Tuesday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "Wednesday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.ValidateOpeningHoursTemplate": {
        "required": [
          "OpeningHoursTypeID"
        ],
        "type": "object",
        "properties": {
          "Friday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "Monday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "OpeningHoursTypeID": {
            "type": "integer"
          },
          "Saturday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "Sunday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "Thursday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "Tuesday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          },
          "Wednesday": {
            "$ref": "#/components/schemas/EVA.Core.OrganizationUnits.OpeningHoursTemplateDay"
          }
        },
        "additionalProperties": false
      },
      "EVA.Core.nsOpeningHours.ValidateOpeningHoursTemplateResponse": {
        "required": [
          "Successful"
        ],
        "type": "object",
        "properties": {
          "Error": {
            "$ref": "#/components/schemas/EVA.Core.ServiceError"
          },
          "Metadata": {
            "$ref": "#/components/schemas/EVA.Core.ResponseMessageMetadata"
          },
          "Successful": {
            "type": "boolean"
          },
          "ValidationErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Core.Error"
            }
          }
        },
        "additionalProperties": false
      },
      "EVA.DocumentSigning.SignOrderOrderOptionValueData": {
        "type": "object",
        "properties": {
          "MimeType": {
            "type": "string"
          },
          "Signature": {
            "type": "string"
          },
          "StoredSignature": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Adyen.CheckoutAPI.AdyenChannel": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Payment.Adyen.CheckoutAPI.AdyenCheckoutAPIPaymentMethodRequestProperties": {
        "type": "object",
        "properties": {
          "ApplePayData": {
            "$ref": "#/components/schemas/EVA.Payment.Adyen.CheckoutAPI.ApplePayAnonymousData"
          },
          "Channel": {
            "$ref": "#/components/schemas/EVA.Payment.Adyen.CheckoutAPI.AdyenChannel"
          },
          "Data": {
            "$ref": "#/components/schemas/EVA.Payment.Adyen.CheckoutAPI.AdyenCheckoutAPIPaymentMethodRequestProperties_AdyenCheckoutAPIPaymentMethodRequestAdditionalProperties"
          },
          "GatewayID": {
            "type": "string"
          },
          "ReturnUrl": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Adyen.CheckoutAPI.AdyenCheckoutAPIPaymentMethodRequestProperties_AdyenCheckoutAPIPaymentMethodRequestAdditionalProperties": {
        "type": "object",
        "properties": {
          "AdditionalData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "BrowserInfo": {
            "$ref": "#/components/schemas/EVA.Payment.Adyen.CheckoutAPI.AdyenCheckoutAPIPaymentMethodRequestProperties_AdyenCheckoutAPIPaymentMethodRequestAdditionalProperties_AdyenCheckoutAPIPaymentMethodRequestBrowserInfo"
          },
          "PaymentMethod": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "ShopperEmail": {
            "type": "string"
          },
          "ShopperLocale": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Adyen.CheckoutAPI.AdyenCheckoutAPIPaymentMethodRequestProperties_AdyenCheckoutAPIPaymentMethodRequestAdditionalProperties_AdyenCheckoutAPIPaymentMethodRequestBrowserInfo": {
        "type": "object",
        "properties": {
          "AcceptHeader": {
            "type": "string"
          },
          "ColorDepth": {
            "type": "string"
          },
          "JavaEnabled": {
            "type": "string"
          },
          "JavaScriptEnabled": {
            "type": "string"
          },
          "Language": {
            "type": "string"
          },
          "ScreenHeight": {
            "type": "string"
          },
          "ScreenWidth": {
            "type": "string"
          },
          "TimeZoneOffset": {
            "type": "string"
          },
          "UserAgent": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Adyen.CheckoutAPI.AdyenCheckoutAPIPaymentMethodResultProperties": {
        "required": [
          "DonationAvailable"
        ],
        "type": "object",
        "properties": {
          "ApplePayData": {
            "$ref": "#/components/schemas/EVA.Payment.Adyen.CheckoutAPI.ApplePayResultProperties"
          },
          "Data": {
            "type": "object"
          },
          "DonationAvailable": {
            "type": "boolean"
          },
          "QrCode": {
            "type": "string"
          },
          "RedirectUrl": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Adyen.CheckoutAPI.ApplePayAnonymousData": {
        "type": "object",
        "properties": {
          "BillingAddress": {
            "$ref": "#/components/schemas/EVA.Payment.Adyen.CheckoutAPI.ApplePayAnonymousData_AddressComponents"
          },
          "ShippingAddress": {
            "$ref": "#/components/schemas/EVA.Payment.Adyen.CheckoutAPI.ApplePayAnonymousData_AddressComponents"
          },
          "Token": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Adyen.CheckoutAPI.ApplePayAnonymousData_AddressComponents": {
        "type": "object",
        "properties": {
          "AddressLines": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "AdministrativeArea": {
            "type": "string"
          },
          "CountryID": {
            "type": "string"
          },
          "EmailAddress": {
            "type": "string"
          },
          "FamilyName": {
            "type": "string"
          },
          "GivenName": {
            "type": "string"
          },
          "Locality": {
            "type": "string"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "PostalCode": {
            "type": "string"
          },
          "SubAdministrativeArea": {
            "type": "string"
          },
          "SubLocality": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Adyen.CheckoutAPI.ApplePayResultProperties": {
        "required": [
          "Success"
        ],
        "type": "object",
        "properties": {
          "AuthenticationToken": {
            "type": "string"
          },
          "OrderID": {
            "type": "integer"
          },
          "Success": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Adyen.CheckoutAPI.DropIn.AdyenDropInPaymentMethodRequestProperties": {
        "type": "object",
        "properties": {
          "Channel": {
            "$ref": "#/components/schemas/EVA.Payment.Adyen.CheckoutAPI.AdyenChannel"
          },
          "EmailAddress": {
            "type": "string"
          },
          "ReturnUrl": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Adyen.CheckoutAPI.DropIn.AdyenDropInPaymentMethodResultProperties": {
        "type": "object",
        "properties": {
          "SessionData": {
            "type": "string"
          },
          "SessionID": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Adyen.Legacy.SDK.AdyenCheckoutSDKPaymentMethodRequestProperties": {
        "required": [
          "Channel",
          "ExcludeLineItems",
          "Recurring"
        ],
        "type": "object",
        "properties": {
          "Channel": {
            "$ref": "#/components/schemas/EVA.Payment.Adyen.CheckoutAPI.AdyenChannel"
          },
          "EmailAddress": {
            "type": "string"
          },
          "ExcludeLineItems": {
            "type": "boolean"
          },
          "MerchantAccount": {
            "type": "string"
          },
          "Origin": {
            "type": "string"
          },
          "Recurring": {
            "type": "boolean"
          },
          "ReturnUrl": {
            "type": "string"
          },
          "SdkVersion": {
            "type": "string"
          },
          "Token": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Adyen.Legacy.SDK.AdyenCheckoutSDKPaymentMethodResultProperties": {
        "type": "object",
        "properties": {
          "Data": {
            "type": "object"
          },
          "RedirectUrl": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Adyen.PosSdk.AdyenPosSdkPaymentMethodRequestProperties": {
        "type": "object",
        "properties": {
          "SetupToken": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Adyen.PosSdk.AdyenPosSdkPaymentMethodResultProperties": {
        "type": "object",
        "properties": {
          "InstallationID": {
            "type": "string"
          },
          "PaymentReference": {
            "type": "string"
          },
          "SdkData": {
            "type": "string"
          },
          "SessionUniqueKey": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Buckaroo.BuckarooArticle": {
        "required": [
          "ArticleVatcategory",
          "ArticleUnitprice",
          "ArticleQuantity"
        ],
        "type": "object",
        "properties": {
          "ArticleDescription": {
            "type": "string"
          },
          "ArticleId": {
            "type": "string"
          },
          "ArticleQuantity": {
            "type": "number"
          },
          "ArticleUnitprice": {
            "type": "number"
          },
          "ArticleVatcategory": {
            "$ref": "#/components/schemas/EVA.Payment.Buckaroo.BuckarooArticleVatcategory"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Buckaroo.BuckarooArticleVatcategory": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Payment.Buckaroo.BuckarooGender": {
        "type": "object",
        "additionalProperties": false
      },
      "EVA.Payment.Buckaroo.BuckarooPaymentMethodPayData": {
        "required": [
          "CustomerGender",
          "SendMail",
          "MerchantSendsEmail",
          "ShippingGender",
          "BillingBirthDate",
          "DateDue",
          "AddressesDiffer",
          "ShippingBirthDate",
          "ShippingHouseNumber",
          "BillingGender",
          "Accept",
          "ShippingCosts",
          "B2B",
          "BillingHouseNumber"
        ],
        "type": "object",
        "properties": {
          "Accept": {
            "type": "boolean"
          },
          "AddressesDiffer": {
            "type": "boolean"
          },
          "Articles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVA.Payment.Buckaroo.BuckarooArticle"
            }
          },
          "B2B": {
            "type": "boolean"
          },
          "BillingBirthDate": {
            "type": "string",
            "format": "date-time"
          },
          "BillingCity": {
            "type": "string"
          },
          "BillingCountry": {
            "type": "string"
          },
          "BillingEmail": {
            "type": "string"
          },
          "BillingGender": {
            "$ref": "#/components/schemas/EVA.Payment.Buckaroo.BuckarooGender"
          },
          "BillingHouseNumber": {
            "type": "integer"
          },
          "BillingInitials": {
            "type": "string"
          },
          "BillingLanguage": {
            "type": "string"
          },
          "BillingLastName": {
            "type": "string"
          },
          "BillingPhoneNumber": {
            "type": "string"
          },
          "BillingPostalCode": {
            "type": "string"
          },
          "BillingStreet": {
            "type": "string"
          },
          "BillingTitle": {
            "type": "string"
          },
          "BuyerEmail": {
            "type": "string"
          },
          "CompanyCOCRegistration": {
            "type": "string"
          },
          "CompanyName": {
            "type": "string"
          },
          "CostCentre": {
            "type": "string"
          },
          "CustomerCountry": {
            "type": "string"
          },
          "CustomerEmail": {
            "type": "string"
          },
          "CustomerFirstName": {
            "type": "string"
          },
          "CustomerGender": {
            "$ref": "#/components/schemas/Buckaroo.Gender"
          },
          "CustomerLastName": {
            "type": "string"
          },
          "DateDue": {
            "type": "string",
            "format": "date-time"
          },
          "Department": {
            "type": "string"
          },
          "EstablishmentNumber": {
            "type": "string"
          },
          "ExpirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "FashionChequeCardNumber": {
            "type": "string"
          },
          "GatewayID": {
            "type": "string"
          },
          "IntersolveCardnumber": {
            "type": "string"
          },
          "IntersolvePIN": {
            "type": "string"
          },
          "Issuer": {
            "type": "string"
          },
          "MerchantSendsEmail": {
            "type": "boolean"
          },
          "PageStyle": {
            "type": "string"
          },
          "PaymentMethodsAllowed": {
            "type": "string"
          },
          "ProductName": {
            "type": "string"
          },
          "ReturnUrl": {
            "type": "string"
          },
          "SendMail": {
            "type": "boolean"
          },
          "ShippingBirthDate": {
            "type": "string",
            "format": "date-time"
          },
          "ShippingCity": {
            "type": "string"
          },
          "ShippingCosts": {
            "type": "number"
          },
          "ShippingCountryCode": {
            "type": "string"
          },
          "ShippingEmail": {
            "type": "string"
          },
          "ShippingGender": {
            "$ref": "#/components/schemas/EVA.Payment.Buckaroo.BuckarooGender"
          },
          "ShippingHouseNumber": {
            "type": "integer"
          },
          "ShippingInitials": {
            "type": "string"
          },
          "ShippingLanguage": {
            "type": "string"
          },
          "ShippingLastName": {
            "type": "string"
          },
          "ShippingPhoneNumber": {
            "type": "string"
          },
          "ShippingPostalCode": {
            "type": "string"
          },
          "ShippingStreet": {
            "type": "string"
          },
          "ShippingTitle": {
            "type": "string"
          },
          "VatNumber": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Buckaroo.BuckarooPaymentMethodPayResult": {
        "type": "object",
        "properties": {
          "AccountHolderCity": {
            "type": "string"
          },
          "AccountHolderCountry": {
            "type": "string"
          },
          "AccountHolderName": {
            "type": "string"
          },
          "BIC": {
            "type": "string"
          },
          "BankAccount": {
            "type": "string"
          },
          "IBAN": {
            "type": "string"
          },
          "PayLink": {
            "type": "string"
          },
          "PaymentReference": {
            "type": "string"
          },
          "RedirectUrl": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Core.Cash.CashPaymentMethodRequestProperties": {
        "type": "object",
        "properties": {
          "AmountGiven": {
            "type": "number"
          },
          "StationID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Core.Cash.CashPaymentMethodResultProperties": {
        "required": [
          "RoundedReturnAmount",
          "RawReturnAmount"
        ],
        "type": "object",
        "properties": {
          "RawReturnAmount": {
            "type": "number"
          },
          "ReturnAmounts": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "RoundedReturnAmount": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Core.EVAPay.EVAPayPaymentMethodRequestProperties": {
        "type": "object",
        "properties": {
          "ReturnUrl": {
            "type": "string",
            "description": "ReturnUrl where the customer should be redirected to after the payment."
          },
          "SendEmail": {
            "type": "boolean",
            "description": "If an email with payment information should be sent."
          },
          "SendEmailTo": {
            "type": "string",
            "description": "When `SendEmail` is true, but `SendEmailTo` is omitted, a fallback to the Order.Customer.EmailAddress is attempted."
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Core.EVAPay.EVAPayPaymentMethodResultProperties": {
        "type": "object",
        "properties": {
          "Url": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Core.GiftCard.API.APIGiftCardPaymentMethodRequestProperties": {
        "type": "object",
        "properties": {
          "CardNumber": {
            "type": "string"
          },
          "Pin": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Core.GiftCard.GiftCardRefundPaymentMethodResultProperties": {
        "required": [
          "OrderLineCreated"
        ],
        "type": "object",
        "properties": {
          "OrderLineCreated": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Core.Loyalty.LoyaltyPaymentMethodRequestProperties": {
        "type": "object",
        "properties": {
          "Points": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Core.Manual.ManualPaymentMethodRequestProperties": {
        "type": "object",
        "properties": {
          "IBAN": {
            "type": "string"
          },
          "Reference": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Core.Rembours.RemboursPaymentMethodRequestProperties": {
        "type": "object",
        "properties": {
          "BackendID": {
            "type": "string"
          },
          "Carrier": {
            "type": "string"
          },
          "Reference": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Core.UserCard.UserCardPaymentMethodRequestProperties": {
        "required": [
          "UserCardID"
        ],
        "type": "object",
        "properties": {
          "CardAmount": {
            "type": "number"
          },
          "UserCardID": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Mollie.MolliePaymentMethodRequestProperties": {
        "type": "object",
        "properties": {
          "GatewayID": {
            "type": "string"
          },
          "Issuer": {
            "type": "string"
          },
          "Locale": {
            "type": "string"
          },
          "ReturnUrl": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Mollie.MolliePaymentMethodResultProperties": {
        "type": "object",
        "properties": {
          "RedirectUrl": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.MultiSafepay.MultiSafepayPaymentMethodRequestProperties": {
        "type": "object",
        "properties": {
          "GatewayID": {
            "type": "string"
          },
          "QrSize": {
            "type": "integer"
          },
          "ReturnUrl": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.MultiSafepay.MultiSafepayPaymentMethodResultProperties": {
        "type": "object",
        "properties": {
          "MSPPaymentID": {
            "type": "string"
          },
          "QrUrl": {
            "type": "string"
          },
          "RedirectUrl": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Saferpay.SaferpayPaymentMethodRequestProperties": {
        "type": "object",
        "properties": {
          "ReturnUrlFail": {
            "type": "string"
          },
          "ReturnUrlSuccess": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Saferpay.SaferpayPaymentMethodResponseProperties": {
        "type": "object",
        "properties": {
          "RedirectUrl": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Stripe.StripePaymentMethodRequestProperties": {
        "type": "object",
        "properties": {
          "ReturnUrl": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EVA.Payment.Stripe.StripePaymentMethodResultProperties": {
        "type": "object",
        "properties": {
          "ClientSecret": {
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "eva-auth": {
        "type": "apiKey",
        "description": "The default authentication mechanism when communicating with EVA",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "eva-auth": [ ]
    }
  ]
}