{
  "name": "GetEnumValues",
  "description": "A generic service to return all possible values in specified list, e.g. \u0060Currency\u0060, \u0060TaxCode\u0060 or \u0060StockLabel\u0060.\n\nThe \u0060Name\u0060 of the enumeration is unique within EVA, and all of the \u0060Values\u0060 returned are also unique and identifiable\nby their respective \u0060Name\u0060. Services that consume a value of an enumeration will expect the numeric \u0060Value\u0060 returned.\n\nSome of these enumerations are static and are defined by code, meaning the \u0060Values\u0060\u0027 combination of \u0060Name\u0060 and \u0060Value\u0060\nis contant and will never change. It is important to know, though, that other enumerations may be dynamic and can be\naltered per environment by their own respective services. When using these, keep in mind they can vary between\nenvironments and new values could be added. It is guaranteed, however, that once a certain \u0060Name\u0060-\u0060Value\u0060 pair is set,\nit will never change in that particular environment and you are safe treat it as a constant.\n\n:point_right: It is important to realize these dynamics, because at first sight, all of these values may seem contant between\nenvironments - but that is the mere result of an initialization sequence that is usually identical, but definitely\nnot guaranteed!\n\n:point_right: \u0060IsFlags\u0060 will indicate if the values should be treated as bit fields (or, a set of flags). For example,\nthe enumeration \u0060OrganizationUnitTypes\u0060 demonstrates that an organization unit can both be a Shop (\u00601\u0060) and a Warehouse (\u006016\u0060)\nat the same time, indicated by value \u006017\u0060. Always use bitwise operands on these fields!"
}